[
  {
    "class": "UAnimationCompressionLibraryDatabase",
    "name": "SetVisualFidelity",
    "description": "An ACL database object references several UAnimSequence instances that it contains. Initiate a latent database change in quality by streaming in/out as necessary.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DatabaseAsset",
        "type": "UAnimationCompressionLibraryDatabase",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "ACLVisualFidelityChangeResult",
        "optional": false,
        "out": true
      },
      {
        "name": "VisualFidelity",
        "type": "ACLVisualFidelity",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationCompressionLibraryDatabase",
    "name": "GetVisualFidelity",
    "description": "",
    "parameters": [
      {
        "name": "DatabaseAsset",
        "type": "UAnimationCompressionLibraryDatabase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ACLVisualFidelity"
  },
  {
    "class": "ULayersBlueprintLibrary",
    "name": "RemoveActorFromLayer",
    "description": "Function library containing methods for interacting with editor layers Removes the actor from the specified layer",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Layer",
        "type": "FActorLayer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULayersBlueprintLibrary",
    "name": "GetActors",
    "description": "Get all the actors in this layer",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorLayer",
        "type": "FActorLayer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "ULayersBlueprintLibrary",
    "name": "AddActorToLayer",
    "description": "Adds the actor to the specified layer",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Layer",
        "type": "FActorLayer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "UnlockAIResourcesWithAnimation",
    "description": "unlocks indicated AI resources of animated pawn. Will unlock only animation-locked resources",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "bUnlockMovement",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "UnlockAILogic",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "SpawnAIFromClass",
    "description": "Spawns AI agent of a given class. The PawnClass needs to have AIController set for the function to spawn a controller as well. and AI controller, this BehaviorTree asset will be assigned to the AI controller, and run. persistent level (which is the default behavior).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PawnClass",
        "type": "TSubclassOf_APawn_",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTree",
        "type": "UBehaviorTree",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bNoCollisionFail",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Owner",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "APawn"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "SimpleMoveToLocation",
    "description": "",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      },
      {
        "name": "Goal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "SimpleMoveToActor",
    "description": "",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      },
      {
        "name": "Goal",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "SendAIMessage",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MessageSource",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccess",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "LockAIResourcesWithAnimation",
    "description": "locks indicated AI resources of animated pawn",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockMovement",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LockAILogic",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "IsValidAIRotation",
    "description": "",
    "parameters": [
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "IsValidAILocation",
    "description": "",
    "parameters": [
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "IsValidAIDirection",
    "description": "",
    "parameters": [
      {
        "name": "DirectionVector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetNextNavLinkIndex",
    "description": "Return the path index of the next nav link for the current path of the given controller. Returns INDEX_NONE if no path or no incoming nav link.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetCurrentPathPoints",
    "description": "Returns an array of navigation path points given controller is currently using.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetCurrentPathIndex",
    "description": "Return the path index the given controller is currently at. Returns INDEX_NONE if no path.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetCurrentPath",
    "description": "Returns a NEW UOBJECT that is a COPY of navigation path given controller is currently using. The result being a copy means you won't be able to influence agent's pathfollowing by manipulating received path. Please use GetCurrentPathPoints if you only need the array of path points.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNavigationPath"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetBlackboard",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlackboardComponent"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "GetAIController",
    "description": "The way it works exactly is if the actor passed in is a pawn, then the function retrieves pawn's controller cast to AIController. Otherwise the function returns actor cast to AIController.",
    "parameters": [
      {
        "name": "ControlledActor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AAIController"
  },
  {
    "class": "UAIBlueprintHelperLibrary",
    "name": "CreateMoveToProxyObject",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Destination",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "AcceptanceRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopOnOverlap",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAIAsyncTaskBlueprintProxy"
  },
  {
    "class": "UAIPerceptionSystem",
    "name": "ReportPerceptionEvent",
    "description": "AI Subsystem managing AI Perception through registered AI Senses between Listeners and Stimuli Sources",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PerceptionEvent",
        "type": "UAISenseEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAIPerceptionSystem",
    "name": "RegisterPerceptionStimuliSource",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sense",
        "type": "TSubclassOf_UAISense_",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAIPerceptionSystem",
    "name": "GetSenseClassForStimulus",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Stimulus",
        "type": "FAIStimulus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UAISense_"
  },
  {
    "class": "UAISense_Damage",
    "name": "ReportDamageEvent",
    "description": "EventLocation will be reported as Instigator's location at the moment of event happening",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DamagedActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageAmount",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EventLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HitLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAISense_Hearing",
    "name": "ReportNoiseEvent",
    "description": "Report a noise event.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NoiseLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Loudness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxRange",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAISense_Prediction",
    "name": "RequestPawnPredictionEvent",
    "description": "Asks perception system to supply Requestor with PredictedActor's predicted location in PredictionTime seconds Location is being predicted based on PredicterActor's current location and velocity",
    "parameters": [
      {
        "name": "Requestor",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictedActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictionTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAISense_Prediction",
    "name": "RequestControllerPredictionEvent",
    "description": "Asks perception system to supply Requestor with PredictedActor's predicted location in PredictionTime seconds Location is being predicted based on PredicterActor's current location and velocity",
    "parameters": [
      {
        "name": "Requestor",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictedActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictionTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAISense_Touch",
    "name": "ReportTouchEvent",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TouchReceiver",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAITask_MoveTo",
    "name": "AIMoveTo",
    "description": "Move to a location or an actor",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "GoalLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "GoalActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "AcceptanceRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StopOnOverlap",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "AcceptPartialPath",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bUsePathfinding",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseContinuousGoalTracking",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ProjectGoalOnNavigation",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "RequireNavigableEndLocation",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_MoveTo"
  },
  {
    "class": "UAITask_RunEQS",
    "name": "RunEQS",
    "description": "",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryTemplate",
        "type": "UEnvQuery",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAITask_RunEQS"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "StopUsingExternalEvent",
    "description": "Save variables marked as \"instance memory\" and clear owning actor",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "StartUsingExternalEvent",
    "description": "Initialize variables marked as \"instance memory\" and set owning actor for blackboard operations",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "OwningActor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsVector",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsString",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsRotator",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsObject",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsName",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsInt",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsFloat",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsEnum",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsClass",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "SetBlackboardValueAsBool",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetOwnersBlackboard",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlackboardComponent"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetOwnerComponent",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBehaviorTreeComponent"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsVector",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsString",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsRotator",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsObject",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsName",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsInt",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsFloat",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsEnum",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsClass",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsBool",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "GetBlackboardValueAsActor",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "ClearBlackboardValueAsVector",
    "description": "(DEPRECATED) Use ClearBlackboardValue instead",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBTFunctionLibrary",
    "name": "ClearBlackboardValue",
    "description": "Resets indicated value to \"not set\" value, based on values type",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_PawnAction",
    "name": "CreateActionInstance",
    "description": "Things to remember: * Actions are created paused Blueprint interface",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActionClass",
        "type": "TSubclassOf_UDEPRECATED_PawnAction_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_PawnActionsComponent",
    "name": "K2_PerformAction",
    "description": "blueprint interface",
    "parameters": [
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Action",
        "type": "UDEPRECATED_PawnAction",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEnvQueryManager",
    "name": "RunEQSQuery",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryTemplate",
        "type": "UEnvQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "Querier",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RunMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "WrapperClass",
        "type": "TSubclassOf_UEnvQueryInstanceBlueprintWrapper_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEnvQueryInstanceBlueprintWrapper"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "SetLocalNavigationGridDensity",
    "description": "Manager for local navigation grids Builds non overlapping grid from multiple sources, that can be used later for pathfinding. Check also: UGridPathFollowingComponent, FNavLocalGridData",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CellSize",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "RemoveLocalNavigationGrid",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "GridId",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRebuildGrids",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "FindLocalNavigationGridPath",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "AddLocalNavigationGridForPoints",
    "description": "creates single grid data for set of points",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Locations",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius2D",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bRebuildGrids",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "AddLocalNavigationGridForPoint",
    "description": "creates new grid data for single point",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius2D",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bRebuildGrids",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "AddLocalNavigationGridForCapsule",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "CapsuleRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CapsuleHalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius2D",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bRebuildGrids",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNavLocalGridManager",
    "name": "AddLocalNavigationGridForBox",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius2D",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bRebuildGrids",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetVector",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Vector",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetStruct",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Struct",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInstancedStruct"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetString",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_String",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetRotator",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Rotator",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetObject",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Object",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetName",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Name",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetInt32",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Int32",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetFloat",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Float",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetEnum",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Enum",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetClass",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Class",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UValueOrBBKeyBlueprintUtility",
    "name": "GetBool",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_Bool",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAndroidFileServerBPLibrary",
    "name": "StopFileServer",
    "description": "Request termination of Android FileServer",
    "parameters": [
      {
        "name": "bUSB",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bNetwork",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAndroidFileServerBPLibrary",
    "name": "StartFileServer",
    "description": "Request startup of Android FileServer",
    "parameters": [
      {
        "name": "bUSB",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bNetwork",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Port",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAndroidFileServerBPLibrary",
    "name": "IsFileServerRunning",
    "description": "Check if Android FileServer is running",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UAndroidPermissionFunctionLibrary",
    "name": "CheckPermission",
    "description": "check if the permission is already granted",
    "parameters": [
      {
        "name": "permission",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAndroidPermissionFunctionLibrary",
    "name": "AcquirePermissions",
    "description": "try to acquire permissions and return a singleton callback proxy object containing OnPermissionsGranted delegate",
    "parameters": [
      {
        "name": "permissions",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAndroidPermissionCallbackProxy"
  },
  {
    "class": "UAnimationAttributeBlueprintLibrary",
    "name": "SetAttributeKeys",
    "description": "",
    "parameters": [
      {
        "name": "AnimationDataController",
        "type": "TScriptInterface_UAnimationDataController_",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeIdentifier",
        "type": "FAnimationAttributeIdentifier",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationAttributeBlueprintLibrary",
    "name": "SetAttributeKey",
    "description": "",
    "parameters": [
      {
        "name": "AnimationDataController",
        "type": "TScriptInterface_UAnimationDataController_",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeIdentifier",
        "type": "FAnimationAttributeIdentifier",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationAttributeBlueprintLibrary",
    "name": "GetAttributeKeys",
    "description": "",
    "parameters": [
      {
        "name": "AnimationDataModel",
        "type": "TScriptInterface_UAnimationDataModel_",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeIdentifier",
        "type": "FAnimationAttributeIdentifier",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTimes",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "Values",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationAttributeBlueprintLibrary",
    "name": "GetAttributeKey",
    "description": "",
    "parameters": [
      {
        "name": "AnimationDataModel",
        "type": "TScriptInterface_UAnimationDataModel_",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeIdentifier",
        "type": "FAnimationAttributeIdentifier",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetVariableFrameStrippingSettings",
    "description": "Blueprint library for altering and analyzing animation / skeletal data Sets the Variable Frame Stripping Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableFrameStrippingSettings",
        "type": "UVariableFrameStrippingSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetRootMotionLockType",
    "description": "Sets the Root Motion Lock Type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "RootMotionLockType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetRootMotionEnabled",
    "description": "Sets whether or not Root Motion is Enabled for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetRateScale",
    "description": "Sets the (Play) Rate Scale for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "RateScale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetIsRootMotionLockForced",
    "description": "Sets whether or not Root Motion locking is Forced for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "bForced",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetCurveCompressionSettings",
    "description": "Sets the Curve Compression Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "UAnimCurveCompressionSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetBoneCompressionSettings",
    "description": "Sets the Bone Compression Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "UAnimBoneCompressionSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetAnimationInterpolationType",
    "description": "Sets the Animation Interpolation type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpolationType",
        "type": "EAnimInterpolationType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetAdditiveBasePoseType",
    "description": "Sets the Additive Base Pose type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditiveBasePoseType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "SetAdditiveAnimationType",
    "description": "Sets the Additive Animation type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditiveAnimationType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "ReplaceAnimNotifyStates",
    "description": "Replaces animation notifies in the specified Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "OldNotifyClass",
        "type": "TSubclassOf_UAnimNotifyState_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewNotifyClass",
        "type": "TSubclassOf_UAnimNotifyState_",
        "optional": false,
        "out": false
      },
      {
        "name": "OnNotifyStateReplaced",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "ReplaceAnimNotifies",
    "description": "Replaces animation notifies in the specified Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "OldNotifyClass",
        "type": "TSubclassOf_UAnimNotify_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewNotifyClass",
        "type": "TSubclassOf_UAnimNotify_",
        "optional": false,
        "out": false
      },
      {
        "name": "OnNotifyReplaced",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveVirtualBones",
    "description": "Removes Virtual Bones with the specified Bone Names from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "VirtualBoneNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveVirtualBone",
    "description": "Removes a Virtual Bone with the specified Bone Name from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "VirtualBoneName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveMetaDataOfClass",
    "description": "Removes all Meta Data Instance of the specified Class from the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataClass",
        "type": "TSubclassOf_UAnimMetaData_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveMetaData",
    "description": "Removes the specified Meta Data Instance from the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataObject",
        "type": "UAnimMetaData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveCurve",
    "description": "Removes an Animation Curve by Name from the given Animation Sequence (Raw Animation Curves [Names] may not be removed from the Skeleton)",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRemoveNameFromSkeleton",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveBoneAnimation",
    "description": "Removes an Animation Curve by Name from the given Animation Sequence (Raw Animation Curves [Names] may not be removed from the Skeleton) @@param AnimationSequence : AnimSequence @@param BoneName : Name of bone track user wants to remove @@param bIncludeChildren : true if user wants to include all children of BoneName",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeChildren",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bFinalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAnimationSyncMarkersByTrack",
    "description": "Removes All Animation Sync Marker found within the Animation Sequence that belong to the specific Notify Track, and returns the number of removed instances",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAnimationSyncMarkersByName",
    "description": "Removes All Animation Sync Marker found within the Animation Sequence whose name matches MarkerName, and returns the number of removed instances",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "MarkerName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAnimationNotifyTrack",
    "description": "Removes an Animation Notify Track from Animation Sequence by Name",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAnimationNotifyEventsByTrack",
    "description": "Removes Animation Notify Events found by Track within the Animation Sequence, and returns the number of removed name instances",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAnimationNotifyEventsByName",
    "description": "Removes Animation Notify Events found by Name within the Animation Sequence, and returns the number of removed name instances",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllVirtualBones",
    "description": "Removes all Virtual Bones from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllMetaData",
    "description": "Removes all Meta Data from the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllCurveData",
    "description": "Removes all Animation Curve Data from the given Animation Sequence (Raw Animation Curves [Names] may not be removed from the Skeleton)",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllBoneAnimation",
    "description": "Removes all Animation Bone Track Data from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllAnimationSyncMarkers",
    "description": "Removes All Animation Sync Markers found within the Animation Sequence, and returns the number of removed instances",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "RemoveAllAnimationNotifyTracks",
    "description": "Removes All Animation Notify Tracks from Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsValidTime",
    "description": "Checks whether or not the given Time Value lies within the given Animation Sequence's Length",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "IsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsValidRawAnimationTrackName",
    "description": "Checks whether or not the given Animation Track Name is contained within the Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsValidAnimNotifyTrackName",
    "description": "Checks whether or not the given Track Name is a valid Animation Notify Track in the Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsValidAnimationSyncMarkerName",
    "description": "Checks whether or not the given Marker Name is a valid Animation Sync Marker Name",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "MarkerName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsRootMotionLockForced",
    "description": "Checks whether or not Root Motion locking is Forced for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "IsRootMotionEnabled",
    "description": "Checks whether or not Root Motion is Enabled for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetVectorKeys",
    "description": "Retrieves, a multiple of, Vector Key(s) from the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "Values",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetVariableFrameStrippingSettings",
    "description": "Retrieves the Variable Frame Stripping Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableFrameStrippingSettings",
        "type": "UVariableFrameStrippingSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetUniqueMarkerNames",
    "description": "Retrieves all the Unique Names for the Animation Sync Markers contained by the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "MarkerNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetTransformationKeys",
    "description": "Retrieves, a multiple of, Transformation Key(s) from the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "Values",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetTimeAtFrame",
    "description": "Retrieves the Time Value at the specified Frame Indexfor the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetSequenceLength",
    "description": "Retrieves the Length of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Length",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRootMotionLockType",
    "description": "Retrieves the Root Motion Lock Type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "LockType",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRawTrackScaleData",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ScaleData",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRawTrackRotationData",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationData",
        "type": "TArray_FQuat_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRawTrackPositionData",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionData",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRawTrackData",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionKeys",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "RotationKeys",
        "type": "TArray_FQuat_",
        "optional": false,
        "out": true
      },
      {
        "name": "ScalingKeys",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetRateScale",
    "description": "Retrieves the (Play) Rate Scale of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "RateScale",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetNumKeys",
    "description": "Retrieves the number of animation keys for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NumKeys",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetNumFrames",
    "description": "Retrieves the number of animation frames for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NumFrames",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetNodesOfClass",
    "description": "Returns all Animation Graph Nodes of the provided Node Class contained by the Animation Blueprint",
    "parameters": [
      {
        "name": "AnimationBlueprint",
        "type": "UAnimBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "NodeClass",
        "type": "TSubclassOf_UAnimGraphNode_Base_",
        "optional": false,
        "out": false
      },
      {
        "name": "GraphNodes",
        "type": "TArray_UAnimGraphNode_Base_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIncludeChildClasses",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetMontageSlotNames",
    "description": "Retrieves the Names of the Animation Slots used in the given Montage",
    "parameters": [
      {
        "name": "AnimationMontage",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetMetaDataOfClass",
    "description": "Retrieves all Meta Data Instances from the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataClass",
        "type": "TSubclassOf_UAnimMetaData_",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataOfClass",
        "type": "TArray_UAnimMetaData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetMetaData",
    "description": "Retrieves all Meta Data Instances from the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaData",
        "type": "TArray_UAnimMetaData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetFrameAtTime",
    "description": "Retrieves the Frame Index at the specified Time Value for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetFloatValueAtTime",
    "description": "Retrieves an evaluated float value for a given time from the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetFloatKeys",
    "description": "Retrieves, a multiple of, Float Key(s) from the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "Values",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetCurveCompressionSettings",
    "description": "Retrieves the Curve Compression Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "UAnimCurveCompressionSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetBonePosesForTime",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bExtractRootMotion",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Poses",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "PreviewMesh",
        "type": "USkeletalMesh",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetBonePosesForFrame",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExtractRootMotion",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Poses",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "PreviewMesh",
        "type": "USkeletalMesh",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetBonePoseForTime",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bExtractRootMotion",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Pose",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetBonePoseForFrame",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExtractRootMotion",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Pose",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetBoneCompressionSettings",
    "description": "Retrieves the Bone Compression Settings for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "UAnimBoneCompressionSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimNotifyEventTriggerTime",
    "description": "Returns the actual trigger time for a NotifyEvent",
    "parameters": [
      {
        "name": "NotifyEvent",
        "type": "FAnimNotifyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimNotifyEventDuration",
    "description": "Returns the duration for a NotifyEvent, only non-zero for Anim Notify States",
    "parameters": [
      {
        "name": "NotifyEvent",
        "type": "FAnimNotifyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationTrackNames",
    "description": "Retrieves the Names of the individual ATracks for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationSyncMarkersForTrack",
    "description": "Retrieves all Animation Sync Markers for the given Notify Track Name from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Markers",
        "type": "TArray_FAnimSyncMarker_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationSyncMarkers",
    "description": "Retrieves all the Animation Sync Markers for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Markers",
        "type": "TArray_FAnimSyncMarker_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationNotifyTrackNames",
    "description": "Retrieves all Unique Animation Notify Track Names found within the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationNotifyEventsForTrack",
    "description": "Retrieves all Animation Notify Events for the given Notify Track Name from the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Events",
        "type": "TArray_FAnimNotifyEvent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationNotifyEvents",
    "description": "Retrieves all Animation Notify Events found within the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyEvents",
        "type": "TArray_FAnimNotifyEvent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationNotifyEventNames",
    "description": "Retrieves all Unique Animation Notify Events found within the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "EventNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationInterpolationType",
    "description": "Retrieves the Animation Interpolation type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpolationType",
        "type": "EAnimInterpolationType",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationGraphs",
    "description": "Returns all Animation Graphs contained by the provided Animation Blueprint",
    "parameters": [
      {
        "name": "AnimationBlueprint",
        "type": "UAnimBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationGraphs",
        "type": "TArray_UAnimationGraph_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAnimationCurveNames",
    "description": "Retrieves the Names of the individual float curves for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAdditiveBasePoseType",
    "description": "Retrieves the Additive Base Pose type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditiveBasePoseType",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "GetAdditiveAnimationType",
    "description": "Retrieves the Additive Animation type for the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditiveAnimationType",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "FindBonePathToRoot",
    "description": "Finds the Bone Path from the given Bone to the Root Bone",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BonePath",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "FinalizeBoneAnimation",
    "description": "",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "ExtractRootTrackTransform",
    "description": "Gets the root transform from the raw animation at Time",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "EvaluateRootBoneTimecodeSubframeAttributeAtTime",
    "description": "Evaluates the subframe timecode attribute (e.g. \"TCSubframe\") of the root bone and returns the resulting value. Since the subframe component of FFrameTime is clamped to the range [0.0, 1.0), it cannot accurately represent the use case where the timecode metadata represents subframe values as whole numbered subframes instead of as a percentage of a frame the way the engine does. The subframe component of the FQualifiedFrameTime returned by EvaluateRootBoneTimecodeAttributesAtTime() may not reflect the authored subframe metadata in that case. This function allows access to the subframe values that were actually authored in the timecode metadata. on the bone or if it cannot be evaluated, the output parameter will not be modified.",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "EvalTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSubframe",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "EvaluateRootBoneTimecodeAttributesAtTime",
    "description": "Evaluates timecode attributes (e.g. \"TCFrame\", \"TCSecond\", etc.) of the root bone and returns the resulting qualified frame time. set, then that will be used as the frame rate of the qualified frame time. Otherwise, the sampling frame rate of the anim sequence is used. If no timecode attributes are present on the bone or if none can be evaluated, the passed object will not be modified.",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "EvalTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutQualifiedFrameTime",
        "type": "FQualifiedFrameTime",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "EvaluateBoneTimecodeAndSlateAttributesAtTime",
    "description": "Evaluates timecode attributes (e.g. \"TCFrame\", \"TCSecond\", etc.) and TCSlate of the root bone and returns the resulting qualified frame time. set, then that will be used as the frame rate of the qualified frame time. Otherwise, the sampling frame rate of the anim sequence is used. If no timecode attributes are present on the bone or if none can be evaluated, the passed object will not be modified.",
    "parameters": [
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "EvalTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutQualifiedFrameTime",
        "type": "FQualifiedFrameTime",
        "optional": false,
        "out": true
      },
      {
        "name": "Slate",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "DoesCurveExist",
    "description": "Checks whether or not the given Curve Name exist on the Skeleton referenced by the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "DoesBoneNameExist",
    "description": "Checks whether or not the given Bone Name exist on the Skeleton referenced by the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bExists",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "CopyAnimNotifiesFromSequence",
    "description": "Copies animation notifies from Src Animation Sequence to Dest. Creates anim notify tracks as necessary. Returns true on success.",
    "parameters": [
      {
        "name": "SourceAnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationAnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeleteExistingNotifies",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "CopyAnimationCurveNamesToSkeleton",
    "description": "Ensures that any curve names that do not exist on the NewSkeleton are added to it, in which case the SmartName on the actual curve itself will also be updated",
    "parameters": [
      {
        "name": "OldSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "NewSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "ContainsMetaDataOfClass",
    "description": "Checks whether or not the given Animation Asset contains Meta Data Instance of the specified Meta Data Class",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataClass",
        "type": "TSubclassOf_UAnimMetaData_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddVirtualBone",
    "description": "Adds a Virtual Bone between the Source and Target Bones to the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "VirtualBoneName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddVectorCurveKeys",
    "description": "Adds a multiple of Vector Keys to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Vectors",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddVectorCurveKey",
    "description": "Adds a Vector Key to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Vector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddTransformationCurveKeys",
    "description": "Adds a multiple of Transformation Keys to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Transforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddTransformationCurveKey",
    "description": "Adds a Transformation Key to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddNodeAssetOverride",
    "description": "Adds an Animation Asset override for the provided AnimationBlueprint, replacing any instance of Target with Override",
    "parameters": [
      {
        "name": "AnimBlueprint",
        "type": "UAnimBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "Override",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "bPrintAppliedOverrides",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddMetaDataObject",
    "description": "Adds an instance of the specified MetaData Class to the given Animation Asset (requires MetaDataObject's outer to be the Animation Asset)",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataObject",
        "type": "UAnimMetaData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddMetaData",
    "description": "Creates and Adds an instance of the specified MetaData Class to the given Animation Asset",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataClass",
        "type": "TSubclassOf_UAnimMetaData_",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataInstance",
        "type": "UAnimMetaData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddFloatCurveKeys",
    "description": "Adds a multiple of Float Keys to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Times",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddFloatCurveKey",
    "description": "Adds a Float Key to the specified Animation Curve inside of the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddCurve",
    "description": "Adds an Animation Curve by Type and Name to the given Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": true,
        "out": false
      },
      {
        "name": "bMetaDataCurve",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationSyncMarker",
    "description": "Adds an Animation Sync Marker to Notify track in the given Animation with the corresponding Marker Name and Time",
    "parameters": [
      {
        "name": "AnimationSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "MarkerName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationNotifyTrack",
    "description": "Adds an Animation Notify Track to the Animation Sequence",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationNotifyStateEventObject",
    "description": "Adds an the specific Animation Notify State to the Animation Sequence (requires Notify State's outer to be the Animation Sequence)",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyState",
        "type": "UAnimNotifyState",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationNotifyStateEvent",
    "description": "Adds an Animation Notify State Event to Notify track in the given Animation with the given Notify State creation data",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyStateClass",
        "type": "TSubclassOf_UAnimNotifyState_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimNotifyState"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationNotifyEventObject",
    "description": "Adds an the specific Animation Notify to the Animation Sequence (requires Notify's outer to be the Animation Sequence)",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Notify",
        "type": "UAnimNotify",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationBlueprintLibrary",
    "name": "AddAnimationNotifyEvent",
    "description": "Adds an Animation Notify Event to Notify track in the given Animation with the given Notify creation data",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyTrackName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NotifyClass",
        "type": "TSubclassOf_UAnimNotify_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimNotify"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "SetBonePose",
    "description": "Script exposed functionality for populating, retrieving data from and setting data on FAnimPose Sets the transform for the provided bone name for a pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "IsValid",
    "description": "Returns whether the Anim Pose contains valid data",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetSocketPose",
    "description": "Retrieves the transform for the provided socket name from a pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetSocketNames",
    "description": "Returns an array of socket names contained by the pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Sockets",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetRelativeTransform",
    "description": "Retrieves the relative transform between the two provided bone names",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "FromBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ToBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetRelativeToRefPoseTransform",
    "description": "Retrieves the relative transform between reference and animated bone transform",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetRefPoseRelativeTransform",
    "description": "Retrieves the relative transform for the reference pose between the two provided bone names",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "FromBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ToBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetReferencePose",
    "description": "Populates an Anim Pose with the reference poses stored for the provided USkeleton",
    "parameters": [
      {
        "name": "Skeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPose",
        "type": "FAnimPose",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetRefBonePose",
    "description": "Retrieves the reference pose transform for the provided bone name",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetCurveWeight",
    "description": "Returns the weight of an evaluated curve - if found",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetCurveNames",
    "description": "Returns an array of curve names contained by the pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Curves",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetBonePose",
    "description": "Retrieves the transform for the provided bone name from a pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EAnimPoseSpaces",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetBoneNames",
    "description": "Returns an array of bone names contained by the pose",
    "parameters": [
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Bones",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetAnimPoseAtTime",
    "description": "Evaluates an Animation Sequence Base to generate a valid Anim Pose instance",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EvaluationOptions",
        "type": "FAnimPoseEvaluationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "GetAnimPoseAtFrame",
    "description": "Evaluates an Animation Sequence Base to generate a valid Anim Pose instance",
    "parameters": [
      {
        "name": "AnimationSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "FrameIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "EvaluationOptions",
        "type": "FAnimPoseEvaluationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Pose",
        "type": "FAnimPose",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimPoseExtensions",
    "name": "EvaluateAnimationBlueprintWithInputPose",
    "description": "Evaluates an Animation Blueprint instance, using the provided Anim Pose and its Input Pose value, generating a valid Anim Pose using the result. Warning this function may cause performance issues.",
    "parameters": [
      {
        "name": "InputPose",
        "type": "FAnimPose",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetSkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationBlueprint",
        "type": "UAnimBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPose",
        "type": "FAnimPose",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimCharacterMovementLibrary",
    "name": "PredictGroundMovementStopLocation",
    "description": "Library of common techniques for driving character locomotion animations. Predict where the character will stop based on its current movement properties and parameters from the movement component. This uses prediction logic that is heavily tied to the UCharacterMovementComponent. Each parameter corresponds to a value from the UCharacterMovementComponent with the same name. Because this is a thread safe function, it's recommended to populate these fields via the Property Access system.",
    "parameters": [
      {
        "name": "Velocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseSeparateBrakingFriction",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "BrakingFriction",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "GroundFriction",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "BrakingFrictionFactor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "BrakingDecelerationWalking",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UAnimCharacterMovementLibrary",
    "name": "PredictGroundMovementPivotLocation",
    "description": "Predict where the character will change direction during a pivot based on its current movement properties and parameters from the movement component. This uses prediction logic that is heavily tied to the UCharacterMovementComponent. Each parameter corresponds to a value from the UCharacterMovementComponent with the same name. Because this is a thread safe function, it's recommended to populate these fields via the Property Access system.",
    "parameters": [
      {
        "name": "Acceleration",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Velocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "GroundFriction",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UAnimDistanceMatchingLibrary",
    "name": "SetPlayrateToMatchSpeed",
    "description": "Library of techniques for driving animations by distance metrics rather than by time. These techniques can be effective at compensating for differences between character movement and authored motion in the animations. Distance Matching effectively changes the play rate of the animation to keep the feet from sliding. It's common to clamp the resulting play rate to avoid animations playing too slow or too fast and to use techniques such as Stride Warping to make up the difference. Set the play rate of the sequence player so that the speed of the animation matches in-game movement speed. While distance matching is commonly used for transition animations, cycle animations (walk, jog, etc) typically just adjust their play rate to match the in-game movement speed. This function assumes that the animation has a constant speed.",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "SpeedToMatch",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRateClamp",
        "type": "FVector2D",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "UAnimDistanceMatchingLibrary",
    "name": "DistanceMatchToTarget",
    "description": "Set the time of the sequence evaluator to the point in the animation where the distance curve matches the DistanceToTarget input. A common use case is to achieve stops without foot sliding by, each frame, selecting the point in the animation that matches the distance the character has remaining until it stops. Note that because this technique sets the time of the animation by distance remaining, it doesn't respect phase of any previous animation (e.g. from a jog cycle).",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceToTarget",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceCurveName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "UAnimDistanceMatchingLibrary",
    "name": "AdvanceTimeByDistanceMatching",
    "description": "Advance the sequence evaluator forward by distance traveled rather than time. A distance curve is required on the animation that describes the distance traveled by the root bone in the animation. See UDistanceCurveModifier.",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceTraveled",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceCurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRateClamp",
        "type": "FVector2D",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "UMotionExtractorUtilityLibrary",
    "name": "GetStoppedRangesFromRootMotion",
    "description": "Returns the ranges (X/Start to Y/End) in the specified animation sequence where the animation is considered stopped.",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StopSpeedThreshold",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SampleRate",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UMotionExtractorUtilityLibrary",
    "name": "GetMovingRangesFromRootMotion",
    "description": "Returns the ranges (X/Start to Y/End) in the specified animation sequence where the animation is considered moving.",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StopSpeedThreshold",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SampleRate",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UMotionExtractorUtilityLibrary",
    "name": "GetDesiredValue",
    "description": "Returns the desired value from the extracted poses based on input settings.",
    "parameters": [
      {
        "name": "BoneTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "LastBoneTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionType",
        "type": "EMotionExtractor_MotionType",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EMotionExtractor_Axis",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMotionExtractorUtilityLibrary",
    "name": "GenerateCurveName",
    "description": "Generates a curve name based on input settings.",
    "parameters": [
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionType",
        "type": "EMotionExtractor_MotionType",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EMotionExtractor_Axis",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAnimationSharingManager",
    "name": "GetAnimationSharingManager",
    "description": "Register an Actor with this Animation Sharing manager, according to the SharingSkeleton Returns the AnimationSharing Manager, nullptr if none was set up",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimationSharingManager"
  },
  {
    "class": "UAnimationSharingManager",
    "name": "CreateAnimationSharingManager",
    "description": "Create an Animation Sharing Manager using the provided Setup",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Setup",
        "type": "UAnimationSharingSetup",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationSharingManager",
    "name": "AnimationSharingEnabled",
    "description": "Returns whether or not the animation sharing is enabled",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationWarpingLibrary",
    "name": "GetOffsetRootTransform",
    "description": "Exposes operations related to Animation Warping Get the current world space transform from the offset root bone animgraph node",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAnimationWarpingLibrary",
    "name": "GetCurveValueFromAnimation",
    "description": "Helper function to extract the value of a curve in an animation at a given time",
    "parameters": [
      {
        "name": "Animation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "SetState",
    "description": "Exposes operations to be performed on anim state machine node contexts Manually set the current state of the state machine NOTE: Custom blend type is not supported",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateMachineReference",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetState",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendProfile",
        "type": "UBlendProfile",
        "optional": false,
        "out": false
      },
      {
        "name": "AlphaBlendOption",
        "type": "EAlphaBlendOption",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomBlendCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "IsStateBlendingOut",
    "description": "Returns whether the state the node belongs to is blending out",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "IsStateBlendingIn",
    "description": "Returns whether the state the node belongs to is blending in",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "GetState",
    "description": "Returns the name of the current state of this state machine",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateMachineReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "GetRelevantAnimTimeRemainingFraction",
    "description": "Returns the remaining animation time as a fraction of the duration for the state's most relevant asset player",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "GetRelevantAnimTimeRemaining",
    "description": "Returns the remaining animation time of the state's most relevant asset player",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Node",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "ConvertToAnimationStateResultPure",
    "description": "Get an anim state reference from an anim node reference (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationState",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "ConvertToAnimationStateResult",
    "description": "Get an anim state reference from an anim node reference",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationState",
        "type": "FAnimationStateResultReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "ConvertToAnimationStateMachinePure",
    "description": "Get an anim state machine from an anim node reference (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationState",
        "type": "FAnimationStateMachineReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationStateMachineLibrary",
    "name": "ConvertToAnimationStateMachine",
    "description": "Get an anim state machine from an anim node reference",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationState",
        "type": "FAnimationStateMachineReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "IsActive",
    "description": "Exposes operations to be performed on anim node contexts Prototype function for thread-safe anim update calls Prototype function for thread-safe anim node calls Get whether this branch of the graph is active (i.e. NOT blending out).",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "GetDeltaTime",
    "description": "Get the current delta time in seconds",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "GetCurrentWeight",
    "description": "Get the current weight of this branch of the graph",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "GetAnimNodeReference",
    "description": "Internal compiler use only - Get a reference to an anim node by index",
    "parameters": [
      {
        "name": "Instance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAnimNodeReference"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "GetAnimInstance",
    "description": "Get the anim instance that hosts this context",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimInstance"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "ConvertToUpdateContext",
    "description": "Convert to an update context",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimExecutionContextConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FAnimUpdateContext"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "ConvertToPoseContext",
    "description": "Convert to a pose context",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimExecutionContextConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FAnimPoseContext"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "ConvertToInitializationContext",
    "description": "Convert to an initialization context",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimExecutionContextConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FAnimInitializationContext"
  },
  {
    "class": "UAnimExecutionContextLibrary",
    "name": "ConvertToComponentSpacePoseContext",
    "description": "Convert to a component space pose context",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimExecutionContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimExecutionContextConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FAnimComponentSpacePoseContext"
  },
  {
    "class": "UAnimNodeRigidBodyLibrary",
    "name": "SetOverridePhysicsAsset",
    "description": "Exposes operations to be performed on a rigid body anim node Set the physics asset on the rigid body anim graph node (RBAN).",
    "parameters": [
      {
        "name": "Node",
        "type": "FRigidBodyAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysicsAsset",
        "type": "UPhysicsAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigidBodyAnimNodeReference"
  },
  {
    "class": "UAnimNodeRigidBodyLibrary",
    "name": "ConvertToRigidBodyAnimNodePure",
    "description": "Get a rigid body anim node context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "RigidBodyAnimNode",
        "type": "FRigidBodyAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimNodeRigidBodyLibrary",
    "name": "ConvertToRigidBodyAnimNode",
    "description": "Get a rigid body anim node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FRigidBodyAnimNodeReference"
  },
  {
    "class": "UBlendListBaseLibrary",
    "name": "ResetNode",
    "description": "Exposes operations to be performed on anim state machine node contexts Reset target blend list node to that the next blend is executed from a blank state",
    "parameters": [
      {
        "name": "BlendListBase",
        "type": "FBlendListBaseReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendListBaseLibrary",
    "name": "ConvertToBlendListBase",
    "description": "Get a blend list base context from an anim node context.",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBlendListBaseReference"
  },
  {
    "class": "UBlendSpaceLibrary",
    "name": "SnapToPosition",
    "description": "Exposes operations to be performed on a blend space anim node. Forces the Position to the specified value",
    "parameters": [
      {
        "name": "BlendSpace",
        "type": "FBlendSpaceReference",
        "optional": false,
        "out": false
      },
      {
        "name": "NewPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendSpaceLibrary",
    "name": "GetPosition",
    "description": "Get the current position of the blend space.",
    "parameters": [
      {
        "name": "BlendSpace",
        "type": "FBlendSpaceReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlendSpaceLibrary",
    "name": "GetFilteredPosition",
    "description": "Get the current sample coordinates after going through the filtering.",
    "parameters": [
      {
        "name": "BlendSpace",
        "type": "FBlendSpaceReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlendSpaceLibrary",
    "name": "ConvertToBlendSpacePure",
    "description": "Get a blend space context from an anim node context (pure).",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSpace",
        "type": "FBlendSpaceReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendSpaceLibrary",
    "name": "ConvertToBlendSpace",
    "description": "Get a blend space context from an anim node context.",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBlendSpaceReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SnapToPosition",
    "description": "Exposes operations to be performed on a blend space player anim node. Forces the Position to the specified value",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "NewPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "ShouldResetPlayTimeWhenBlendSpaceChanges",
    "description": "Get the current value of whether the current play time should reset when BlendSpace changes of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SetResetPlayTimeWhenBlendSpaceChanges",
    "description": "Set whether the current play time should reset when BlendSpace changes of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "bReset",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SetPlayRate",
    "description": "Set the play rate of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SetLoop",
    "description": "Set the loop of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SetBlendSpaceWithInertialBlending",
    "description": "Set the current BlendSpace of the blend space player with an interial blend time.",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSpace",
        "type": "UBlendSpace",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "SetBlendSpace",
    "description": "Set the current BlendSpace of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSpace",
        "type": "UBlendSpace",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "GetStartPosition",
    "description": "Get the current start position of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "GetPosition",
    "description": "Get the current position of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "GetPlayRate",
    "description": "Get the current play rate of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "GetLoop",
    "description": "Get the current loop of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "GetBlendSpace",
    "description": "Get the current BlendSpace of the blend space player.",
    "parameters": [
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlendSpace"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "ConvertToBlendSpacePlayerPure",
    "description": "Get a blend space player context from an anim node context (pure).",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSpacePlayer",
        "type": "FBlendSpacePlayerReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendSpacePlayerLibrary",
    "name": "ConvertToBlendSpacePlayer",
    "description": "Get a blend space player context from an anim node context.",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBlendSpacePlayerReference"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_TwoBoneIK",
    "description": "A library of the most common animation blueprint functions. Computes the transform for two bones using inverse kinematics.",
    "parameters": [
      {
        "name": "RootPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "JointPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "JointTarget",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Effector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJointPos",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutEndPos",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bAllowStretching",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "StartStretchRatio",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxStretchScale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_StartProfilingTimer",
    "description": "This function starts measuring the time for a profiling bracket",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_MakePerlinNoiseVectorAndRemap",
    "description": "This function creates perlin noise from input X, Y, Z, and then range map to RangeOut, and out put to OutX, OutY, OutZ",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMinX",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMaxX",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMinY",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMaxY",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMinZ",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMaxZ",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_MakePerlinNoiseAndRemap",
    "description": "This function creates perlin noise for a single float and then range map to RangeOut",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeOutMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_LookAt",
    "description": "Computes the transform which is \"looking\" at target position with a local axis.",
    "parameters": [
      {
        "name": "CurrentTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LookAtVector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseUpVector",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "UpVector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampConeInDegree",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_EndProfilingTimer",
    "description": "This function ends measuring a profiling bracket and optionally logs the result",
    "parameters": [
      {
        "name": "bLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "LogPrefix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_DistanceBetweenTwoSocketsAndMapRange",
    "description": "Computes the distance between two bones / sockets and can remap the range.",
    "parameters": [
      {
        "name": "Component",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketOrBoneNameA",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketSpaceA",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketOrBoneNameB",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketSpaceB",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRemapRange",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMax",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_DirectionBetweenSockets",
    "description": "Computes the direction between two bones / sockets.",
    "parameters": [
      {
        "name": "Component",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketOrBoneNameFrom",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketOrBoneNameTo",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_CalculateVelocityFromSockets",
    "description": "This function calculates the velocity of an offset position on a bone / socket over time. The bone's / socket's motion can be expressed within a reference frame (another bone / socket). You need to hook up a valid PositionHistory variable to this for storage.",
    "parameters": [
      {
        "name": "DeltaSeconds",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Component",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketOrBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ReferenceSocketOrBone",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketSpace",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetInBoneSpace",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "History",
        "type": "FPositionHistory",
        "optional": false,
        "out": true
      },
      {
        "name": "NumberOfSamples",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityMax",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EasingType",
        "type": "EEasingFuncType",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomCurve",
        "type": "FRuntimeFloatCurve",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "K2_CalculateVelocityFromPositionHistory",
    "description": "This function calculates the velocity of a position changing over time. You need to hook up a valid PositionHistory variable to this for storage.",
    "parameters": [
      {
        "name": "DeltaSeconds",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "History",
        "type": "FPositionHistory",
        "optional": false,
        "out": true
      },
      {
        "name": "NumberOfSamples",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetAnimationLibrary",
    "name": "CalculateDirection",
    "description": "Returns degree of the angle between Velocity and Rotation forward vector The range of return will be from [-180, 180]. Useful for feeding directional blendspaces.",
    "parameters": [
      {
        "name": "Velocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "ULayeredBoneBlendLibrary",
    "name": "SetBlendMask",
    "description": "Exposes operations to be performed on a layered bone blend anim node. Sets the currently-used blend mask for a blended input pose by name.",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "LayeredBoneBlend",
        "type": "FLayeredBoneBlendReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PoseIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendMaskName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLayeredBoneBlendReference"
  },
  {
    "class": "ULayeredBoneBlendLibrary",
    "name": "GetNumPoses",
    "description": "Get the number of poses that a layered bone blend node has (this does not include the base pose)",
    "parameters": [
      {
        "name": "LayeredBoneBlend",
        "type": "FLayeredBoneBlendReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "ULayeredBoneBlendLibrary",
    "name": "ConvertToLayeredBoneBlend",
    "description": "Get a layered bone blend context from an anim node context.",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FLayeredBoneBlendReference"
  },
  {
    "class": "ULayeredBoneBlendLibrary",
    "name": "ConvertToLayeredBlendPerBonePure",
    "description": "Get a layered bone blend context from an anim node context (pure).",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "LayeredBoneBlend",
        "type": "FLayeredBoneBlendReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULinkedAnimGraphLibrary",
    "name": "HasLinkedAnimInstance",
    "description": "Exposes operations to be performed on anim node contexts Returns whether the node hosts an instance (e.g. linked anim graph or layer)",
    "parameters": [
      {
        "name": "Node",
        "type": "FLinkedAnimGraphReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULinkedAnimGraphLibrary",
    "name": "GetLinkedAnimInstance",
    "description": "Get the linked instance is hosted by this node. If the node does not host an instance then HasLinkedAnimInstance will return false",
    "parameters": [
      {
        "name": "Node",
        "type": "FLinkedAnimGraphReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimInstance"
  },
  {
    "class": "ULinkedAnimGraphLibrary",
    "name": "ConvertToLinkedAnimGraphPure",
    "description": "Get a linked anim graph reference from an anim node reference (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "LinkedAnimGraph",
        "type": "FLinkedAnimGraphReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULinkedAnimGraphLibrary",
    "name": "ConvertToLinkedAnimGraph",
    "description": "Get a linked anim graph reference from an anim node reference",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FLinkedAnimGraphReference"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "SetMirrorTransitionBlendTime",
    "description": "Exposes operations that can be run on a Mirror node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\". Set how long to blend using inertialization when switching mirrored state",
    "parameters": [
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InBlendTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMirrorAnimNodeReference"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "SetMirror",
    "description": "Set the mirror state",
    "parameters": [
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "bInMirror",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMirrorAnimNodeReference"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "GetMirrorTransitionBlendTime",
    "description": "Get how long to blend using inertialization when switching mirrored state",
    "parameters": [
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "GetMirrorDataTable",
    "description": "Get MirrorDataTable used to perform mirroring",
    "parameters": [
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMirrorDataTable"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "GetMirror",
    "description": "Get the mirror state",
    "parameters": [
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "ConvertToMirrorNodePure",
    "description": "Get a mirror context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "MirrorNode",
        "type": "FMirrorAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMirrorAnimLibrary",
    "name": "ConvertToMirrorNode",
    "description": "Get a mirror node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FMirrorAnimNodeReference"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "SetCurveMap",
    "description": "Exposes operations that can be run on a Modify Curve Node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\".",
    "parameters": [
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InCurveMap",
        "type": "TMap_string__number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FModifyCurveAnimNodeReference"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "SetApplyMode",
    "description": "",
    "parameters": [
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InMode",
        "type": "EModifyCurveApplyMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FModifyCurveAnimNodeReference"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "SetAlpha",
    "description": "",
    "parameters": [
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InAlpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FModifyCurveAnimNodeReference"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "GetApplyMode",
    "description": "",
    "parameters": [
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EModifyCurveApplyMode"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "GetAlpha",
    "description": "",
    "parameters": [
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "ConvertToModifyCurveNodePure",
    "description": "Get a modify curve context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "ModifyCurveNode",
        "type": "FModifyCurveAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModifyCurveAnimLibrary",
    "name": "ConvertToModifyCurveNode",
    "description": "Get a modify curve node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FModifyCurveAnimNodeReference"
  },
  {
    "class": "UPlayMontageCallbackProxy",
    "name": "CreateProxyObjectForPlayMontage",
    "description": "Called to perform the query internally",
    "parameters": [
      {
        "name": "InSkeletalMeshComponent",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "MontageToPlay",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartingPosition",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartingSection",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bShouldStopAllMontages",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UPlayMontageCallbackProxy"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "SetSequenceWithInertialBlending",
    "description": "Exposes operations to be performed on a sequence evaluator anim node Note: Experimental and subject to change! Set the current sequence of the sequence evaluator with an inertial blend time",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Sequence",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "SetSequence",
    "description": "Set the current sequence of the sequence evaluator",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Sequence",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "SetExplicitTime",
    "description": "Set the current accumulated time of the sequence evaluator",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "SetExplicitFrame",
    "description": "Set the current accumulated time, using a frame number, of the sequence evaluator",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "GetSequence",
    "description": "Gets the current sequence of the sequence evaluator",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimSequenceBase"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "GetAccumulatedTime",
    "description": "Gets the current accumulated time of the sequence evaluator",
    "parameters": [
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "ConvertToSequenceEvaluatorPure",
    "description": "Get a sequence evaluator context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "ConvertToSequenceEvaluator",
    "description": "Get a sequence evaluator context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequenceEvaluatorLibrary",
    "name": "AdvanceTime",
    "description": "Advance the current accumulated time of the sequence evaluator",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceEvaluator",
        "type": "FSequenceEvaluatorReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRate",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSequenceEvaluatorReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "SetStartPosition",
    "description": "Exposes operations to be performed on a sequence player anim node Note: Experimental and subject to change! Set the start position of the sequence player. If this is called from On Become Relevant or On Initial Update then it should be accompanied by a call to SetAccumulatedTime to achieve the desired effect of resetting the play time of a sequence player.",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "StartPosition",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "SetSequenceWithInertialBlending",
    "description": "Set the current sequence of the sequence player with an inertial blend time",
    "parameters": [
      {
        "name": "UpdateContext",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Sequence",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "SetSequence",
    "description": "Set the current sequence of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Sequence",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "SetPlayRate",
    "description": "Set the play rate of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "SetAccumulatedTime",
    "description": "Set the current accumulated time of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetStartPosition",
    "description": "Get the start position of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetSequencePure",
    "description": "Get the current sequence of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimSequenceBase"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetSequence",
    "description": "Get the current sequence of the sequence player - DEPRECATED, please use pure version",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "SequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetPlayRate",
    "description": "Get the play rate of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetLoopAnimation",
    "description": "Get the looping state of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "GetAccumulatedTime",
    "description": "Gets the current accumulated time of the sequence player",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "ConvertToSequencePlayerPure",
    "description": "Get a sequence player context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "ConvertToSequencePlayer",
    "description": "Get a sequence player context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FSequencePlayerReference"
  },
  {
    "class": "USequencePlayerLibrary",
    "name": "ComputePlayRateFromDuration",
    "description": "Returns the Play Rate to provide when playing this animation if a specific animation duration is desired",
    "parameters": [
      {
        "name": "SequencePlayer",
        "type": "FSequencePlayerReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USkeletalControlLibrary",
    "name": "SetAlpha",
    "description": "Exposes operations to be performed on a skeletal control anim node Note: Experimental and subject to change! Set the alpha value of this skeletal control",
    "parameters": [
      {
        "name": "SkeletalControl",
        "type": "FSkeletalControlReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSkeletalControlReference"
  },
  {
    "class": "USkeletalControlLibrary",
    "name": "GetAlpha",
    "description": "Get the alpha value of this skeletal control",
    "parameters": [
      {
        "name": "SkeletalControl",
        "type": "FSkeletalControlReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USkeletalControlLibrary",
    "name": "ConvertToSkeletalControlPure",
    "description": "Get a skeletal control from an anim node (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "SkeletalControl",
        "type": "FSkeletalControlReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USkeletalControlLibrary",
    "name": "ConvertToSkeletalControl",
    "description": "Get a skeletal control from an anim node",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FSkeletalControlReference"
  },
  {
    "class": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy",
    "name": "CreateProxyObjectForConvertToTIFF",
    "description": "Converts a image to an array of TIFF data in a background task",
    "parameters": [
      {
        "name": "SourceImage",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "bWantColor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGpu",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Rotate",
        "type": "ETextureRotationDirection",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy"
  },
  {
    "class": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy",
    "name": "CreateProxyObjectForConvertToPNG",
    "description": "Converts a image to an array of TIFF data in a background task",
    "parameters": [
      {
        "name": "SourceImage",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "bWantColor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGpu",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Rotate",
        "type": "ETextureRotationDirection",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy"
  },
  {
    "class": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy",
    "name": "CreateProxyObjectForConvertToJPEG",
    "description": "Converts a image to an array of JPEG data in a background task",
    "parameters": [
      {
        "name": "SourceImage",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Quality",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bWantColor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGpu",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Rotate",
        "type": "ETextureRotationDirection",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy"
  },
  {
    "class": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy",
    "name": "CreateProxyObjectForConvertToHEIF",
    "description": "Converts a image to an array of HEIF data in a background task",
    "parameters": [
      {
        "name": "SourceImage",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Quality",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bWantColor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGpu",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Rotate",
        "type": "ETextureRotationDirection",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAppleImageUtilsBaseAsyncTaskBlueprintProxy"
  },
  {
    "class": "UARUtilitiesFunctionLibrary",
    "name": "UpdateWorldToMeterScale",
    "description": "Update material texture parameter using pre-defined names: World to meter scale: WorldToMeterScale",
    "parameters": [
      {
        "name": "MaterialInstance",
        "type": "UMaterialInstanceDynamic",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldToMeterScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARUtilitiesFunctionLibrary",
    "name": "UpdateSceneDepthTexture",
    "description": "Update material texture parameter using pre-defined names: Scene depth texture: SceneDepthTexture Depth to meter scale: DepthToMeterScale",
    "parameters": [
      {
        "name": "MaterialInstance",
        "type": "UMaterialInstanceDynamic",
        "optional": false,
        "out": false
      },
      {
        "name": "SceneDepthTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "DepthToMeterScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARUtilitiesFunctionLibrary",
    "name": "UpdateCameraTextureParam",
    "description": "Update material texture parameter using pre-defined names: For regular texture: CameraTexture For external texture: ExternalCameraTexture",
    "parameters": [
      {
        "name": "MaterialInstance",
        "type": "UMaterialInstanceDynamic",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "ToSoftObjectPath",
    "description": "Convert to a SoftObjectPath for loading",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "SortByPredicate",
    "description": "Sorts the assets based on a custom Blueprint delegate.",
    "parameters": [
      {
        "name": "Assets",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": true
      },
      {
        "name": "SortingPredicate",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EAssetRegistrySortOrder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "SortByAssetName",
    "description": "Sorts the assets by their asset name.",
    "parameters": [
      {
        "name": "Assets",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": true
      },
      {
        "name": "SortOrder",
        "type": "EAssetRegistrySortOrder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "SetFilterTagsAndValues",
    "description": "Populates the FARFilters tags and values map with the passed in tags and values",
    "parameters": [
      {
        "name": "InFilter",
        "type": "FARFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "InTagsAndValues",
        "type": "TArray_FTagAndValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FARFilter"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "IsValid",
    "description": "Checks to see if this AssetData refers to an asset or is NULL",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "IsUAsset",
    "description": "Returns true if this is the primary asset in a package, true for maps and assets but false for secondary objects like class redirectors",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "IsRedirector",
    "description": "Returns true if the this asset is a redirector.",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "IsAssetLoaded",
    "description": "Returns true if the asset is loaded",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetTagValue",
    "description": "Gets the value associated with the given tag as a string",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      },
      {
        "name": "InTagName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTagValue",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetFullName",
    "description": "Returns the full name for the asset in the form: Class ObjectPath",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetExportTextName",
    "description": "Returns the name for the asset in the form: Class'ObjectPath'",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetClass",
    "description": "",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetBlueprintAssets",
    "description": "Gets asset data for all blueprint assets that match the filter. ClassPaths in the filter specify the blueprint's parent class.",
    "parameters": [
      {
        "name": "InFilter",
        "type": "FARFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "OutAssetData",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetAssetRegistry",
    "description": "",
    "parameters": [],
    "returnType": "TScriptInterface_UAssetRegistry_"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "GetAsset",
    "description": "Returns the asset UObject if it is loaded or loads the asset if it is unloaded then returns the result",
    "parameters": [
      {
        "name": "InAssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "FindAssetNativeClass",
    "description": "Returns the first native class of the asset type that can be found.  Normally this is just the FAssetData::GetClass(), however if the class is a blueprint generated class it may not be loaded.  In which case GetAncestorClassNames will be used to find the first native super class.  This can be slow if temporary caching mode is not on.",
    "parameters": [
      {
        "name": "AssetData",
        "type": "FAssetData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UAssetRegistryHelpers",
    "name": "CreateAssetData",
    "description": "Creates asset data from a UObject.",
    "parameters": [
      {
        "name": "InAsset",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowBlueprintClass",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FAssetData"
  },
  {
    "class": "UAssetToolsHelpers",
    "name": "GetAssetTools",
    "description": "",
    "parameters": [],
    "returnType": "TScriptInterface_UAssetTools_"
  },
  {
    "class": "UAudioCaptureBlueprintLibrary",
    "name": "GetAvailableAudioInputDevices",
    "description": "Gets information about all audio output devices available in the system",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OnObtainDevicesEvent",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioCaptureBlueprintLibrary",
    "name": "Conv_AudioInputDeviceInfoToString",
    "description": "Returns the device info in a human readable format",
    "parameters": [
      {
        "name": "info",
        "type": "FAudioInputDeviceInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAudioCaptureFunctionLibrary",
    "name": "CreateAudioCapture",
    "description": "",
    "parameters": [],
    "returnType": "UAudioCapture"
  },
  {
    "class": "UAudioComponentGroup",
    "name": "StaticGetOrCreateComponentGroup",
    "description": "* Automatic Handler for voices and parameters across any number of AudioComponents remove any string, event, and bool subscriptions that are bound to this object Stop all instances of this Sound on any internal or external components",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAudioComponentGroup"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "UnregisterAudioBusFromSubmix",
    "description": "Unregisters an audio bus that could have been registered to a submix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "AudioBus",
        "type": "UAudioBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "TrimAudioCache",
    "description": "Trim memory used by the audio cache. Returns the number of megabytes freed.",
    "parameters": [
      {
        "name": "InMegabytesToFree",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "SwapAudioOutputDevice",
    "description": "Hotswaps to the requested audio output device",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NewDeviceId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OnCompletedDeviceSwap",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StopRecordingOutput",
    "description": "Stop recording audio. Path can be absolute, or relative (to the /Saved/BouncedWavFiles folder). By leaving the Submix To Record field blank, you can record the master output of the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportType",
        "type": "EAudioRecordingExportType",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Path",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToRecord",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      },
      {
        "name": "ExistingSoundWaveToOverwrite",
        "type": "USoundWave",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USoundWave"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StopAudioBus",
    "description": "Stops the given audio bus.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AudioBus",
        "type": "UAudioBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StopAnalyzingOutput",
    "description": "Stop spectrum analysis.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToStopAnalyzing",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StartRecordingOutput",
    "description": "Start recording audio. By leaving the Submix To Record field blank, you can record the master output of the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedDuration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToRecord",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StartAudioBus",
    "description": "Starts the given audio bus.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AudioBus",
        "type": "UAudioBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "StartAnalyzingOutput",
    "description": "Start spectrum analysis of the audio output. By leaving the Submix To Analyze blank, you can analyze the master output of the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToAnalyze",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      },
      {
        "name": "FFTSize",
        "type": "EFFTSize",
        "optional": true,
        "out": false
      },
      {
        "name": "InterpolationMethod",
        "type": "EFFTPeakInterpolationMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "WindowType",
        "type": "EFFTWindowType",
        "optional": true,
        "out": false
      },
      {
        "name": "HopSize",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SpectrumType",
        "type": "EAudioSpectrumType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "SetSubmixEffectChainOverride",
    "description": "Sets a submix effect chain override on the given submix. The effect chain will cross fade from the base effect chain or current override to the new override.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPresetChain",
        "type": "TArray_USoundEffectSubmixPreset_",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTimeSec",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "SetBypassSourceEffectChainEntry",
    "description": "Set whether or not to bypass the effect at the source effect chain index.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PresetChain",
        "type": "USoundEffectSourcePresetChain",
        "optional": false,
        "out": false
      },
      {
        "name": "EntryIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bBypassed",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ResumeRecordingOutput",
    "description": "Resume recording audio after pausing. By leaving the Submix To Pause field blank, you can record the master output of the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToPause",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ReplaceSubmixEffect",
    "description": "Replaces the submix effect at the given submix chain index, adds the effect if there is none at that index.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixChainIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ReplaceSoundEffectSubmix",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixChainIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveSubmixEffectPresetAtIndex",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixChainIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveSubmixEffectPreset",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveSubmixEffectAtIndex",
    "description": "Removes the submix effect at the given submix chain index, if there is a submix effect at that index.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixChainIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveSubmixEffect",
    "description": "Removes all instances of a submix effect preset from the given submix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveSourceEffectFromPresetChain",
    "description": "Removes source effect entry from preset chain. Only affects the instance of preset chain.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PresetChain",
        "type": "USoundEffectSourcePresetChain",
        "optional": false,
        "out": false
      },
      {
        "name": "EntryIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RemoveMasterSubmixEffect",
    "description": "Removes a submix effect preset from the master submix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "RegisterAudioBusToSubmix",
    "description": "Registers an audio bus to a submix so the submix output can be routed to the audiobus.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "AudioBus",
        "type": "UAudioBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "PrimeSoundForPlayback",
    "description": "Begin loading a sound into the cache so that it can be played immediately.",
    "parameters": [
      {
        "name": "SoundWave",
        "type": "USoundWave",
        "optional": false,
        "out": false
      },
      {
        "name": "OnLoadCompletion",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "PrimeSoundCueForPlayback",
    "description": "Begin loading any sounds referenced by a sound cue into the cache so that it can be played immediately.",
    "parameters": [
      {
        "name": "SoundCue",
        "type": "USoundCue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "PauseRecordingOutput",
    "description": "Pause recording audio, without finalizing the recording to disk. By leaving the Submix To Record field blank, you can record the master output of the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixToPause",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "MakePresetSpectralAnalysisBandSettings",
    "description": "Make an array of bands which span the frequency range of a given EAudioSpectrumBandPresetType.",
    "parameters": [
      {
        "name": "InBandPresetType",
        "type": "EAudioSpectrumBandPresetType",
        "optional": false,
        "out": false
      },
      {
        "name": "InNumBands",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InAttackTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InReleaseTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FSoundSubmixSpectralAnalysisBandSettings_"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "MakeMusicalSpectralAnalysisBandSettings",
    "description": "Make an array of musically spaced bands with ascending frequency.",
    "parameters": [
      {
        "name": "InNumSemitones",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InStartingMusicalNote",
        "type": "EMusicalNoteName",
        "optional": true,
        "out": false
      },
      {
        "name": "InStartingOctave",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InAttackTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InReleaseTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FSoundSubmixSpectralAnalysisBandSettings_"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "MakeFullSpectrumSpectralAnalysisBandSettings",
    "description": "Make an array of logarithmically spaced bands.",
    "parameters": [
      {
        "name": "InNumBands",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InMinimumFrequency",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InMaximumFrequency",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InAttackTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InReleaseTimeMsec",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FSoundSubmixSpectralAnalysisBandSettings_"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "IsAudioBusActive",
    "description": "Queries if the given audio bus is active (and audio can be mixed to it).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AudioBus",
        "type": "UAudioBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "GetPhaseForFrequencies",
    "description": "Retrieve the phases for the given frequencies.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Frequencies",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Phases",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "SubmixToAnalyze",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "GetNumberOfEntriesInSourceEffectChain",
    "description": "Returns the number of effect chain entries in the given source effect chain.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PresetChain",
        "type": "USoundEffectSourcePresetChain",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "GetMagnitudeForFrequencies",
    "description": "Retrieve the magnitudes for the given frequencies.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Frequencies",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Magnitudes",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "SubmixToAnalyze",
        "type": "USoundSubmix",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "GetCurrentAudioOutputDeviceName",
    "description": "Gets information about the currently used audio output device",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OnObtainCurrentDeviceEvent",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "GetAvailableAudioOutputDevices",
    "description": "Gets information about all audio output devices available in the system",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OnObtainDevicesEvent",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "Conv_AudioOutputDeviceInfoToString",
    "description": "Returns the device info in a human readable format",
    "parameters": [
      {
        "name": "Info",
        "type": "FAudioOutputDeviceInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ClearSubmixEffects",
    "description": "Clears all submix effects on the given submix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ClearSubmixEffectChainOverride",
    "description": "Clears all submix effect overrides on the given submix and returns it to the default effect chain.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTimeSec",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "ClearMasterSubmixEffects",
    "description": "Clears all master submix effects.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "AddSubmixEffect",
    "description": "Adds a submix effect preset to the given submix at the end of its submix effect chain. Returns the number of submix effects.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundSubmix",
        "type": "USoundSubmix",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "AddSourceEffectToPresetChain",
    "description": "Adds source effect entry to preset chain. Only effects the instance of the preset chain",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PresetChain",
        "type": "USoundEffectSourcePresetChain",
        "optional": false,
        "out": false
      },
      {
        "name": "Entry",
        "type": "FSourceEffectChainEntry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioMixerBlueprintLibrary",
    "name": "AddMasterSubmixEffect",
    "description": "Adds a submix effect preset to the master submix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SubmixEffectPreset",
        "type": "USoundEffectSubmixPreset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "UpdateModulator",
    "description": "namespace AudioModulation Commits updates from a UObject definition of a modulator (e.g. Bus, Bus Mix, Generator) to active instance in audio thread (ignored if modulator type has not been activated).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Modulator",
        "type": "USoundModulatorBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "UpdateMixFromObject",
    "description": "Commits updates from a UObject definition of a bus mix to active instance in audio thread (ignored if mix has not been activated). If negative, falls back to last fade time set on stage. If fade time never set on stage, uses attack time set on stage in mix asset.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "UpdateMixByFilter",
    "description": "Sets filtered stages of a given class to a provided target value for active instance of mix. Does not update UObject definition of mix.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      },
      {
        "name": "AddressFilter",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamClassFilter",
        "type": "TSubclassOf_USoundModulationParameter_",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamFilter",
        "type": "USoundModulationParameter",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "UpdateMix",
    "description": "Sets a Control Bus Mix with the provided stage data, if the stages are provided in an active instance proxy of the mix. Does not update UObject definition of the mix. If negative, falls back to last fade time set on stage. If fade time never set on stage, uses attack time set on stage in mix asset.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      },
      {
        "name": "Stages",
        "type": "TArray_FSoundControlBusMixStage_",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "SetGlobalBusMixValue",
    "description": "Sets a Global Control Bus Mix with a single stage associated with the provided Bus to the given float value.  This call should be reserved for buses that are to be always active. It is *NOT* recommended for transient buses, as not calling clear can keep buses active indefinitely. time set on stage. If fade time never set on stage, defaults to 100ms.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Bus",
        "type": "USoundControlBus",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "SaveMixToProfile",
    "description": "Saves control bus mix to a profile, serialized to an ini file.  If mix is loaded, uses current proxy's state. If not, uses default UObject representation.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "LoadMixFromProfile",
    "description": "Loads control bus mix from a profile into UObject mix definition, deserialized from an ini file.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      },
      {
        "name": "bActivate",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ProfileIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FSoundControlBusMixStage_"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "IsControlBusMixActive",
    "description": "Returns whether or not a Control Bus Mix is currently active.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "GetModulatorValue",
    "description": "Gets the (normalized) value of the given modulator.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Modulator",
        "type": "USoundModulatorBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "GetModulatorsFromDestination",
    "description": "Gets the list of modulators currently applied to a Modulation Destination.",
    "parameters": [
      {
        "name": "Destination",
        "type": "FSoundModulationDestinationSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSet_USoundModulatorBase_"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "DeactivateGenerator",
    "description": "SOFT DEPRECATED: Use CreateModulationDestination and store resulting destination instead! Deactivates a modulation generator. Does nothing if an instance of the provided generator is already inactive.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Generator",
        "type": "USoundModulationGenerator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "DeactivateBusMix",
    "description": "Deactivates a modulation bus mix. Does nothing if an instance of the provided bus mix is already inactive.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "DeactivateBus",
    "description": "SOFT DEPRECATED: Use CreateModulationDestination and store resulting destination instead! Deactivates a bus. Does nothing if the provided bus is already inactive.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Bus",
        "type": "USoundControlBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "DeactivateAllBusMixes",
    "description": "Deactivates all currently active Control Bus Mixes. This includes the Global Control Bus Mixes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateModulationParameter",
    "description": "Creates a modulation parameter of a given class.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamClass",
        "type": "TSubclassOf_USoundModulationParameter_",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USoundModulationParameter"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateModulationDestination",
    "description": "Creates a modulation destination, which activates the given modulator (if not already active) and provides a function to retrieve the last value computed of the given modulator on the modulation processing thread.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Modulator",
        "type": "USoundModulatorBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAudioModulationDestination"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateLFOGenerator",
    "description": "Creates a modulation generator based on an LFO with the given parameters.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FSoundModulationLFOParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USoundModulationGeneratorLFO"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateEnvelopeFollowerGenerator",
    "description": "Creates a modulation generator based on an Envelope Follower with the given parameters.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FEnvelopeFollowerGeneratorParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USoundModulationGeneratorEnvelopeFollower"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateBusMixStage",
    "description": "Creates a stage used to mix a control bus.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Bus",
        "type": "USoundControlBus",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "AttackTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ReleaseTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSoundControlBusMixStage"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateBusMixFromValue",
    "description": "Create a mix with stages created for each provided bus that are initialized to the supplied value and timing parameters. * @@param Buses - Buses to assign stages within new mix to * @@param Value - Initial value for all stages created within the new mix. * @@param AttackTime - Fade time to user when mix activates. * @@param ReleaseTime - Fade time to user when mix deactivates.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Buses",
        "type": "TArray_USoundControlBus_",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttackTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ReleaseTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bActivate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USoundControlBusMix"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateBusMix",
    "description": "Creates a modulation bus mix, with a bus stage set to the provided target value. if returned mix is manually deactivated and not referenced or destroyed (i.e. will not deactivate when all references become inactive).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Stages",
        "type": "TArray_FSoundControlBusMixStage_",
        "optional": false,
        "out": false
      },
      {
        "name": "Activate",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USoundControlBusMix"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateBus",
    "description": "Creates a modulation bus with the provided default value. on creation. If true, deactivation will only occur if returned bus is manually deactivated and not referenced or destroyed (i.e. will not deactivate when all references become inactive).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameter",
        "type": "USoundModulationParameter",
        "optional": false,
        "out": false
      },
      {
        "name": "Activate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USoundControlBus"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "CreateADEnvelopeGenerator",
    "description": "Creates a modulation generator based on an Attack/Decay Envelope.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FSoundModulationADEnvelopeParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USoundModulationGeneratorADEnvelope"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "ClearGlobalBusMixValue",
    "description": "Clears global control bus mix if set, using the applied fade time to return to the provided bus's parameter default value. If non-positive, change is immediate.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Bus",
        "type": "USoundControlBus",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "ClearAllGlobalBusMixValues",
    "description": "Clears all global control bus mix values if set, using the applied fade time to return all to their respective bus's parameter default value. If non-positive, change is immediate.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "ActivateGenerator",
    "description": "SOFT DEPRECATED: Use CreateModulationDestination and store resulting Destination instead! Manually activates a modulation generator. If called, deactivation will only occur if generator is manually deactivated and not referenced or destroyed (i.e. will not deactivate when all references become inactive).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Generator",
        "type": "USoundModulationGenerator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "ActivateBusMix",
    "description": "Manually activates a bus modulator mix. If called, deactivation will only occur if mix is manually deactivated and not referenced or destroyed (i.e. will not deactivate when all references become inactive).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Mix",
        "type": "USoundControlBusMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStatics",
    "name": "ActivateBus",
    "description": "SOFT DEPRECATED: Use CreateModulationDestination and store resulting Destination instead! Manually activates a modulation bus. If called, deactivation will only occur if bus is manually deactivated or destroyed (i.e. will not deactivate when all references become inactive).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Bus",
        "type": "USoundControlBus",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAudioModulationStyle",
    "name": "GetPatchColor",
    "description": "",
    "parameters": [],
    "returnType": "FColor"
  },
  {
    "class": "UAudioModulationStyle",
    "name": "GetParameterColor",
    "description": "",
    "parameters": [],
    "returnType": "FColor"
  },
  {
    "class": "UAudioModulationStyle",
    "name": "GetModulationGeneratorColor",
    "description": "",
    "parameters": [],
    "returnType": "FColor"
  },
  {
    "class": "UAudioModulationStyle",
    "name": "GetControlBusMixColor",
    "description": "",
    "parameters": [],
    "returnType": "FColor"
  },
  {
    "class": "UAudioModulationStyle",
    "name": "GetControlBusColor",
    "description": "",
    "parameters": [],
    "returnType": "FColor"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "UnpinComponent",
    "description": "Given a pinned \\c ComponentToUnpin, remove its attachment to the real world.",
    "parameters": [
      {
        "name": "ComponentToUnpin",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "ToggleARCapture",
    "description": "Starts or stops a battery intensive service on device.",
    "parameters": [
      {
        "name": "bOnOff",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "CaptureType",
        "type": "EARCaptureType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "StopARSession",
    "description": "Stop a running Augmented Reality session and clear any state.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "StartARSession",
    "description": "Begin a new Augmented Reality session. Subsequently, use the \\c GetARSessionStatus() function to figure out the status of the session.",
    "parameters": [
      {
        "name": "SessionConfig",
        "type": "UARSessionConfig",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "SetEnabledXRCamera",
    "description": "Enable or disable Mixed Reality Capture camera.",
    "parameters": [
      {
        "name": "bOnOff",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "SetARWorldScale",
    "description": "Helper function that modifies the alignment transform scale so that virtual content in the world space appears to be \"scaled\". Note that ultimately the scaling effect is achieved through modifying the translation of the camera: moving the camera further away from the origin makes objects appear to be smaller, and vice versa.",
    "parameters": [
      {
        "name": "InWorldScale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "SetARWorldOriginLocationAndRotation",
    "description": "For a point P in the AR local space, whose location and rotation are \"OriginLocation\" and \"OriginRotation\" in the world space modify the alignment transform so that the same point P will be transformed to the origin in the world space.",
    "parameters": [
      {
        "name": "OriginLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OriginRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsTransformInWorldSpace",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bMaintainUpDirection",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "SetAlignmentTransform",
    "description": "Set a transform that will be applied to the tracking space. This effectively moves any camera possessed by the Augmented Reality system such that it is pointing at a different spot in Unreal's World Space. This is often done to support AR scenarios that rely on static geometry and/or lighting. Note: any movable components that are pinned will appear to stay in place, while anything not pinned or is not movable (static or stationary) will appear to move. \\see PinComponent \\see PinComponentToTraceResult",
    "parameters": [
      {
        "name": "InAlignmentTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "SaveARPinToLocalStore",
    "description": "Save an ARPin to local store",
    "parameters": [
      {
        "name": "InSaveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InPin",
        "type": "UARPin",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "ResizeXRCamera",
    "description": "Change screen size of Mixed Reality Capture camera.",
    "parameters": [
      {
        "name": "InSize",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "RemovePin",
    "description": "Remove a pin such that it no longer updates the associated component.",
    "parameters": [
      {
        "name": "PinToRemove",
        "type": "UARPin",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "RemoveARPinFromLocalStore",
    "description": "Remove an ARPin from the local store",
    "parameters": [
      {
        "name": "InSaveName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "RemoveAllARPinsFromLocalStore",
    "description": "Remove all ARPins from the local store",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "PinComponentToTraceResult",
    "description": "A convenient version of \\c PinComponent() that can be used in conjunction with a result of a \\c LineTraceTrackedObjects call.",
    "parameters": [
      {
        "name": "ComponentToPin",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      },
      {
        "name": "DebugName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UARPin"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "PinComponentToARPin",
    "description": "Associate a component with an ARPin, so that its transform will be updated by the pin.  Any previously associated component will be detached.",
    "parameters": [
      {
        "name": "ComponentToPin",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Pin",
        "type": "UARPin",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "PinComponent",
    "description": "Pin an Unreal Component to a location in tracking spce (i.e. the real world). a physical location where the component should be pinned. AR system; any correction to the position of this geometry will be applied to the pinned component. pin is being drawn for debugging purposes. location and optionally to the \\c TrackedGeometry.",
    "parameters": [
      {
        "name": "ComponentToPin",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "PinToWorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackedGeometry",
        "type": "UARTrackedGeometry",
        "optional": true,
        "out": false
      },
      {
        "name": "DebugName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UARPin"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "PauseARSession",
    "description": "Pause a running Augmented Reality session without clearing existing state.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "LoadARPinsFromLocalStore",
    "description": "Load all ARPins from local save Note: Multiple loads of a saved pin may result in duplicate pins OR overwritten pins.  It is reccomended to only load once.",
    "parameters": [],
    "returnType": "TMap_string__UARPin_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "LineTraceTrackedObjects3D",
    "description": "Perform a line trace against any real-world geometry as tracked by the AR system.",
    "parameters": [
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTestFeaturePoints",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestGroundPlane",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestPlaneExtents",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestPlaneBoundaryPolygon",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FARTraceResult_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "LineTraceTrackedObjects",
    "description": "Perform a line trace against any real-world geometry as tracked by the AR system.",
    "parameters": [
      {
        "name": "ScreenCoord",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bTestFeaturePoints",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestGroundPlane",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestPlaneExtents",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTestPlaneBoundaryPolygon",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FARTraceResult_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsSessionTypeSupported",
    "description": "Test whether this type of session is supported by the current Augmented Reality platform. e.g. is your device capable of doing positional tracking or orientation only?",
    "parameters": [
      {
        "name": "SessionType",
        "type": "EARSessionType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsSessionTrackingFeatureSupported",
    "description": "",
    "parameters": [
      {
        "name": "SessionType",
        "type": "EARSessionType",
        "optional": false,
        "out": false
      },
      {
        "name": "SessionTrackingFeature",
        "type": "EARSessionTrackingFeature",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsSceneReconstructionSupported",
    "description": "",
    "parameters": [
      {
        "name": "SessionType",
        "type": "EARSessionType",
        "optional": false,
        "out": false
      },
      {
        "name": "SceneReconstructionMethod",
        "type": "EARSceneReconstruction",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsARSupported",
    "description": "Checks if the current device can support AR",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsARPinLocalStoreSupported",
    "description": "Is ARPin Local Store Supported",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "IsARPinLocalStoreReady",
    "description": "Is ARPin Local Store Ready",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetWorldMappingStatus",
    "description": "",
    "parameters": [],
    "returnType": "EARWorldMappingState"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetTrackingQualityReason",
    "description": "",
    "parameters": [],
    "returnType": "EARTrackingQualityReason"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetTrackingQuality",
    "description": "",
    "parameters": [],
    "returnType": "EARTrackingQuality"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetSupportedVideoFormats",
    "description": "",
    "parameters": [
      {
        "name": "SessionType",
        "type": "EARSessionType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FARVideoFormat_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetSessionConfig",
    "description": "",
    "parameters": [],
    "returnType": "UARSessionConfig"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetPointCloud",
    "description": "",
    "parameters": [],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetObjectClassificationAtLocation",
    "description": "Try to determine the classification of the object at a world space location",
    "parameters": [
      {
        "name": "InWorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OutClassification",
        "type": "EARObjectClassification",
        "optional": false,
        "out": true
      },
      {
        "name": "OutClassificationLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "MaxLocationDiff",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetNumberOfTrackedFacesSupported",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetCurrentLightEstimate",
    "description": "An AugmentedReality session can be configured to provide light estimates. The specific approach to light estimation can be configured by the \\c UARSessionConfig specified during \\c StartARSession(). This function assumes that you will cast the returned \\c UARLightEstimate to a derived type corresponding to your session config.",
    "parameters": [],
    "returnType": "UARLightEstimate"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetCameraIntrinsics",
    "description": "",
    "parameters": [
      {
        "name": "OutCameraIntrinsics",
        "type": "FARCameraIntrinsics",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetARWorldScale",
    "description": "",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetARTexture",
    "description": "",
    "parameters": [
      {
        "name": "TextureType",
        "type": "EARTextureType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UARTexture"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetARSessionStatus",
    "description": "It is intended that you check the status of the Augmented Reality session on every frame and take action accordingly. e.g. if the session stopped for an unexpected reason, you might give the user a prompt to re-start the session",
    "parameters": [],
    "returnType": "FARSessionStatus"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetAllTracked2DPoses",
    "description": "",
    "parameters": [],
    "returnType": "TArray_FARPose2D_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetAllPins",
    "description": "Get a list of all the \\c UARPin objects that the Augmented Reality session is currently using to connect virtual objects to real-world, tracked locations.",
    "parameters": [],
    "returnType": "TArray_UARPin_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetAllGeometriesByClass",
    "description": "",
    "parameters": [
      {
        "name": "GeometryClass",
        "type": "TSubclassOf_UARTrackedGeometry_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UARTrackedGeometry_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetAllGeometries",
    "description": "",
    "parameters": [],
    "returnType": "TArray_UARTrackedGeometry_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "GetAlignmentTransform",
    "description": "",
    "parameters": [],
    "returnType": "FTransform"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "FindTrackedPointsByName",
    "description": "",
    "parameters": [
      {
        "name": "PointName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UARTrackedPoint_"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "DebugDrawTrackedGeometry",
    "description": "Given some real-world geometry being tracked by the Augmented Reality system, draw it on the screen for debugging purposes (rudimentary)",
    "parameters": [
      {
        "name": "TrackedGeometry",
        "type": "UARTrackedGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "OutlineThickness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PersistForSeconds",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "DebugDrawPin",
    "description": "Given a \\c UARPin, draw it for debugging purposes.",
    "parameters": [
      {
        "name": "ARPin",
        "type": "UARPin",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PersistForSeconds",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "CalculateClosestIntersection",
    "description": "Alignment helpers",
    "parameters": [
      {
        "name": "StartPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "EndPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "ClosestIntersection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "CalculateAlignmentTransform",
    "description": "Computes a transform that aligns two coordinate systems. Requires the transform of the same known point in each coordinate system.",
    "parameters": [
      {
        "name": "TransformInFirstCoordinateSystem",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TransformInSecondCoordinateSystem",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "AlignmentTransform",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "AddTrackedPointWithName",
    "description": "Manually add a tracked point with name and world transform. Note that this is an async operation - the added point won't be available until a few frames later.",
    "parameters": [
      {
        "name": "WorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PointName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeletePointsWithSameName",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "AddRuntimeCandidateImage",
    "description": "Create an ARCandidateImage object and add it to the ARCandidateImageList of the given \\c UARSessionConfig object. Note that you need to restart the AR session with the \\c UARSessionConfig you are adding to to make the change take effect. On ARCore platform, you can leave the PhysicalWidth to 0 if you don't know the physical size of the image or the physical size is dynamic. And this function takes time to perform non-trivial image processing (20ms - 30ms), and should be run on a background thread. Return nullptr otherwise.",
    "parameters": [
      {
        "name": "SessionConfig",
        "type": "UARSessionConfig",
        "optional": false,
        "out": false
      },
      {
        "name": "CandidateTexture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "FriendlyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysicalWidth",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UARCandidateImage"
  },
  {
    "class": "UARBlueprintLibrary",
    "name": "AddManualEnvironmentCaptureProbe",
    "description": "Adds an environment capture probe to the ar world",
    "parameters": [
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UARDependencyHandler",
    "name": "GetARDependencyHandler",
    "description": "Helper class that allows the user to explicitly request AR service installation and permission granting. Recommended flow for explicit management: 1. Call \"GetARDependencyHandler\" to get a handler, if valid: 2. Call \"CheckARServiceAvailability\" to check availability, if the device is supported: 3. Call \"InstallARService\" to install AR service dependency, if installed: 4. Call \"RequestARSessionPermission\" to request permission, if granted: 5. Call \"UARBlueprintLibrary::StartARSession\" to start the session. Alternatively, you can also call \"StartARSessionLatent\" which handles dependency and permission internally. Latent action to start AR session. Will make sure dependency and permission issues are resolved internally, only returns the AR session starts successfully. Latent action to request permission to run the supplied session configuration. Latent action to install AR service on the current platform. Can return null if the current platform doesn't support AR, or the AR system doesn't require dependency handling.",
    "parameters": [],
    "returnType": "UARDependencyHandler"
  },
  {
    "class": "UARFaceComponent",
    "name": "SetFaceComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EFaceComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARGeoAnchorComponent",
    "name": "SetGeoAnchorComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EGeoAnchorComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARGeoTrackingSupport",
    "name": "GetGeoTrackingSupport",
    "description": "Interface class for Geo tracking related features.",
    "parameters": [],
    "returnType": "UARGeoTrackingSupport"
  },
  {
    "class": "UARGetCandidateObjectAsyncTaskBlueprintProxy",
    "name": "ARGetCandidateObject",
    "description": "Saves the point cloud centered at the specified location capturing all of the features within the specified extent as an object that can be detected later",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UARGetCandidateObjectAsyncTaskBlueprintProxy"
  },
  {
    "class": "UARImageComponent",
    "name": "SetImageComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EImageComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARPlaneComponent",
    "name": "SetPlaneComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EPlaneComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARPlaneComponent",
    "name": "SetObjectClassificationDebugColors",
    "description": "",
    "parameters": [
      {
        "name": "InColors",
        "type": "TMap_EARObjectClassification__FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARPlaneComponent",
    "name": "GetObjectClassificationDebugColors",
    "description": "Event when native representation is updated, called on server and clients. Event when native representation is first added, called on server and clients.",
    "parameters": [],
    "returnType": "TMap_EARObjectClassification__FLinearColor_"
  },
  {
    "class": "UARPoseComponent",
    "name": "SetPoseComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EPoseComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARQRCodeComponent",
    "name": "SetQRCodeComponentDebugMode",
    "description": "",
    "parameters": [
      {
        "name": "NewDebugMode",
        "type": "EQRCodeComponentDebugMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UARSaveWorldAsyncTaskBlueprintProxy",
    "name": "ARSaveWorld",
    "description": "Saves an AR world to a byte array for network replication or saving to disk",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UARSaveWorldAsyncTaskBlueprintProxy"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetTrackedGeometry",
    "description": "",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UARTrackedGeometry"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetTraceChannel",
    "description": "",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EARLineTraceChannels"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetLocalTransform",
    "description": "",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetLocalToWorldTransform",
    "description": "",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetLocalToTrackingTransform",
    "description": "\\see SetAlignmentTransform()",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UARTraceResultLibrary",
    "name": "GetDistanceFromCamera",
    "description": "",
    "parameters": [
      {
        "name": "TraceResult",
        "type": "FARTraceResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy",
    "name": "CheckGeoTrackingAvailabilityAtLocation",
    "description": "Blueprint async task to check Geo tracking availability. Check Geo tracking availability at a specific Geo location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Longitude",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Latitude",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy"
  },
  {
    "class": "UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy",
    "name": "CheckGeoTrackingAvailability",
    "description": "Check Geo tracking availability at the user's current location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy"
  },
  {
    "class": "UGetGeoLocationAsyncTaskBlueprintProxy",
    "name": "GetGeoLocationAtWorldPosition",
    "description": "Blueprint async task to convert Geo location. Convert a position in UE4 world space into a Geo location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGetGeoLocationAsyncTaskBlueprintProxy"
  },
  {
    "class": "UAutomationUtilsBlueprintLibrary",
    "name": "TakeGameplayAutomationScreenshot",
    "description": "",
    "parameters": [
      {
        "name": "ScreenshotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxGlobalError",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxLocalError",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MapNameOverride",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "IsCurrentAssetLooping",
    "description": "Exposes operations that can be run on a Blend Stack node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\".",
    "parameters": [
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "GetCurrentBlendStackAnimAssetTime",
    "description": "Get the current elapsed time of the animation that is playing from a Blend Stack Input node",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "GetCurrentBlendStackAnimAsset",
    "description": "Get the current AnimationAsset that is playing from a Blend Stack Input node",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimationAsset"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "GetCurrentAssetTimeRemaining",
    "description": "",
    "parameters": [
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "GetCurrentAssetTime",
    "description": "",
    "parameters": [
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "GetCurrentAsset",
    "description": "",
    "parameters": [
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimationAsset"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "ForceBlendNextUpdate",
    "description": "",
    "parameters": [
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "ConvertToBlendStackNodePure",
    "description": "Get a blend stack node context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "ConvertToBlendStackNode",
    "description": "Get a blend stack node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBlendStackAnimNodeReference"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "BlendToWithSettings",
    "description": "Note: Experimental and subject to change!",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": true,
        "out": false
      },
      {
        "name": "AnimationTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bMirrored",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendProfile",
        "type": "UBlendProfile",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendOption",
        "type": "EAlphaBlendOption",
        "optional": true,
        "out": false
      },
      {
        "name": "bInertialBlend",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendParameters",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "WantedPlayRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ActivationDelay",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackAnimNodeLibrary",
    "name": "BlendTo",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FAnimUpdateContext",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendStackNode",
        "type": "FBlendStackAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": true,
        "out": false
      },
      {
        "name": "AnimationTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bMirrored",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendParameters",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "WantedPlayRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ActivationDelay",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackInputAnimNodeLibrary",
    "name": "GetProperties",
    "description": "Exposes operations that can be run on a Blend Stack node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\".",
    "parameters": [
      {
        "name": "BlendStackInputNode",
        "type": "FBlendStackInputAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": true
      },
      {
        "name": "AccumulatedTime",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackInputAnimNodeLibrary",
    "name": "ConvertToBlendStackInputNodePure",
    "description": "Get a blend stack input node context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendStackInputNode",
        "type": "FBlendStackInputAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlendStackInputAnimNodeLibrary",
    "name": "ConvertToBlendStackInputNode",
    "description": "Get a blend stack input node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBlendStackInputAnimNodeReference"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "UpgradeOperatorNodes",
    "description": "Replace any old operator nodes (float + float, vector + float, int + vector, etc) with the newer Promotable Operator version of the node. Preserve any connections the original node had to the newer version of the node.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "SetBlueprintVariableInstanceEditable",
    "description": "Sets \"Instance Editable\" to true/false on a Blueprint variable",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInstanceEditable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "SetBlueprintVariableExposeToCinematics",
    "description": "Sets \"Expose To Cinematics\" to true/false on a Blueprint variable",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bExposeToCinematics",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "SetBlueprintVariableExposeOnSpawn",
    "description": "Sets \"Expose On Spawn\" to true/false on a Blueprint variable",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bExposeOnSpawn",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "ReplaceVariableReferences",
    "description": "Replace any references of variables with the OldVarName to references of those with the NewVarName if possible",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "OldVarName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewVarName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "ReparentBlueprint",
    "description": "Attempts to reparent the given blueprint to the new chosen parent class.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "NewParentClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RenameGraph",
    "description": "Attempts to rename the given graph with a new name",
    "parameters": [
      {
        "name": "Graph",
        "type": "UEdGraph",
        "optional": false,
        "out": false
      },
      {
        "name": "NewNameStr",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RemoveUnusedVariables",
    "description": "Deletes any unused blueprint created variables the given blueprint. An Unused variable is any BP variable that is not referenced in any blueprint graphs",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RemoveUnusedNodes",
    "description": "Remove any nodes in this blueprint that have no connections made to them.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RemoveGraph",
    "description": "Removes the given graph from the blueprint if possible",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "Graph",
        "type": "UEdGraph",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RemoveFunctionGraph",
    "description": "Deletes the function of the given name on this blueprint. Does NOT replace function call sites.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "FuncName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RefreshOpenEditorsForBlueprint",
    "description": "Attempt to refresh any open blueprint editors for the given asset",
    "parameters": [
      {
        "name": "BP",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "RefreshAllOpenBlueprintEditors",
    "description": "Refresh any open blueprint editors",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetStructType",
    "description": "",
    "parameters": [
      {
        "name": "StructType",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetSetType",
    "description": "",
    "parameters": [
      {
        "name": "ContainedType",
        "type": "FEdGraphPinType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetObjectReferenceType",
    "description": "",
    "parameters": [
      {
        "name": "ObjectType",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetMapType",
    "description": "",
    "parameters": [
      {
        "name": "KeyType",
        "type": "FEdGraphPinType",
        "optional": false,
        "out": false
      },
      {
        "name": "ValueType",
        "type": "FEdGraphPinType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetClassReferenceType",
    "description": "",
    "parameters": [
      {
        "name": "ClassType",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetBlueprintAsset",
    "description": "Casts the provided Object to a Blueprint - the root asset type of a blueprint asset. Note that the blueprint asset itself is editor only and not present in cooked assets.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlueprint"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetBasicTypeByName",
    "description": "",
    "parameters": [
      {
        "name": "TypeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GetArrayType",
    "description": "",
    "parameters": [
      {
        "name": "ContainedType",
        "type": "FEdGraphPinType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEdGraphPinType"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "GeneratedClass",
    "description": "Gets the class generated when this blueprint is compiled",
    "parameters": [
      {
        "name": "BlueprintObj",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "FindGraph",
    "description": "Finds the graph with the given name on the blueprint. Null if it doesn't have one.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "GraphName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEdGraph"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "FindEventGraph",
    "description": "Finds the event graph of the given blueprint. Null if it doesn't have one. This will only return the primary event graph of the blueprint (the graph named \"EventGraph\").",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEdGraph"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "CreateBlueprintAssetWithParent",
    "description": "Creates a blueprint based on a specific parent, honoring registered custom blueprint types",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlueprint"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "CompileBlueprint",
    "description": "Compiles the given blueprint.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "AddMemberVariableWithValue",
    "description": "Adds a member variable to the specified blueprint inferring the type from a provided value.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "MemberName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "AddMemberVariable",
    "description": "Adds a member variable to the specified blueprint with the specified type.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "MemberName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "VariableType",
        "type": "FEdGraphPinType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintEditorLibrary",
    "name": "AddFunctionGraph",
    "description": "Adds a function to the given blueprint",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "FuncName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UEdGraph"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "UpdateMIC",
    "description": "*      Function library class. *      Each function in it is expected to be static and represents blueprint node that can be called in any blueprint. * *      When declaring function you can define metadata for the node. Key function specifiers will be BlueprintPure and BlueprintCallable. *      BlueprintPure - means the function does not affect the owning object in any way and thus creates a node without Exec pins. *      BlueprintCallable - makes a function which can be executed in Blueprints - Thus it has Exec pins. *      DisplayName - full name of the node, shown when you mouse over the node and in the blueprint drop down menu. *                              Its lets you name the node using characters not allowed in C++ function names. *      CompactNodeTitle - the word(s) that appear on the node. *      Keywords -      the list of keywords that helps you to find node when you search for it using Blueprint drop-down menu. *                              Good example is \"Print String\" node which you can find also by using keyword \"log\". *      Category -      the category your node will be under in the Blueprint drop-down menu. * *      For more info on custom blueprint nodes visit documentation: *      https://docs.unrealengine.com/ProgrammingAndScripting/Blueprints/TechnicalGuide/ExtendingBlueprints",
    "parameters": [
      {
        "name": "MIC",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "Texture2D_SampleUV_EditorOnly",
    "description": "Samples a texel from a Texture 2D with VectorDisplacement Compression",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "UV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICVectorParam_EditorOnly",
    "description": "Sets a Vector Parameter value in a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICTwoSided_EditorOnly",
    "description": "Overrides the Two Sided setting of a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "TwoSided",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICTextureParam_EditorOnly",
    "description": "Sets a Texture Parameter value in a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICShadingModel_EditorOnly",
    "description": "Overrides the Shading Model of a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ShadingModel",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICScalarParam_EditorOnly",
    "description": "Sets a Scalar Parameter value in a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParamName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICIsThinSurface_EditorOnly",
    "description": "Overrides the IsThinSurface setting of a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsThinSurface",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICDitheredLODTransition_EditorOnly",
    "description": "Overrides the Blend Mode of a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "DitheredLODTransition",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "SetMICBlendMode_EditorOnly",
    "description": "Overrides the Blend Mode of a Material Instance Constant Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendMode",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "RenderTarget_SampleUV_EditorOnly",
    "description": "Samples a value from a Texture Render Target 2D. Currently only 4 channel formats are supported. Only works in the editor",
    "parameters": [
      {
        "name": "InRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "UV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "RenderTarget_SampleRectangle_EditorOnly",
    "description": "Samples an array of values from a Texture Render Target 2D. Currently only 4 channel formats are supported. Only works in the editor",
    "parameters": [
      {
        "name": "InRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "InRect",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FLinearColor_"
  },
  {
    "class": "UBlueprintMaterialTextureNodesBPLibrary",
    "name": "CreateMIC_EditorOnly",
    "description": "Creates a new Material Instance Constant asset Only works in the editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UMaterialInstanceConstant"
  },
  {
    "class": "UAsyncCaptureScene",
    "name": "CaptureSceneWithWarmupAsync",
    "description": "",
    "parameters": [
      {
        "name": "ViewCamera",
        "type": "UCameraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SceneCaptureClass",
        "type": "TSubclassOf_ASceneCapture2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ResY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "WarmUpFrames",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncCaptureScene"
  },
  {
    "class": "UAsyncCaptureScene",
    "name": "CaptureSceneAsync",
    "description": "",
    "parameters": [
      {
        "name": "ViewCamera",
        "type": "UCameraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SceneCaptureClass",
        "type": "TSubclassOf_ASceneCapture2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ResY",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncCaptureScene"
  },
  {
    "class": "UAsyncEditorDelay",
    "name": "AsyncEditorDelay",
    "description": "",
    "parameters": [
      {
        "name": "Seconds",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinimumFrames",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncEditorDelay"
  },
  {
    "class": "UAsyncEditorOpenMapAndFocusActor",
    "name": "AsyncEditorOpenMapAndFocusActor",
    "description": "",
    "parameters": [
      {
        "name": "Map",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      },
      {
        "name": "FocusActorName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncEditorOpenMapAndFocusActor"
  },
  {
    "class": "UAsyncEditorWaitForGameWorld",
    "name": "AsyncWaitForGameWorld",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Server",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncEditorWaitForGameWorld"
  },
  {
    "class": "UAsyncImageExport",
    "name": "ExportImageAsync",
    "description": "",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Quality",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncImageExport"
  },
  {
    "class": "UAsyncRegisterAndExecuteTask",
    "name": "RegisterAndExecuteTask",
    "description": "",
    "parameters": [
      {
        "name": "Task",
        "type": "UEditorUtilityTask",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalParentTask",
        "type": "UEditorUtilityTask",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncRegisterAndExecuteTask"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "SyncBrowserToFolders",
    "description": "Expose editor utility functions to Blutilities Sync the Content Browser to the given folder(s)",
    "parameters": [
      {
        "name": "FolderList",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "RenameAsset",
    "description": "Renames an asset (cannot move folders)",
    "parameters": [
      {
        "name": "Asset",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NewName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectionSet",
    "description": "",
    "parameters": [],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectionBounds",
    "description": "",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedPathViewFolderPaths",
    "description": "Returns the folders that are selected in the path view for the content browser",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedFolderPaths",
    "description": "Gets the path to the currently selected folder in the content browser",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedBlueprintClasses",
    "description": "Gets the set of currently selected classes",
    "parameters": [],
    "returnType": "TArray_TSubclassOf_UObject__"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedAssetsOfClass",
    "description": "",
    "parameters": [
      {
        "name": "AssetClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedAssets",
    "description": "Gets the set of currently selected assets",
    "parameters": [],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetSelectedAssetData",
    "description": "Gets the set of currently selected asset data",
    "parameters": [],
    "returnType": "TArray_FAssetData_"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetCurrentContentBrowserPath",
    "description": "Attempts to get the path for the active content browser, returns false if there is no active content browser or if it was a virtual path",
    "parameters": [
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "GetCurrentContentBrowserItemPath",
    "description": "Gets the current content browser path if one is open, whether it is internal or virtual.",
    "parameters": [],
    "returnType": "FContentBrowserItemPath"
  },
  {
    "class": "UEditorUtilityLibrary",
    "name": "ConvertToEditorUtilityWidget",
    "description": "Attempts to find the actor specified by PathToActor in the current editor world",
    "parameters": [
      {
        "name": "WidgetBP",
        "type": "UWidgetBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UChaosSolverEngineBlueprintLibrary",
    "name": "ConvertPhysicsCollisionToHitResult",
    "description": "",
    "parameters": [
      {
        "name": "PhysicsCollision",
        "type": "FChaosPhysicsCollisionInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FHitResult"
  },
  {
    "class": "UChaosVDRuntimeBlueprintLibrary",
    "name": "RecordDebugDrawVector",
    "description": "Library function to record debug draw shapes that will be played back when a CVD recording is loaded",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InStartLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InVector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChaosVDRuntimeBlueprintLibrary",
    "name": "RecordDebugDrawSphere",
    "description": "",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChaosVDRuntimeBlueprintLibrary",
    "name": "RecordDebugDrawLine",
    "description": "",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InStartLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InEndLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChaosVDRuntimeBlueprintLibrary",
    "name": "RecordDebugDrawBox",
    "description": "",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InBox",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "MakeWheelStatus",
    "description": "Set snapshot of vehicle instance dynamic state change handling via blueprint at runtime",
    "parameters": [
      {
        "name": "bInContact",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ContactPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "PhysMaterial",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalizedSuspensionLength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SpringForce",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SlipAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsSlipping",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "SlipMagnitude",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsSkidding",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "SkidMagnitude",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SkidNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "DriveTorque",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "BrakeTorque",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bABSActivated",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FWheelStatus"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "MakeWheelSnapshot",
    "description": "",
    "parameters": [
      {
        "name": "SuspensionOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "WheelRotationAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SteeringAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "WheelRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "WheelAngularVelocity",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FWheelSnapshot"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "MakeWheeledSnapshot",
    "description": "",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "AngularVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedGear",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "EngineRPM",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "WheelSnapshots",
        "type": "TArray_FWheelSnapshot_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FWheeledSnaphotData"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "BreakWheelStatus",
    "description": "Get a wheels current simulation state Grab a snapshot of the vehicle instance dynamic state Get current engine's rotation speed Get current engine's max rotation speed Enable or completely bypass the ApplyWheelFrictionForces call Enable or completely bypass the ApplySuspensionForces call Enable or completely bypass the ProcessMechanicalSimulation call",
    "parameters": [
      {
        "name": "Status",
        "type": "FWheelStatus",
        "optional": false,
        "out": false
      },
      {
        "name": "bInContact",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ContactPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "PhysMaterial",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": true
      },
      {
        "name": "NormalizedSuspensionLength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SpringForce",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SlipAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsSlipping",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "SlipMagnitude",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsSkidding",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "SkidMagnitude",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SkidNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "DriveTorque",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "BrakeTorque",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "bABSActivated",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FWheelStatus"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "BreakWheelSnapshot",
    "description": "",
    "parameters": [
      {
        "name": "Snapshot",
        "type": "FWheelSnapshot",
        "optional": false,
        "out": false
      },
      {
        "name": "SuspensionOffset",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "WheelRotationAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SteeringAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "WheelRadius",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "WheelAngularVelocity",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChaosWheeledVehicleMovementComponent",
    "name": "BreakWheeledSnapshot",
    "description": "",
    "parameters": [
      {
        "name": "Snapshot",
        "type": "FWheeledSnaphotData",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "AngularVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectedGear",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "EngineRPM",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "WheelSnapshots",
        "type": "TArray_FWheelSnapshot_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "MakeEvaluateChooser",
    "description": "Chooser Function Library Create an EvaluateChooser struct",
    "parameters": [
      {
        "name": "Chooser",
        "type": "UChooserTable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInstancedStruct"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "MakeChooserEvaluationContext",
    "description": "",
    "parameters": [],
    "returnType": "FChooserEvaluationContext"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "GetChooserStructOutput",
    "description": "Get a Struct to a ChooserEvaluation context",
    "parameters": [
      {
        "name": "Context",
        "type": "FChooserEvaluationContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "EvaluateObjectChooserBaseMulti",
    "description": "Evaluate a chooser table and return all selected UObjects",
    "parameters": [
      {
        "name": "Context",
        "type": "FChooserEvaluationContext",
        "optional": false,
        "out": true
      },
      {
        "name": "ObjectChooser",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "bResultIsClass",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "EvaluateObjectChooserBase",
    "description": "Evaluate an ObjectChooserBase and return the selected UObject, or null",
    "parameters": [
      {
        "name": "Context",
        "type": "FChooserEvaluationContext",
        "optional": false,
        "out": true
      },
      {
        "name": "ObjectChooser",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "bResultIsClass",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "EvaluateChooserMulti",
    "description": "Evaluate a chooser table and return the list of all selected UObjects",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ChooserTable",
        "type": "UChooserTable",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "EvaluateChooser",
    "description": "Evaluate a chooser table and return the selected UObject, or null",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ChooserTable",
        "type": "UChooserTable",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "AddChooserStructInput",
    "description": "Add a Struct to a ChooserEvaluation context",
    "parameters": [
      {
        "name": "Context",
        "type": "FChooserEvaluationContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UChooserFunctionLibrary",
    "name": "AddChooserObjectInput",
    "description": "Add an Object to a ChooserEvaluation context",
    "parameters": [
      {
        "name": "Context",
        "type": "FChooserEvaluationContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCineCameraComponent",
    "name": "GetLensPresetsCopy",
    "description": "A specialized version of a camera component, geared toward cinematic usage. Set the current lens settings by preset name. Set the current preset settings by preset name. Sets near clipping plane of the cine camera. Set the current lens settings by preset name. Returns the vertical FOV of the camera with current settings.",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UCineCameraComponent",
    "name": "GetFilmbackPresetsCopy",
    "description": "Returns the lens name of the camera with the current settings. Returns the horizonal FOV of the camera with current settings.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UCineCameraSettings",
    "name": "GetCineCameraSettings",
    "description": "Internal Blueprint Setter functions that call SaveConfig after setting the variable to ensure settings persist Functions used for the GetOptions metadata Gets the Lens settings associated with a given preset name Returns true if a preset with the given name was found Gets the Filmback settings associated with a given preset name Returns true if a preset with the given name was found Gets the Crop settings associated with a given preset name Returns true if a preset with the given name was found",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UCityBuilderEditController",
    "name": "EditorViewportHasFocus",
    "description": "Changes how the CityBuilderEdMode functions in terms of user interaction. Tries to trigger this tool to exit. Called when the tool is still available, but no longer top of the stack. Actually causes this tool to exit. Called when the tool becomes active for the first time. Called when the tool becomes active (from a resigned state).",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UCityBuilderEdMode",
    "name": "GetCityBuilderEdMode",
    "description": "The root of the Edit Mode for the CityEditorToolkit. This is mostly a place to expose functionality to a Blueprint (see UCityBuilderEdModeSettings::EditModeClass) that actually is the real Edit Mode. Unregisters a CityKit. Triggers `OnCityKitListChanged()`. Removes all registered CityKits Registers a new actively used CityKit. Triggers `OnCityKitListChanged()`.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "RefreshAndRecompileBlueprint",
    "description": "Equivalent to \"File > Refresh All nodes\" followed by \"Compile\"",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "OpenLevelByDataAsset",
    "description": "",
    "parameters": [
      {
        "name": "LevelReferenceAsset",
        "type": "TSoftObjectPtr_UUntrackedLevelReferenceAsset_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "OpenLevelByAssetReference",
    "description": "",
    "parameters": [
      {
        "name": "LevelReference",
        "type": "TSoftObjectPtr_UWorld_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "OpenExternalUrlLinkInWebBrowser",
    "description": "",
    "parameters": [
      {
        "name": "Url",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "MouseIsHoveringOverViewport",
    "description": "",
    "parameters": [
      {
        "name": "bGame",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bLevelEditor",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bPreview",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "GetPlatformUserUniqueId",
    "description": "",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "GetMousePositionInLevelEditorViewport",
    "description": "",
    "parameters": [
      {
        "name": "OutViewportPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "GatherCityBuildAssetsToDeduplicate",
    "description": "Compares the literal asset names between two folders and emits the list of asset pairs that can be consolidated. SEE: DeduplicateCityBuildAssets()",
    "parameters": [
      {
        "name": "CleanupParams",
        "type": "FCityKitCleanupParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutInfo",
        "type": "FCityKitCleanupInfo",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "DeduplicateCityBuildAssets",
    "description": "Takes the result from `GatherCityBuildAssetsToDeduplicate()` and actually performs asset consolidation.",
    "parameters": [
      {
        "name": "CleanupParams",
        "type": "FCityKitCleanupParams",
        "optional": false,
        "out": false
      },
      {
        "name": "InInfo",
        "type": "FCityKitCleanupInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FCityKitCleanupResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "CopyTextToClipboard",
    "description": "",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "CheckLicenseStatus",
    "description": "Whether or not the current user is licensed to use the CityBLD Editor tools. NOTE: This returns \"ECityBldLicenseState::Licensed\" in Source distributions because it would be trivial to remove these checks from their tools.",
    "parameters": [],
    "returnType": "ECityBldLicenseState"
  },
  {
    "class": "UCityKitEditorUtils",
    "name": "BulkFindReferencersAcrossFolder",
    "description": "Finds the list of references crossing the barrier of a particular folder.",
    "parameters": [
      {
        "name": "Params",
        "type": "FBulkReferencersParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FBulkReferencersResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitPluginUtils",
    "name": "GetCityKitPluginVersionString",
    "description": "Returns the version string of the plugin by reference.",
    "parameters": [
      {
        "name": "PluginRef",
        "type": "FCityKitPluginReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UCityKitPluginUtils",
    "name": "GetCityBldVersionString",
    "description": "",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UCityKitPluginUtils",
    "name": "GetAllCityKitPlugins",
    "description": "Returns all of the CityKit plugins currently loaded by the project.",
    "parameters": [],
    "returnType": "TArray_FCityKitPluginReference_"
  },
  {
    "class": "UCityKitPluginUtils",
    "name": "FindCityKitPluginForBundle",
    "description": "",
    "parameters": [
      {
        "name": "Bundle",
        "type": "UCityKitBundle",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPluginRef",
        "type": "FCityKitPluginReference",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitPluginUtils",
    "name": "EnsureCityKitPluginLoaded",
    "description": "",
    "parameters": [
      {
        "name": "PluginRef",
        "type": "FCityKitPluginReference",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "UpdateRoadActors",
    "description": "Triggers updates for each road actor (ARoad, ARoadIntersection) in the array.",
    "parameters": [
      {
        "name": "InActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "SplitRoad",
    "description": "Splits `Road` at `InputKey` of its ControlSpline. Spawns a new road using `SpawnParams`.",
    "parameters": [
      {
        "name": "Road",
        "type": "ARoad",
        "optional": false,
        "out": false
      },
      {
        "name": "InputKey",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ARoad"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "SpawnRoad",
    "description": "Spawns a new road using `SpawnParams`.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ARoad"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "SpawnIntersectionAtRoadEnd",
    "description": "Spawns an intersection using params `IntersectionSpawnParams` at either the end (bAtEnd = true) or beginning (= false) of the Road's ControlSpline.",
    "parameters": [
      {
        "name": "Road",
        "type": "ARoad",
        "optional": false,
        "out": false
      },
      {
        "name": "bAtEnd",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditionalRoads",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "IntersectionSpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutNewIntersection",
        "type": "ARoadIntersection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "SpawnIntersection",
    "description": "Spawns a new intersection using `SpawnParams`.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ARoadIntersection"
  },
  {
    "class": "URoadEditorFunctionLibrary",
    "name": "InsertIntersectionAtInputKeyInRoad",
    "description": "Splits `Road` at `InputKey` of its ControlSpline. Spawns a new road using `RoadSpawnParams` and a new intersection using `IntersectionSpawnParams`.",
    "parameters": [
      {
        "name": "Road",
        "type": "ARoad",
        "optional": false,
        "out": false
      },
      {
        "name": "InputKey",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RoadSpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      },
      {
        "name": "IntersectionSpawnParams",
        "type": "FSpawnRoadElementParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutNewRoad",
        "type": "ARoad",
        "optional": false,
        "out": true
      },
      {
        "name": "OutNewIntersection",
        "type": "ARoadIntersection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadEditorStreetMapUtils",
    "name": "CombineRoadsAllJoints",
    "description": "",
    "parameters": [
      {
        "name": "Settings",
        "type": "FCombineRoadsAtJointSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InRoadStrips",
        "type": "FStreetMapRoadStripResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlockGenFunctionLibrary",
    "name": "TryGenerateBlockShapesAlongRoadLoop",
    "description": "The library of functions used to generate Blocks and Lots within Blocks. Tries to take a road loop and create a new BlockShape from it.",
    "parameters": [
      {
        "name": "Params",
        "type": "FBlockShapeFormationParams",
        "optional": false,
        "out": false
      },
      {
        "name": "RoadNetwork",
        "type": "URoadNetworkSubsystem",
        "optional": false,
        "out": false
      },
      {
        "name": "RoadLoop",
        "type": "FClosedRoadLoop",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FBlockGenResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlockGenFunctionLibrary",
    "name": "RegenerateBlockShapeMesh",
    "description": "Given a BlockShape actor (implements IBlockShapeInterface) regenerate its dynamic mesh.",
    "parameters": [
      {
        "name": "BlockShapeActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FBlockShapeMeshGenerationParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FBlockGenResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlockGenFunctionLibrary",
    "name": "GenerateBlockShapeFromEdges",
    "description": "Takes a series of edges and converts them into a new BlockShape from it.",
    "parameters": [
      {
        "name": "Params",
        "type": "FBlockShapeFormationParams",
        "optional": false,
        "out": false
      },
      {
        "name": "RoadNetwork",
        "type": "URoadNetworkSubsystem",
        "optional": false,
        "out": false
      },
      {
        "name": "Edges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FBlockGenResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "TryRemoveComponentsByTemplateFromBlueprint",
    "description": "Tries to remove the ComponentTemplate from the SimpleConstructScript of Blueprint.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentTemplates",
        "type": "TArray_UActorComponent_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "RecompileBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "IsClassDefaultObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "GetTemplateComponentsFromBlueprint",
    "description": "Returns the list of template components that exists on the Blueprint.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "ClassFilter",
        "type": "TSubclassOf_UActorComponent_",
        "optional": true,
        "out": false
      },
      {
        "name": "bIncludeInherited",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UActorComponent_"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "GetBlueprintFromObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlueprint"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "GetBlueprintFromClass",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlueprint"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "GetBlueprintDisplayName",
    "description": "",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "AddTemplateComponentToBlueprint",
    "description": "Adds a new component templace with class ComponentClass, returning the template as OutComponent.",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClass",
        "type": "TSubclassOf_UActorComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutComponent",
        "type": "UActorComponent",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintEditingUtils",
    "name": "AddCopiesOfComponentsAsTemplatesForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "Components",
        "type": "TArray_UActorComponent_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityBuilderRuntimeSettings",
    "name": "ShowDebugMessages",
    "description": "These settings are loaded directly from the Plugin's INI file.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UCityBuilderRuntimeSettings",
    "name": "Get",
    "description": "",
    "parameters": [],
    "returnType": "UCityBuilderRuntimeSettings"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "UserRequestedCancelSlowTask",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "UpdateSlowTask",
    "description": "",
    "parameters": [
      {
        "name": "WorkCompleted",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "GetActiveCityKitElementSubsystem",
    "description": "",
    "parameters": [],
    "returnType": "UCityKitElementSubsystem"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "Get",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCityKitElementSubsystem"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "ContinueTimingBlock",
    "description": "",
    "parameters": [
      {
        "name": "NewContext",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "BeginTimingBlock",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementSubsystem",
    "name": "BeginSlowTask",
    "description": "",
    "parameters": [
      {
        "name": "TaskTitle",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UnitsOfWork",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "UserIsDraggingGizmoInViewport",
    "description": "[Editor Only!]",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "TryGetExpandedCityKitElementChildren",
    "description": "Returns an array containing Element and all of its children (assuming it is a CityKitElement).",
    "parameters": [
      {
        "name": "Element",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "TryGetCityKitElementProperties",
    "description": "",
    "parameters": [
      {
        "name": "Element",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FCityKitElementProperties"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "TryForceRunConstructionScipts",
    "description": "Runs construction scripts for the provided actors if we are in the Editor.",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "SpawnActorFromClassInMainWorld",
    "description": "Spawns the actor giving it editor-only traits as appropriate.",
    "parameters": [
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bTransient",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTemporaryEditorActor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bHideFromSceneOutliner",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bIncludeInTransactionBuffer",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "SaveConfigObject",
    "description": "Saves the object as the config. This must be the CDO for the class or it will do nothing.",
    "parameters": [
      {
        "name": "ConfigObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bClearDirtyFlag",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "SafeDeleteActor",
    "description": "Tries to delete Actor (that is the closest thing to hitting the \"delete\" key depending on your context). This should fix issues where the undo/redo buffer doesn't seem to work correctly.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "RunConstructionScipts",
    "description": "Runs construction scripts for the provided actors if we are in the Editor. (Alias for TryForceRunConstructionScripts())",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "RunConstructionScipt",
    "description": "Runs construction script for the provided actor if we are in the Editor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "ResolveEdgeReference",
    "description": "",
    "parameters": [
      {
        "name": "Reference",
        "type": "FCityKitElementEdgeRef",
        "optional": false,
        "out": false
      },
      {
        "name": "bValid",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "MarkObjectPackageDirty",
    "description": "Exposes access to \"UObject::MarkPackageDirty()\"",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "MakeEdgeReference",
    "description": "",
    "parameters": [
      {
        "name": "InEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FCityKitElementEdgeRef"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "IsElementPointValid",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FCityKitElementPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "GetMutableClassConfig",
    "description": "Retrieves the mutable config of the provided class.",
    "parameters": [
      {
        "name": "ConfigClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "GetElementPointWorldTransform",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FCityKitElementPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTransform",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "GetElementPointWorldBasis",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FCityKitElementPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultTangent",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutForward",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutRight",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTangent",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "GetBlueprintMaximumLoopIterationCount",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "FindMatchingPoint",
    "description": "",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FCityKitElementPoint_",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Id",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoint",
        "type": "FCityKitElementPoint",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "FindMatchingEdgeReference",
    "description": "",
    "parameters": [
      {
        "name": "References",
        "type": "TArray_FCityKitElementEdgeRef_",
        "optional": false,
        "out": false
      },
      {
        "name": "Reference",
        "type": "FCityKitElementEdgeRef",
        "optional": false,
        "out": false
      },
      {
        "name": "OutIndex",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "FindMatchingEdgeFromReference",
    "description": "",
    "parameters": [
      {
        "name": "Edges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": false
      },
      {
        "name": "Reference",
        "type": "FCityKitElementEdgeRef",
        "optional": false,
        "out": false
      },
      {
        "name": "OutEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "FindMatchingEdge",
    "description": "",
    "parameters": [
      {
        "name": "Edges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Id",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "FindCityKitElementImplementor",
    "description": "",
    "parameters": [
      {
        "name": "Source",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CreateElementPointTransformFromSplinePoint",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SplinePoint",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordinateSpace",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "TangentMagnitude",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_UpdateRebuild_Helper",
    "description": "Calls \"UpdateRebuild()\" followed by trying to re-run the construction script of this actor and its children.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bRerunConstructionScript",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_GetSubChildrenHelper",
    "description": "Call within CityKitElement_Children() to expand your known child array out fully.",
    "parameters": [
      {
        "name": "ChildrenToExpand",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_GetPoints",
    "description": "Grabs the Edges for this element, if any. If Filter is non-empty, then all points must contain all of the tags in Filter.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Filter",
        "type": "FElementFilterSpec",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoints",
        "type": "TArray_FCityKitElementPoint_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_GetEdges",
    "description": "Grabs the Edges for this element, if any. If Filter is non-empty, then all edges must contain all of the tags in Filter.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Filter",
        "type": "FElementFilterSpec",
        "optional": false,
        "out": false
      },
      {
        "name": "OutEdges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_GatherPlacedSnapPoints",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoints",
        "type": "TArray_FCityKitElementPoint_",
        "optional": false,
        "out": true
      },
      {
        "name": "bEmptyFirst",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_DemolishChildren",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "CityKitElement_DemolishAndDestroy",
    "description": "Tries to call Demolish() and then SafeDeleteActor()",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "AutoExpandEdgeLoop",
    "description": "",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FAutoExpandEdgeLoopParams",
        "optional": false,
        "out": false
      },
      {
        "name": "InEdges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFoundEdges",
        "type": "TArray_FCityKitElementEdge_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "AssignElementEdgeToSpline",
    "description": "",
    "parameters": [
      {
        "name": "Edge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": false
      },
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "AssignActorsToCityFolderPath",
    "description": "",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityKitElementUtils",
    "name": "AddPointToElementEdge",
    "description": "",
    "parameters": [
      {
        "name": "InEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bLinear",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityMiscUtils",
    "name": "ModifyObjectFlags",
    "description": "Modifies the object's flags. Do this carefully! Use the \"Make Bitmask\" node with EObjectFlagsBP set as the enum",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FlagsToSet",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "FlagsToClear",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityMiscUtils",
    "name": "LoadStaticMeshAsset",
    "description": "Loads the requested asset (synchronously blocking) and returns the value in OutObject.",
    "parameters": [
      {
        "name": "Asset",
        "type": "TSoftObjectPtr_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityMiscUtils",
    "name": "DestroyObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityMiscUtils",
    "name": "ConvertToInternalObjectFlags",
    "description": "",
    "parameters": [
      {
        "name": "Flags",
        "type": "EObjectFlagsBP",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UCityMiscUtils",
    "name": "CheckUnrealEngineVersion",
    "description": "",
    "parameters": [
      {
        "name": "Operator",
        "type": "EEngineVersionCompare",
        "optional": false,
        "out": false
      },
      {
        "name": "CheckVersion",
        "type": "FUnrealEngineVersion",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "UpdateLotBorderProperties",
    "description": "The library of functions used to generate Blocks and Lots within Blocks.",
    "parameters": [
      {
        "name": "InFillResult",
        "type": "FFillLotResult",
        "optional": false,
        "out": false
      },
      {
        "name": "CleanupResult",
        "type": "FCleanupSplineResult",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFillResult",
        "type": "FFillLotResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "TriangulateEdgeLoop",
    "description": "Emits a Delaunay triangulation of the input EdgeLoop. This only works on the top-down projection of the points (Z is ignored). So this won't work for vertical walls or general 3D shapes.",
    "parameters": [
      {
        "name": "EdgeLoop",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FEdgeLoopTriangulationResult",
        "optional": false,
        "out": true
      },
      {
        "name": "StartIdx",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Length",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "SpitShineMySpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FSpitShineMySplineParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "SegmentIntersection2D",
    "description": "",
    "parameters": [
      {
        "name": "SegmentStartA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEndA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentStartB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEndB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OutIntersectionPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "SanitizeSplineComponent",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bUpdate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "SampleSplineToTransforms",
    "description": "Samples the spline dynamically given the sample parameters.",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SweepPathSampleParams",
        "type": "FSplineSamplingParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "RebuildSpline",
    "description": "Recreates the spline in place, clearing out any potential dead data.",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "GetLocalBoundsOfComponent",
    "description": "",
    "parameters": [
      {
        "name": "Component",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOrigin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutSphereRadius",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bCached",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "GetKeyValuePairsFromCurve",
    "description": "",
    "parameters": [
      {
        "name": "Curve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPairs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "GenerateInnerRectanglesBetweenSplines",
    "description": "Between two splines (InnerSpline and OuterSpline, which have been offset by CopyAndOffsetSpline()), find rectangles between them given the parameters we have.",
    "parameters": [
      {
        "name": "InnerSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OuterSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FInnerRectangleGenParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FInnerRectangleGenOutput",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "FixupLinearSplineEndTangent",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "FindIntersectionsBetweenSplines",
    "description": "",
    "parameters": [
      {
        "name": "SplineA",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SplineB",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FSplineIntersectionTestParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOutput",
        "type": "FSplineIntersectionTestOutput",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "FillLotFromClosedSpline",
    "description": "Creates a single lot from a closed loop spline.",
    "parameters": [
      {
        "name": "LotSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FFillLotParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FFillLotResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "FillLotBorderSpline",
    "description": "Using a lot description (generated from GenerateInnerRectanglesBetweenSplines()), generate the lot boundary spline given InnerSpline, OuterSpline, and the distances along each.",
    "parameters": [
      {
        "name": "LotSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InnerSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OuterSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FFillLotParams",
        "optional": false,
        "out": false
      },
      {
        "name": "PlotDescription",
        "type": "FInnerRectangleDescription",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FFillLotResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "ExtractCurveSamples",
    "description": "",
    "parameters": [
      {
        "name": "Curve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FExtractCurveParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPairs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "CopyOverHismProperties",
    "description": "",
    "parameters": [
      {
        "name": "Source",
        "type": "UHierarchicalInstancedStaticMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Dest",
        "type": "UHierarchicalInstancedStaticMeshComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "CopyAndOffsetSpline",
    "description": "Stores a copy-offset of `SourceSpline` into `DestSpline` using `Params`.",
    "parameters": [
      {
        "name": "SourceSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FSplineCopyOffsetParams",
        "optional": false,
        "out": false
      },
      {
        "name": "DestSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FSplineCopyOffsetOutput",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "ConvertStaticMeshesToInstances",
    "description": "",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshes",
        "type": "TArray_UStaticMeshComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "bDestroyStaticMeshes",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHISMs",
        "type": "TArray_UHierarchicalInstancedStaticMeshComponent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "ComputeSplineWrappedDistance",
    "description": "Returns the wrapped distance around Spline. If the spline is a closed loop, the value is wrapped from the end to the start and vice-versa. If the spline is not a closed loop, then the value is simply clamped to [0, Spline Len].",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "CleanupSpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "FCleanupSplineParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FCleanupSplineResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "ApproximateSurfaceAreaOfClosedSpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCitySplineAlgorithms",
    "name": "AppendSweepPolylineToDynamicMeshV2",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FAppendSweepPolylineParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "OutSweptPath",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutMinEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      },
      {
        "name": "OutMaxEdge",
        "type": "FCityKitElementEdge",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "IsPointInsidePolygonI",
    "description": "",
    "parameters": [
      {
        "name": "TestPoint",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonPoints",
        "type": "TArray_FVector2DI_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "GetSplineBoundingBoxI",
    "description": "",
    "parameters": [
      {
        "name": "SplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "World",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "FVector2DI",
        "optional": false,
        "out": true
      },
      {
        "name": "Max",
        "type": "FVector2DI",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "GetPointsInsidePolygonI",
    "description": "",
    "parameters": [
      {
        "name": "X",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonPoints",
        "type": "TArray_FVector2DI_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2DI_"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "FindSplineCenterPoint",
    "description": "",
    "parameters": [
      {
        "name": "SplinePoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "FindIntersectionPointFromVector",
    "description": "",
    "parameters": [
      {
        "name": "PointA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DirectionA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PointB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DirectionB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Intersection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "ComputeCentralLine",
    "description": "",
    "parameters": [
      {
        "name": "PolygonPoints",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UInteriorSystemUtils_FL",
    "name": "AreLinesIntersecting",
    "description": "",
    "parameters": [
      {
        "name": "LineStart1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineStart2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMassTrafficStyle",
    "name": "ForceTriggerZoneGraphRebuild",
    "description": "Editor only: trigger a zone graph rebuild.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "PDI_SetHitProxy",
    "description": "",
    "parameters": [
      {
        "name": "Renderer",
        "type": "FPrimitiveDrawWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FElementHitProxyContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "PDI_DrawText",
    "description": "",
    "parameters": [
      {
        "name": "Renderer",
        "type": "FPrimitiveDrawWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawParams",
        "type": "FPrimitiveDrawParams",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "PDI_DrawPoint",
    "description": "",
    "parameters": [
      {
        "name": "Renderer",
        "type": "FPrimitiveDrawWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawParams",
        "type": "FPrimitiveDrawParams",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "PDI_DrawLine",
    "description": "",
    "parameters": [
      {
        "name": "Renderer",
        "type": "FPrimitiveDrawWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawParams",
        "type": "FPrimitiveDrawParams",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "PDI_ClearHitProxy",
    "description": "",
    "parameters": [
      {
        "name": "Renderer",
        "type": "FPrimitiveDrawWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPrimitiveDrawWrapperUtils",
    "name": "DebugRenderTextToActiveViewportCanvas",
    "description": "",
    "parameters": [
      {
        "name": "DrawParams",
        "type": "FPrimitiveDrawParams",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadNetworkSubsystem",
    "name": "GetLevelEditorRoadNetwork",
    "description": "Force-rebuilds the entire network representation.",
    "parameters": [],
    "returnType": "URoadNodeActorProcessor"
  },
  {
    "class": "URoadNetworkSubsystem",
    "name": "Get",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "URoadNetworkSubsystem"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "SetSplinePoint",
    "description": "class USplineComponent;",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FSplinePoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordSpace",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "UpdateSpline",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "SaveUStructAsJson",
    "description": "",
    "parameters": [
      {
        "name": "Struct",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "SampleSplineToTransforms",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeBegin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeEnd",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "FrameTimes",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "SamplingOptions",
        "type": "FGeometryScriptSplineSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeScale",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "ResetLandscapeHeightData",
    "description": "",
    "parameters": [
      {
        "name": "LandscapeProxy",
        "type": "ALandscapeProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "EditLayerName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "RequestLandscapeUpdate",
    "description": "",
    "parameters": [
      {
        "name": "LandscapeProxy",
        "type": "ALandscapeProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "bInUserTriggered",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "InvertSpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "InsertSplinePoint",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SplinePointType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UpdateSpline",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "GetSplinePoints",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Points",
        "type": "TArray_FSplinePoint_",
        "optional": false,
        "out": true
      },
      {
        "name": "Begin",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordSpace",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "GetSplinePoint",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordSpace",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSplinePoint"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "GetLandscapeEditLayersNames",
    "description": "",
    "parameters": [
      {
        "name": "LandscapeProxy",
        "type": "ALandscapeProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Names",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "GetAverageLocation",
    "description": "",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "FindInputKeyClosestToWorldLocationInRange",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Begin",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "FindClosestSplinePointAmongActors",
    "description": "",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": true
      },
      {
        "name": "Ik",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "CutSpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InputKey",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bDirection",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "NewPointType",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "ConvertSplineToPolyLineWithDistances",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordinateSpace",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxSquareDistanceFromSpline",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutDistances",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "IkBegin",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "IkEnd",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "ConvertSplineSegmentToPolyLineWithDistances",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SplinePointStartIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordinateSpace",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxSquareDistanceFromSpline",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutDistances",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URoadUtilityLibrary",
    "name": "AppendSpline",
    "description": "",
    "parameters": [
      {
        "name": "Spline1",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Spline2",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnd",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUpdateSpline",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapUtils",
    "name": "SpliceGeneratedRoadsIntoJointDescriptions",
    "description": "",
    "parameters": [
      {
        "name": "InResult",
        "type": "FStreetMapRoadStripResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapUtils",
    "name": "SetSplinePointsFromFootprint",
    "description": "",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Footprint",
        "type": "FBuildingFootprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapUtils",
    "name": "OsmRoadFromRoadStrip",
    "description": "",
    "parameters": [
      {
        "name": "RoadStrip",
        "type": "FStreetMapRoadStrip",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRoad",
        "type": "FStreetMapRoad",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapUtils",
    "name": "GenerateRoadStripsFromOSM",
    "description": "",
    "parameters": [
      {
        "name": "PlacedStreetMap",
        "type": "AStreetMapActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Settings",
        "type": "FStreetMapRoadStripSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FStreetMapRoadStripResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapUtils",
    "name": "GenerateBuildingFootprintsFromOSM",
    "description": "",
    "parameters": [
      {
        "name": "PlacedStreetMap",
        "type": "AStreetMapActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Settings",
        "type": "FStreetMapBuildingFootprintSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "FStreetMapBuildingFootprintResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVector2DI_FL",
    "name": "SubtractVector2DI",
    "description": "Subtraction",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2DI"
  },
  {
    "class": "UVector2DI_FL",
    "name": "MultiplyVector2DIElementWise",
    "description": "",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2DI"
  },
  {
    "class": "UVector2DI_FL",
    "name": "MultiplyVector2DI",
    "description": "Multiplication by scalar",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "Scalar",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2DI"
  },
  {
    "class": "UVector2DI_FL",
    "name": "DivideVector2DI",
    "description": "Division by scalar",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "Scalar",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2DI"
  },
  {
    "class": "UVector2DI_FL",
    "name": "Conv_Vector2DIToString",
    "description": "",
    "parameters": [
      {
        "name": "Vector",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UVector2DI_FL",
    "name": "AddVector2DI",
    "description": "Addition",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2DI",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2DI"
  },
  {
    "class": "UCityUtilsEditorContext_BP",
    "name": "ShowQuickNotification",
    "description": "Show a quick notification message",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Icon",
        "type": "FS_CityUtilsNotificationIcon",
        "optional": false,
        "out": false
      },
      {
        "name": "State",
        "type": "EBPNotificationCompletionState",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Buttons",
        "type": "FS_CityUtilsNotificationButtons",
        "optional": false,
        "out": false
      },
      {
        "name": "InGraphObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCityUtilsEditorContext_BP",
    "name": "GetNotificationContext",
    "description": "Return a NotificationContext object so you can pop up a notification in the right bottom corner.",
    "parameters": [
      {
        "name": "Info",
        "type": "FS_CityUtilsNotificationInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowNotification",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InGraphObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCityUtilsEditorContext_Notification"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "SortVector2DArray",
    "description": "",
    "parameters": [
      {
        "name": "Vector2DArray",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "SortByY",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "IsLower",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "SortCounterClockwise2D",
    "description": "",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "ReferencePoint",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "OffsetSplinePoints",
    "description": "",
    "parameters": [
      {
        "name": "SourceSplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetSplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOffsetInward",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "MoveSplinePointsInward",
    "description": "",
    "parameters": [
      {
        "name": "SplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "MovePointTowardPoint",
    "description": "",
    "parameters": [
      {
        "name": "PointToMove",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MoveTowards",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "IsPointOnOtherSideOfLineBasedDirection",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PointToCheck",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "IsOnLineOk",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "IsPointOnOtherSideOfLine2D",
    "description": "",
    "parameters": [
      {
        "name": "Start",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "IsPointOnOtherSideOfLine",
    "description": "",
    "parameters": [
      {
        "name": "StartPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PointToCheck",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "IsOnLineOk",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "IsPointOnLine2D",
    "description": "",
    "parameters": [
      {
        "name": "x",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "y",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "z",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "IsPointDirectedTo",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PointToCheck",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "InsetSpline",
    "description": "",
    "parameters": [
      {
        "name": "SourceSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetSpline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InsetDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "GetSplinePointLocations",
    "description": "",
    "parameters": [
      {
        "name": "SplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CoordinateSpace",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "GenerateSplineTangents",
    "description": "",
    "parameters": [
      {
        "name": "SplineComponent",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "FindSplineCenterPoint",
    "description": "",
    "parameters": [
      {
        "name": "SplinePoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "FindIntersectionPointFromVector",
    "description": "",
    "parameters": [
      {
        "name": "PointA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DirectionA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PointB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DirectionB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Intersection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "CompareVectors2D",
    "description": "",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "CompareY",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "IsLower",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "CompareByAngle2D",
    "description": "",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ReferencePoint",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "CalculateRotationDegreeForTwoLine",
    "description": "",
    "parameters": [
      {
        "name": "middlepoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "line1point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "line2point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationRadians",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RotationDegrees",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RotationDegrees360",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UElgEditorBP_DynamicMeshActor",
    "name": "AreLinesIntersecting",
    "description": "",
    "parameters": [
      {
        "name": "LineStart1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineStart2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "ReturnToLastClientChoice",
    "description": "Wrapper methods from FConversationContext Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::ReturnToLastClientChoice",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "ReturnToCurrentClientChoice",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::ReturnToCurrentClientChoice",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "ReturnToConversationStart",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::ReturnToConversationStart",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "PauseConversationAndSendClientChoices",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::PauseConversationAndSendClientChoices",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "FClientConversationMessage",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "MakeConversationParticipant",
    "description": "Registers an actor as part of the conversation, that actor doesn't need to have the UConversationParticipantComponent it won't be added though.",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      },
      {
        "name": "ParticipantActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ParticipantTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "GetCurrentConversationNodeHandle",
    "description": "Returns the FConversationNodeHandle of the conversation instance associated with this context, or a handle with an invalid FGuid if not possible",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationNodeHandle"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "GetConversationParticipantActor",
    "description": "Returns the conversation participant actor indicated by 'ParticipantTag', or nullptr if not found",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      },
      {
        "name": "ParticipantTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "GetConversationParticipant",
    "description": "Returns the conversation participant component belonging to the participant indicated by 'ParticipantTag', or nullptr if not found",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      },
      {
        "name": "ParticipantTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UConversationParticipantComponent"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "GetConversationInstance",
    "description": "Returns the conversation instance object associated with the conversation context provided, or nullptr if not valid",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UConversationInstance"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "FindConversationComponent",
    "description": "Wrapper to find and return any UConversationParticipantComponent belonging to the provided parameter actor",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UConversationParticipantComponent"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "CanConversationContinue",
    "description": "Checks the provided task result against any which would end the conversation e.g. EConversationTaskResultType::Invalid or EConversationTaskResultType::AbortConversation",
    "parameters": [
      {
        "name": "ConversationTasResult",
        "type": "FConversationTaskResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "AdvanceConversationWithChoice",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::AdvanceConversationWithChoice",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Choice",
        "type": "FAdvanceConversationRequest",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "AdvanceConversation",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::AdvanceConversation",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationContextHelpers",
    "name": "AbortConversation",
    "description": "Constructs and returns a FConversationTaskResult configured with EConversationTaskResultType::AbortConversation",
    "parameters": [
      {
        "name": "Context",
        "type": "FConversationContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FConversationTaskResult"
  },
  {
    "class": "UConversationLibrary",
    "name": "StartConversationFromGraph",
    "description": "",
    "parameters": [
      {
        "name": "ConversationEntryTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InstigatorTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Graph",
        "type": "UConversationDatabase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UConversationInstance"
  },
  {
    "class": "UConversationLibrary",
    "name": "StartConversation",
    "description": "",
    "parameters": [
      {
        "name": "ConversationEntryTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InstigatorTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "ConversationInstanceClass",
        "type": "TSubclassOf_UConversationInstance_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UConversationInstance"
  },
  {
    "class": "UAsyncAction_CreateWidgetAsync",
    "name": "CreateWidgetAsync",
    "description": "Load the widget class asynchronously, the instance the widget after the loading completes, and return it on OnComplete.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "UserWidgetSoftClass",
        "type": "TSoftClassPtr_UUserWidget_",
        "optional": false,
        "out": false
      },
      {
        "name": "OwningPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuspendInputUntilComplete",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_CreateWidgetAsync"
  },
  {
    "class": "UAsyncAction_PushContentToLayerForPlayer",
    "name": "PushContentToLayerForPlayer",
    "description": "",
    "parameters": [
      {
        "name": "OwningPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "WidgetClass",
        "type": "TSoftClassPtr_UCommonActivatableWidget_",
        "optional": false,
        "out": false
      },
      {
        "name": "LayerName",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuspendInputUntilComplete",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_PushContentToLayerForPlayer"
  },
  {
    "class": "UAsyncAction_ShowConfirmation",
    "name": "ShowConfirmationYesNo",
    "description": "Allows easily triggering an async confirmation dialog in blueprints that you can then wait on the result.",
    "parameters": [
      {
        "name": "InWorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ShowConfirmation"
  },
  {
    "class": "UAsyncAction_ShowConfirmation",
    "name": "ShowConfirmationOkCancel",
    "description": "",
    "parameters": [
      {
        "name": "InWorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ShowConfirmation"
  },
  {
    "class": "UAsyncAction_ShowConfirmation",
    "name": "ShowConfirmationCustom",
    "description": "",
    "parameters": [
      {
        "name": "InWorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Descriptor",
        "type": "UCommonGameDialogDescriptor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ShowConfirmation"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "SuspendInputForPlayer",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SuspendReason",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "ResumeInputForPlayer",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SuspendToken",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "PushStreamedContentToLayer_ForPlayer",
    "description": "",
    "parameters": [
      {
        "name": "LocalPlayer",
        "type": "ULocalPlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "LayerName",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "WidgetClass",
        "type": "TSoftClassPtr_UCommonActivatableWidget_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "PushContentToLayer_ForPlayer",
    "description": "",
    "parameters": [
      {
        "name": "LocalPlayer",
        "type": "ULocalPlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "LayerName",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "WidgetClass",
        "type": "TSubclassOf_UCommonActivatableWidget_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCommonActivatableWidget"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "PopContentFromLayer",
    "description": "",
    "parameters": [
      {
        "name": "ActivatableWidget",
        "type": "UCommonActivatableWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "IsOwningPlayerUsingTouch",
    "description": "",
    "parameters": [
      {
        "name": "WidgetContextObject",
        "type": "UUserWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "IsOwningPlayerUsingGamepad",
    "description": "",
    "parameters": [
      {
        "name": "WidgetContextObject",
        "type": "UUserWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "GetOwningPlayerInputType",
    "description": "",
    "parameters": [
      {
        "name": "WidgetContextObject",
        "type": "UUserWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ECommonInputType"
  },
  {
    "class": "UCommonUIExtensions",
    "name": "GetLocalPlayerFromController",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULocalPlayer"
  },
  {
    "class": "UCommonInputBaseControllerData",
    "name": "GetRegisteredGamepads",
    "description": "Derive from this class to store the Input data. It is referenced in the Common Input Settings, found in the project settings UI.",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UCommonInputSettings",
    "name": "IsEnhancedInputSupportEnabled",
    "description": "Static version of enhanced input support check, exists to hide based on edit condition",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULoadingProcessTask",
    "name": "CreateLoadingScreenProcessTask",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowLoadingScreenReason",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULoadingProcessTask"
  },
  {
    "class": "UCommonUILibrary",
    "name": "FindParentWidgetOfType",
    "description": "Finds the first parent widget of the given type and returns it, or null if no parent could be found.",
    "parameters": [
      {
        "name": "StartingWidget",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "Type",
        "type": "TSubclassOf_UWidget_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWidget"
  },
  {
    "class": "UDEPRECATED_UCommonVisibilityWidgetBase",
    "name": "GetRegisteredPlatforms",
    "description": "A container that controls visibility based on Input type and Platform",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UAsyncAction_CommonUserInitialize",
    "name": "LoginForOnlinePlay",
    "description": "Async action to handle different functions for initializing users Attempts to log an existing user into the platform-specific online backend to enable full online play When the process has succeeded or failed, it will broadcast the OnInitializationComplete delegate.",
    "parameters": [
      {
        "name": "Target",
        "type": "UCommonUserSubsystem",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalPlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_CommonUserInitialize"
  },
  {
    "class": "UAsyncAction_CommonUserInitialize",
    "name": "InitializeForLocalPlay",
    "description": "Initializes a local player with the common user system, which includes doing platform-specific login and privilege checks. When the process has succeeded or failed, it will broadcast the OnInitializationComplete delegate.",
    "parameters": [
      {
        "name": "Target",
        "type": "UCommonUserSubsystem",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalPlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryInputDevice",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "bCanUseGuestLogin",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_CommonUserInitialize"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "SetEnableMultiUserCVarSync",
    "description": "An asset used to track collections of console variables that can be recalled and edited using the Console Variables Editor. Enable or disable the Multi-user sync setting for the current instance of the editor.",
    "parameters": [
      {
        "name": "bNewSetting",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "SetConsoleVariableByName_String",
    "description": "Set a console variable value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "SetConsoleVariableByName_Int",
    "description": "Set a console variable value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "SetConsoleVariableByName_Float",
    "description": "Set a console variable value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "SetConsoleVariableByName_Bool",
    "description": "Set a console variable value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "RemoveCommandFromCurrentPreset",
    "description": "* Removes a command from the current preset if it exists in the saved data. * The Asset will not be automatically saved. * @@return true if successful.",
    "parameters": [
      {
        "name": "NewCommand",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "LoadPresetIntoConsoleVariablesEditor",
    "description": "Loads the given asset in the Console Variables Editor and sets all its variable values.",
    "parameters": [
      {
        "name": "InAsset",
        "type": "UConsoleVariablesAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "InImportMode",
        "type": "EConsoleVariablesEditorPresetImportMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "GetListOfCommandsFromPreset",
    "description": "Return an array of strings containing the command names for each command found in the given preset.",
    "parameters": [
      {
        "name": "InAsset",
        "type": "UConsoleVariablesAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCommandList",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "GetEnableMultiUserCVarSync",
    "description": "Return whether the Multi-user sync setting for the current instance of the editor is enabled.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "GetCurrentlyLoadedPreset",
    "description": "Return the currently loaded list of variables in the Console Variables Editor.",
    "parameters": [],
    "returnType": "UConsoleVariablesAsset"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "GetConsoleVariableStringValue",
    "description": "Get a console variable's string value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "GetConsoleVariableSourceByName",
    "description": "Set a console variable value directly. Returns true if the console object exists.",
    "parameters": [
      {
        "name": "InCommandName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "CopyCurrentListToAsset",
    "description": "* Saves the current list in the Console Variables Editor to the given asset. * The Asset will not be automatically saved. * @@return true if successful.",
    "parameters": [
      {
        "name": "InAsset",
        "type": "UConsoleVariablesAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConsoleVariablesEditorFunctionLibrary",
    "name": "AddValidatedCommandToCurrentPreset",
    "description": "* Adds a validated command to the current preset with its current value. * The Asset will not be automatically saved. * @@return true if successful.",
    "parameters": [
      {
        "name": "NewCommand",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "RemoveThisConstraint",
    "description": "This is a set of helper functions to access various parts of the Sequencer and Control Rig API via Python and Blueprints. Remove specified constraint",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InTickableConstraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "RemoveConstraint",
    "description": "Remove constraint at specified index",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "GetConstraintsArray",
    "description": "Get a copy of the constraints in the current world @@param InWorld World we are in @@return Copy of the constraints in the level",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UTickableConstraint_"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "CreateTransformableHandle",
    "description": "Create the transformable handle that deals with getting and setting transforms on this object",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InAttachmentName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTransformableHandle"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "CreateTransformableComponentHandle",
    "description": "Create the transformable handle that deals with getting and setting transforms on this scene component",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSceneComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InSocketName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTransformableComponentHandle"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "CreateFromType",
    "description": "Create Constraint based on the specified type.",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InType",
        "type": "ETransformConstraintType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTickableTransformConstraint"
  },
  {
    "class": "UConstraintsScriptingLibrary",
    "name": "AddConstraint",
    "description": "",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InParentHandle",
        "type": "UTransformableHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "InChildHandle",
        "type": "UTransformableHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "InConstraint",
        "type": "UTickableTransformConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "bMaintainOffset",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContentBrowserItemLibrary",
    "name": "IsFolder",
    "description": "TODO: Script API exposure",
    "parameters": [
      {
        "name": "Item",
        "type": "FContentBrowserItem",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContentBrowserItemLibrary",
    "name": "IsFile",
    "description": "",
    "parameters": [
      {
        "name": "Item",
        "type": "FContentBrowserItem",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContentBrowserItemLibrary",
    "name": "GetVirtualPath",
    "description": "",
    "parameters": [
      {
        "name": "Item",
        "type": "FContentBrowserItem",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UContentBrowserItemLibrary",
    "name": "GetDisplayName",
    "description": "",
    "parameters": [
      {
        "name": "Item",
        "type": "FContentBrowserItem",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UContentBrowserItemPathExtensions",
    "name": "SetPath",
    "description": "Set the path being stored",
    "parameters": [
      {
        "name": "ItemPath",
        "type": "FContentBrowserItemPath",
        "optional": false,
        "out": true
      },
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InPathType",
        "type": "EContentBrowserPathType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContentBrowserItemPathExtensions",
    "name": "MakeContentBrowserItemPath",
    "description": "",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InPathType",
        "type": "EContentBrowserPathType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContentBrowserItemPath"
  },
  {
    "class": "UContentBrowserItemPathExtensions",
    "name": "GetVirtualPath",
    "description": "Returns virtual path as FName (eg, \"/All/Plugins/PluginA/MyFile\").",
    "parameters": [
      {
        "name": "ItemPath",
        "type": "FContentBrowserItemPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UContentBrowserItemPathExtensions",
    "name": "GetInternalPath",
    "description": "Returns internal path if there is one (eg,. \"/PluginA/MyFile\").",
    "parameters": [
      {
        "name": "ItemPath",
        "type": "FContentBrowserItemPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UContentBrowserItemPathExtensions",
    "name": "BreakContentBrowserItemPath",
    "description": "",
    "parameters": [
      {
        "name": "ItemPath",
        "type": "FContentBrowserItemPath",
        "optional": false,
        "out": false
      },
      {
        "name": "VirtualPath",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "InternalPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetSectionAndAnimSetIndices",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIdx",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "AnimSetIdx",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetSceneAsset",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UContextualAnimSceneAsset"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetPrimaryBinding",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContextualAnimSceneBinding"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetBindings",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FContextualAnimSceneBinding_"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetBindingByRole",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContextualAnimSceneBinding"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetBindingByActor",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContextualAnimSceneBinding"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetAlignmentTransformFromBinding",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FContextualAnimSceneBinding",
        "optional": false,
        "out": false
      },
      {
        "name": "WarpPoint",
        "type": "FContextualAnimWarpPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetAlignmentTransformForRoleRelativeToWarpPoint",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "WarpPoint",
        "type": "FContextualAnimWarpPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_GetAlignmentTransformForRoleRelativeToOtherRole",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeToRole",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_CalculateWarpPoints",
    "description": "SceneBindings Blueprint Interface",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "OutWarpPoints",
        "type": "TArray_FContextualAnimWarpPoint_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindings_AddOrUpdateWarpTargetsForBindings",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_MakeFromActorWithExternalTransform",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ExternalTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContextualAnimSceneBindingContext"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_MakeFromActor",
    "description": "FContextualAnimSceneBindingContext Blueprint Interface",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FContextualAnimSceneBindingContext"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_HasMatchingGameplayTag",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "TagToCheck",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_HasAnyMatchingGameplayTags",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_HasAllMatchingGameplayTags",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_GetVelocity",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_GetTransform",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_GetGameplayTags",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBindingContext_GetActor",
    "description": "",
    "parameters": [
      {
        "name": "BindingContext",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBinding_GetSkeletalMesh",
    "description": "",
    "parameters": [
      {
        "name": "Binding",
        "type": "FContextualAnimSceneBinding",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeletalMeshComponent"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBinding_GetRoleFromBinding",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FContextualAnimSceneBinding",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBinding_GetAnimationFromBinding",
    "description": "",
    "parameters": [
      {
        "name": "Bindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FContextualAnimSceneBinding",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimSequenceBase"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_SceneBinding_GetActor",
    "description": "FContextualAnimSceneBinding Blueprint Interface",
    "parameters": [
      {
        "name": "Binding",
        "type": "FContextualAnimSceneBinding",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_Montage_GetSectionTimeLeftFromPos",
    "description": "",
    "parameters": [
      {
        "name": "Montage",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_Montage_GetSectionStartAndEndTime",
    "description": "Montage Blueprint Interface",
    "parameters": [
      {
        "name": "Montage",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutStartTime",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutEndTime",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_Montage_GetSectionLength",
    "description": "",
    "parameters": [
      {
        "name": "Montage",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_DrawDebugPose",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Animation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalToWorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "LifeTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_CreateContextualAnimSceneBindingsForTwoActors",
    "description": "",
    "parameters": [
      {
        "name": "SceneAsset",
        "type": "UContextualAnimSceneAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "Primary",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Secondary",
        "type": "FContextualAnimSceneBindingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UContextualAnimUtilities",
    "name": "BP_CreateContextualAnimSceneBindings",
    "description": "",
    "parameters": [
      {
        "name": "SceneAsset",
        "type": "UContextualAnimSceneAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "Params",
        "type": "TMap_string__FContextualAnimSceneBindingContext_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBindings",
        "type": "FContextualAnimSceneBindings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNodeControlRigLibrary",
    "name": "SetControlRigClass",
    "description": "Exposes operations to be performed on a control rig anim node Set the control rig class on the node",
    "parameters": [
      {
        "name": "Node",
        "type": "FControlRigReference",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRigClass",
        "type": "TSubclassOf_UControlRig_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FControlRigReference"
  },
  {
    "class": "UAnimNodeControlRigLibrary",
    "name": "ConvertToControlRigPure",
    "description": "Get a control rig context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "FControlRigReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimNodeControlRigLibrary",
    "name": "ConvertToControlRig",
    "description": "Get a control rig context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FControlRigReference"
  },
  {
    "class": "UControlRig",
    "name": "FindControlRigs",
    "description": "Runs logic for mapping input data to transforms (the \"Rig\") Contains a backwards solve event Requests to perform construction during the next execution To support Blueprints/scripting, we need a different delegate type (a 'Dynamic' delegate) which supports looser style UFunction binding (using names). Find the actor the rig is bound to, if any",
    "parameters": [
      {
        "name": "Outer",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalClass",
        "type": "TSubclassOf_UControlRig_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigTestData",
    "name": "CreateNewAsset",
    "description": "",
    "parameters": [
      {
        "name": "InDesiredPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InBlueprintPathName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromVector2D",
    "description": "Sets a curve's value given its index Sets a curve's value given its key Switches a multi parent element to world space. This injects a world space reference. Switches a multi parent element to a single parent. This sets the new parent's weight to 1.0 and disables weights for all other potential parents. Switches a multi parent element to its first parent Sorts the input key list by traversing the hierarchy Sets the metadata to a FVector value Sets the metadata to a FVector array value Sets the metadata to a FTransform value Sets the metadata to a FTransform array value * Sets a tag on an element in the hierarchy * @@param InItem The item to set the tag for * @@param InTag The tag to set Sets the metadata to a FRotator value Sets the metadata to a FRotator array value Sets the metadata to a FRigElementKey value Sets the metadata to a FRigElementKey array value Sets the metadata to a FQuat value Sets the metadata to a FQuat array value Sets the current / initial pose of the hierarchy Sets the all of the weights of the parents of a multi parent element Sets the weight of a parent below a multi parent element Sets the metadata to a FName value Sets the metadata to a FName array value Sets the local current or initial transform for a given element index. Sets the local current or initial transform for a given key. Sets the metadata to a FLinearColor value Sets the metadata to a FLinearColor array value Sets the metadata to a int32 value Sets the metadata to a int32 array value Sets the global current or initial transform for a given element index. Sets the global current or initial transform for a given key. Sets the metadata to a float value Sets the metadata to a float array value Sets a curve's value given its index Sets a curve's value given its key Sets a control's current visibility based on a key Sets a control's current visibility based on a key Sets a control's current value given its index Sets a control's current value given its key Sets the local shape transform for a given control element by index Sets the shape transform for a given control element by key Sets the control settings for a given control element by index Sets the control settings for a given control element by key Sets a control's preferred rotator (local transform rotation) Sets a control's preferred rotator (local transform rotation) Sets a control's preferred euler rotation order Sets a control's preferred euler rotation order Sets a control's preferred euler angles (local transform rotation) Sets a control's preferred euler angles (local transform rotation) Sets the local offset transform for a given control element by index Sets the offset transform for a given control element by key Sets the connector settings for a given connector element by index Sets the connector settings for a given connector element by key Sets the metadata to a bool value Sets the metadata to a bool array value Sends an autokey event from the hierarchy to the world Try to restore the sockets from the state structs Try to restore the connectors from the state structs Resets the hierarchy to the state of its default. This refers to the hierarchy on the default object. Resets the current pose of a filtered list of elements to the initial / ref pose. Resets all curves to 0.0 Clears the whole hierarchy and removes all elements. Removes the metadata under a given element Removes all of the metadata under a given item Returns the number of elements in the Hierarchy. Creates a rig control value from a FVector2D value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromVector",
    "description": "Creates a rig control value from a FVector value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromTransformNoScale",
    "description": "Creates a rig control value from a FTransformNoScale value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FTransformNoScale",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromTransform",
    "description": "Creates a rig control value from a FTransform value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromRotator",
    "description": "Creates a rig control value from a FRotator value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromInt",
    "description": "Creates a rig control value from a int32 value",
    "parameters": [
      {
        "name": "InValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromFloat",
    "description": "Creates a rig control value from a float value",
    "parameters": [
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromEulerTransform",
    "description": "Creates a rig control value from a FEulerTransform value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FEulerTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "MakeControlValueFromBool",
    "description": "Creates a rig control value from a bool value",
    "parameters": [
      {
        "name": "InValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRigControlValue"
  },
  {
    "class": "URigHierarchy",
    "name": "GetVectorFromControlValue",
    "description": "Returns true if the provided element index is valid Returns true if a given element is selected Returns true if a given element is selected Returns true if the provided element is procedural. Returns true if an element is parented to another element Returns a curve's value given its index Returns whether a curve's value is set, given its key Returns true if the hierarchy controller is currently available The controller may not be available during certain events. If the controller is not available then GetController() will return nullptr. * Returns true if a given item has a certain tag * @@param InItem The item to return the tags for * @@param InTag The tag to check Queries and returns the value of FVector metadata Returns the contained FVector value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URigHierarchy",
    "name": "GetVector2DFromControlValue",
    "description": "Queries and returns the value of FVector array metadata Returns the contained FVector2D value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "URigHierarchy",
    "name": "GetTransformNoScaleFromControlValue",
    "description": "Returns the contained FTransformNoScale value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransformNoScale"
  },
  {
    "class": "URigHierarchy",
    "name": "GetTransformFromControlValue",
    "description": "Queries and returns the value of FTransform metadata Returns the contained FTransform value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "URigHierarchy",
    "name": "GetRotatorFromControlValue",
    "description": "Queries and returns the value of FTransform array metadata * Returns the tags for a given item * @@param InItem The item to return the tags for Returns all of the sockets' state Returns all Socket elements Returns the keys of selected elements Returns a rule manager for this hierarchy Note: If the manager is not available this will return nullptr even if the bCreateIfNeeded flag is set to true. Queries and returns the value of FRotator metadata Returns the contained FRotator value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "URigHierarchy",
    "name": "GetIntFromControlValue",
    "description": "Queries and returns the value of FRotator array metadata Returns all root element keys Queries and returns the value of FRigElementKey metadata Queries and returns the value of FRigElementKey array metadata Returns all references Queries and returns the value of FQuat metadata Queries and returns the value of FQuat array metadata Returns the previous parent of an element prior to a reparent operation Returns the previous name of an element prior to a rename operation Returns the current / initial pose of the hierarchy Returns all Physics elements Returns the weights of all parents below a multi parent element Returns the weight of a parent below a multi parent element Returns the global current or initial value for a given element index. If the element does not have a parent FTransform::Identity will be returned. Returns the global current or initial value for a given key. If the element does not have a parent FTransform::Identity will be returned. Returns the parent elements of a given element key Returns the number of parents of an element Returns all Null elements Returns the namespace of an element belong to (or NAME_None in case the element doesn't belong to a module / namespace) Returns the namespace of an element belong to (or an empty string in case the element doesn't belong to a module / namespace) Queries and returns the value of FName metadata Queries and returns the value of FName array metadata Returns the path of the module an element belong to (or NAME_None in case the element doesn't belong to a module) Returns the path of the module an element belong to (or an empty string in case the element doesn't belong to a module) Returns the type of metadata given its name the item it is stored under Returns the name of metadata for a given element Returns the local current or initial value for a element index. If the index is invalid FTransform::Identity will be returned. Returns the local current or initial value for a given key. If the key is invalid FTransform::Identity will be returned. Returns the index of an element given its key within its default parent (or root) Returns the local shape transform for a given control element. Returns the local shape transform for a given control element. Queries and returns the value of FLinearColor metadata Queries and returns the value of FLinearColor array metadata Returns the keys of an array of indices Returns the key of an element given its index Returns the contained int32 value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FRotator_"
  },
  {
    "class": "URigHierarchy",
    "name": "GetFloatFromControlValue",
    "description": "Queries and returns the value of int32 metadata Queries and returns the value of int32 array metadata Returns the index of an element given its key Returns the global current or initial value for a element index. If the index is invalid FTransform::Identity will be returned. Returns the global current or initial value for a given key. If the key is invalid FTransform::Identity will be returned. Returns the global shape transform for a given control element. Returns the global shape transform for a given control element. Returns the global offset transform for a given control element. Returns the global offset transform for a given control element. Queries and returns the value of float metadata Returns the contained float value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "URigHierarchy",
    "name": "GetEulerTransformFromControlValue",
    "description": "Queries and returns the value of float array metadata Returns the first parent element of a given element key Returns the contained FEulerTransform value from a a Rig Control Value",
    "parameters": [
      {
        "name": "InValue",
        "type": "FRigControlValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_number_"
  },
  {
    "class": "UControlRigBlueprint",
    "name": "GetCurrentlyOpenRigBlueprints",
    "description": "IInterface_PreviewMeshProvider interface",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "SetPreviewMesh",
    "description": "",
    "parameters": [
      {
        "name": "InRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviewMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bMarkAsDirty",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "RequestControlRigInit",
    "description": "",
    "parameters": [
      {
        "name": "InRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetPreviewMesh",
    "description": "",
    "parameters": [
      {
        "name": "InRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetHierarchyController",
    "description": "",
    "parameters": [
      {
        "name": "InRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "URigHierarchyController"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetHierarchy",
    "description": "",
    "parameters": [
      {
        "name": "InRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "URigHierarchy"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetCurrentlyOpenRigBlueprints",
    "description": "",
    "parameters": [],
    "returnType": "TArray_UControlRigBlueprint_"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetAvailableRigUnits",
    "description": "",
    "parameters": [],
    "returnType": "TArray_UStruct_"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "GetAvailableRigModules",
    "description": "",
    "parameters": [],
    "returnType": "TArray_FRigModuleDescription_"
  },
  {
    "class": "UControlRigBlueprintEditorLibrary",
    "name": "CastToControlRigBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Branches",
        "type": "ECastToControlRigBlueprintCases",
        "optional": false,
        "out": true
      },
      {
        "name": "AsControlRigBlueprint",
        "type": "UControlRigBlueprint",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigBlueprintFactory",
    "name": "CreateNewControlRigAsset",
    "description": "Create a new control rig asset within the contents space of the project.",
    "parameters": [
      {
        "name": "InDesiredPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bModularRig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UControlRigBlueprint"
  },
  {
    "class": "UControlRigBlueprintFactory",
    "name": "CreateControlRigFromSkeletalMeshOrSkeleton",
    "description": "Create a new control rig asset within the contents space of the project based on a skeletal mesh or skeleton object.",
    "parameters": [
      {
        "name": "InSelectedObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bModularRig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UControlRigBlueprint"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "TweenControlRig",
    "description": "This is a set of helper functions to access various parts of the Sequencer and Control Rig API via Python and Blueprints. Peform a Tween operation on the current active sequencer time(must be visible).",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "TweenValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SpaceCompensate",
    "description": "Perform compensation for any spaces at the specified time for the specified control rig",
    "parameters": [
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SnapControlRig",
    "description": "Peform a Snap operation to snap the children to the parent.",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartFrame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "EndFrame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "ChildrenToSnap",
        "type": "FControlRigSnapperSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentToSnap",
        "type": "FControlRigSnapperSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SnapSettings",
        "type": "UControlRigSnapSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SmartReduce",
    "description": "Peform new Smart Reduce filter over the specified control rig section in the current open level sequence. Note existing functions like LoadAnimSequenceIntoControlRigSection and BakeToControlRig, will still use the old key reduction algorithm, so if you want to bake and then key reduce with the new function, set the bKeyReduce param as false with those functions, but then call this function after.",
    "parameters": [
      {
        "name": "ReduceParams",
        "type": "FSmartReduceParams",
        "optional": false,
        "out": true
      },
      {
        "name": "MovieSceneSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "ShowAllControls",
    "description": "Shows all of the controls for the given section",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigVector2Ds",
    "description": "Set ControlRig Control's Vector2D values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigVector2D",
    "description": "Set ControlRig Control's Vector2D value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigTransforms",
    "description": "Set ControlRig Control's Transform values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigTransformNoScales",
    "description": "Set ControlRig Control's TransformNoScale values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FTransformNoScale_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigTransformNoScale",
    "description": "Set ControlRig Control's TransformNoScale value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransformNoScale",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigTransform",
    "description": "Set ControlRig Control's Transform value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigScales",
    "description": "Set ControlRig Control's Scale values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigScale",
    "description": "Set ControlRig Control's Scale value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigRotators",
    "description": "Set ControlRig Control's Rotator values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FRotator_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigRotator",
    "description": "Set ControlRig Control's Rotator value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigPositions",
    "description": "Set ControlRig Control's Position values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigPosition",
    "description": "Set ControlRig Control's Position value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigInts",
    "description": "Set ControlRig Control's int values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigInt",
    "description": "Set ControlRig Control's int value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigFloats",
    "description": "Set ControlRig Control's float values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigFloat",
    "description": "Set ControlRig Control's float value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigEulerTransforms",
    "description": "Set ControlRig Control's EulerTransform values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FEulerTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigEulerTransform",
    "description": "Set ControlRig Control's EulerTransform value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FEulerTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigBools",
    "description": "Set ControlRig Control's bool values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetLocalControlRigBool",
    "description": "Set ControlRig Control's bool value at specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlsMask",
    "description": "Set the controls mask for the given ControlNames",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigWorldTransforms",
    "description": "Set ControlRig Control's World Transforms at a specific times.",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigWorldTransform",
    "description": "Set ControlRig Control's World Transform at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bSetKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigSpace",
    "description": "* Set the a key for the Control Rig Space for the Control at the specified time. If space is the same as the current no key witll be set. * * @@param InSequence Sequence to set the space * @@param InControlRig ControlRig with the Control * @@param InControlName The name of the Control * @@param InSpaceKey  The new space for the Control * @@param InTime Time to change the space. * @@param TimeUnit Unit for the InTime, either in display rate or tick resolution",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InSpaceKey",
        "type": "FRigElementKey",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigPriorityOrder",
    "description": "Set Control Rig priority order",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "PriorityOrder",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigLayeredMode",
    "description": "* Convert the control rig track into absolute or layered rig * * @@param InTrack Control rig track to convert * @@param bSetIsLayered Convert to layered rig if true, or absolute if false",
    "parameters": [
      {
        "name": "InTrack",
        "type": "UMovieSceneControlRigParameterTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "bSetIsLayered",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetControlRigApplyMode",
    "description": "Set the FK Control Rig to apply mode",
    "parameters": [
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InApplyMode",
        "type": "EControlRigFKRigExecuteMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "SetConstraintActiveKey",
    "description": "Set the constraint active key in the current open Sequencer",
    "parameters": [
      {
        "name": "InConstraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "bActive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "RenameControlRigControlChannels",
    "description": "Rename the Control Rig Channels in Sequencer to the specified new control names, which should be present on the Control Rig",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InOldControlNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "InNewControlNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "MoveControlRigSpace",
    "description": "Move the Control Rig Space Key for the Control at the specified time to the new time. This will also move any Control Rig keys at this space switch boundary.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "InNewTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "MoveConstraintKey",
    "description": "Move the constraint active key in the current open Sequencer",
    "parameters": [
      {
        "name": "Constraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstraintSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "InNewTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "MergeAnimLayers",
    "description": "Merge specified anim layers into one layer. Will merge onto the anim layer with the lowest index",
    "parameters": [
      {
        "name": "Indices",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "LoadAnimSequenceIntoControlRigSection",
    "description": "Load anim sequence into this control rig section",
    "parameters": [
      {
        "name": "MovieSceneSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SkelMeshComp",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InStartFrame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "bKeyReduce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Interpolation",
        "type": "EMovieSceneKeyInterpolation",
        "optional": true,
        "out": false
      },
      {
        "name": "bResetControls",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "IsLayeredControlRig",
    "description": "Whether or not the control rig is an Layered Control Rig.",
    "parameters": [
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "IsFKControlRig",
    "description": "Whether or not the control rig is an FK Control Rig.",
    "parameters": [
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "ImportFBXToControlRigTrack",
    "description": "* Import FBX onto a control rig with the specified track and section * * @@param InWorld World to import to * @@param InSequence Sequence to import * @@param InTrack Track to import onto * @@param InSection Section to import onto, may be null in which case we use the track's section to key * @@param SelectedControlRigNames  List of selected control rig names. Will use them if  ImportFBXControlRigSettings->bImportOntoSelectedControls is true * @@param ImportFBXControlRigSettings Settings to control import. * @@param InImportFileName Path to fbx file to create",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrack",
        "type": "UMovieSceneControlRigParameterTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InSection",
        "type": "UMovieSceneControlRigParameterSection",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedControlRigNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportFBXControlRigSettings",
        "type": "UMovieSceneUserImportFBXControlRigSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "HideAllControls",
    "description": "Hides all of the controls for the given section",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetWorldSpaceReferenceKey",
    "description": "* Get the default world space key, can be used a world space.",
    "parameters": [],
    "returnType": "FRigElementKey"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetVisibleControlRigs",
    "description": "Get all of the visible control rigs in the level",
    "parameters": [],
    "returnType": "TArray_UControlRig_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetSkeletalMeshComponentWorldTransforms",
    "description": "Get SkeletalMeshComponents World Transforms at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SkeletalMeshComponent",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "ReferenceName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetSkeletalMeshComponentWorldTransform",
    "description": "Get SkeletalMeshComponent World Transform at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SkeletalMeshComponent",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      },
      {
        "name": "ReferenceName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigVector2Ds",
    "description": "Get ControlRig Control's Vector2D values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigVector2D",
    "description": "Get ControlRig Control's Vector2D value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigTransforms",
    "description": "Get ControlRig Control's Transform values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigTransformNoScales",
    "description": "Get ControlRig Control's TransformNoScale values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FTransformNoScale_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigTransformNoScale",
    "description": "Get ControlRig Control's TransformNoScale value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransformNoScale"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigTransform",
    "description": "Get ControlRig Control's Transform value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigScales",
    "description": "Get ControlRig Control's Scale values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigScale",
    "description": "Get ControlRig Control's Scale value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigRotators",
    "description": "Get ControlRig Control's Rotator values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FRotator_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigRotator",
    "description": "Get ControlRig Control's Rotator value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigPositions",
    "description": "Get ControlRig Control's Position values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigPosition",
    "description": "Get ControlRig Control's Position value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigInts",
    "description": "Get ControlRig Control's integer values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigInt",
    "description": "Get ControlRig Control's integer value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigFloats",
    "description": "Get ControlRig Control's float values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_number_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigFloat",
    "description": "Get ControlRig Control's float value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigEulerTransforms",
    "description": "Get ControlRig Control's EulerTransform values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FEulerTransform_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigEulerTransform",
    "description": "Get ControlRig Control's EulerTransform value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FEulerTransform"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigBools",
    "description": "Get ControlRig Control's bool values at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_boolean_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetLocalControlRigBool",
    "description": "Get ControlRig Control's bool value at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetFKControlRigApplyMode",
    "description": "Get FKControlRig Apply Mode.",
    "parameters": [
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EControlRigFKRigExecuteMode"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetDefaultParentKey",
    "description": "* Get the default parent key, can be used a parent space.",
    "parameters": [],
    "returnType": "FRigElementKey"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetControlsMask",
    "description": "Get the controls mask for the given ControlName",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetControlRigWorldTransforms",
    "description": "Get ControlRig Control's World Transforms at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetControlRigWorldTransform",
    "description": "Get ControlRig Control's World Transform at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetControlRigs",
    "description": "Get all of the control rigs and their bindings in the level sequence",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FControlRigSequencerBindingProxy_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetControlRigPriorityOrder",
    "description": "Get Control Rig prirority order",
    "parameters": [
      {
        "name": "InSection",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetConstraintsForHandle",
    "description": "Get all constraints for this object, which is described by a transformable handle",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InChild",
        "type": "UTransformableHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UTickableConstraint_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetConstraintKeys",
    "description": "Get the constraint keys for the specified constraint",
    "parameters": [
      {
        "name": "InConstraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstraintSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBools",
        "type": "TArray_boolean_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutFrames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": true
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetAnimLayers",
    "description": "Get the animation layer objects",
    "parameters": [],
    "returnType": "TArray_UAnimLayer_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetAnimLayerIndex",
    "description": "Helper function to get the index in the anim layer array from the anim layer",
    "parameters": [
      {
        "name": "AnimLayer",
        "type": "UAnimLayer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetActorWorldTransforms",
    "description": "Get Actors World Transforms at specific times",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "GetActorWorldTransform",
    "description": "Get Actors World Transform at a specific time",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "FindOrCreateControlRigTrack",
    "description": "Find or create a Control Rig track of a specific class based upon the binding",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRigClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsLayeredControlRig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UMovieSceneTrack"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "FindOrCreateControlRigComponentTrack",
    "description": "Find or create a Control Rig Component",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "ExportFBXFromControlRigSection",
    "description": "Exports an FBX from the given control rig section.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Section",
        "type": "UMovieSceneControlRigParameterSection",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportFBXControlRigSettings",
        "type": "UMovieSceneUserExportFBXControlRigSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "DuplicateAnimLayer",
    "description": "Duplicate anim layer at specified index",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "DeleteControlRigSpace",
    "description": "Delete the Control Rig Space Key for the Control at the specified time. This will delete any attached Control Rig keys at this time and will perform any needed compensation to the new space.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "DeleteConstraintKey",
    "description": "Delete the Key for the Constraint at the specified time.",
    "parameters": [
      {
        "name": "Constraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstraintSection",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "DeleteAnimLayer",
    "description": "Delete anim layer at specified index",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "CompensateAll",
    "description": "Compensate constraint at all keys",
    "parameters": [
      {
        "name": "InConstraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "Compensate",
    "description": "Compensate constraint at the specfied time",
    "parameters": [
      {
        "name": "InConstraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "CollapseControlRigAnimLayersWithSettings",
    "description": "* Collapse and bake all sections and layers on a control rig track to just one section using passed in settings. * * @@param InSequence Sequence that has track to collapse * @@param InTrack Track for layers to collapse * @@param InSettings Settings that determine how to collapse",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrack",
        "type": "UMovieSceneControlRigParameterTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InSettings",
        "type": "FBakingAnimationKeySettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "CollapseControlRigAnimLayers",
    "description": "* Collapse and bake all sections and layers on a control rig track to just one section. * * @@param InSequence Sequence that has track to collapse * @@param InTrack Track for layers to collapse * @@param bKeyReduce If true do key reduction based upon Tolerance, if false don't * @@param Tolerance If reducing keys, tolerance about which keys will be removed, smaller tolerance, more keys usually.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrack",
        "type": "UMovieSceneControlRigParameterTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "bKeyReduce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "BlendValuesOnSelected",
    "description": "Peform specified blend operation based upon selected keys in the curve editor or selected control rig controls",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendOperation",
        "type": "EAnimToolBlendOperation",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "BakeToControlRig",
    "description": "Bake the current animation in the binding to a Control Rig track",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ControlRigClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportOptions",
        "type": "UAnimSeqExportOption",
        "optional": false,
        "out": false
      },
      {
        "name": "bReduceKeys",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "bResetControls",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "BakeControlRigSpace",
    "description": "Bake specified Control Rig Controls to a specified Space based upon the current settings",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlRig",
        "type": "UControlRig",
        "optional": false,
        "out": false
      },
      {
        "name": "InControlNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "InSettings",
        "type": "FRigSpacePickerBakeSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "BakeConstraints",
    "description": "Bake the constraint to keys based on the passed in settings. This will use the open sequencer to bake. See ConstraintsScriptingLibrary to get the list of available constraints",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InConstraints",
        "type": "TArray_UTickableConstraint_",
        "optional": false,
        "out": true
      },
      {
        "name": "InSettings",
        "type": "FBakingAnimationKeySettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "BakeConstraint",
    "description": "Bake the constraint to keys based on the passed in frames. This will use the open sequencer to bake. See ConstraintsScriptingLibrary to get the list of available constraints",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "Constraint",
        "type": "UTickableConstraint",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FFrameNumber_",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "AddConstraint",
    "description": "Add a constraint possibly adding to sequencer also if one is open.",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InType",
        "type": "ETransformConstraintType",
        "optional": false,
        "out": false
      },
      {
        "name": "InChild",
        "type": "UTransformableHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "InParent",
        "type": "UTransformableHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bMaintainOffset",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTickableConstraint"
  },
  {
    "class": "UControlRigSequencerEditorLibrary",
    "name": "AddAnimLayerFromSelection",
    "description": "Add anim layer from objects selected in Sequencer",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "FQuat",
    "name": "Slerp",
    "description": "Quaternion.",
    "parameters": [
      {
        "name": "P0",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "P2",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "FVector",
    "name": "Dist",
    "description": "A point or direction FVector in 3d space.",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector",
    "name": "Dist2D",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector",
    "name": "DistSquared",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector",
    "name": "DistSquared2D",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector2D",
    "name": "Dist",
    "description": "A vector in 2-D space composed of components (X, Y) with floating point precision.",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector2D",
    "name": "DistSquared",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "FVector4",
    "name": "Dot3",
    "description": "A 4-D homogeneous vector.",
    "parameters": [
      {
        "name": "P0",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UDataflowBlueprintLibrary",
    "name": "EvaluateTerminalNodeByName",
    "description": "Find a specific terminal node by name evaluate it using a specific UObject",
    "parameters": [
      {
        "name": "Dataflow",
        "type": "UDataflow",
        "optional": false,
        "out": false
      },
      {
        "name": "TerminalNodeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultAsset",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "NotEqual_DataRegistryType",
    "description": "Singleton manager that provides synchronous and asynchronous access to data registries Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "NotEqual_DataRegistryId",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "IsValidDataRegistryType",
    "description": "Returns true if this is a non-empty type, does not check if it is currently registered",
    "parameters": [
      {
        "name": "DataRegistryType",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "IsValidDataRegistryId",
    "description": "Returns true if this is a non-empty item identifier, does not check if it is currently registered",
    "parameters": [
      {
        "name": "DataRegistryId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "GetPossibleDataRegistryIdList",
    "description": "Returns the list of known identifiers for an active data registry so they can be iterated with Find or Acquire. Depending on how the registry is setup, this could be a large number of identifiers and they may not all be available.",
    "parameters": [
      {
        "name": "RegistryType",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      },
      {
        "name": "OutIdList",
        "type": "TArray_FDataRegistryId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "GetCachedItemFromLookupBP",
    "description": "Deprecated in favor of FindCachedItemFromLookupBP, but does still work properly",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "ResolvedLookup",
        "type": "FDataRegistryLookup",
        "optional": false,
        "out": false
      },
      {
        "name": "OutItem",
        "type": "FTableRowBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "GetCachedItemBP",
    "description": "Attempts to get cached structure data stored in a DataRegistry, modifying OutItem if the item is available. This version has an input param and simple bool return.",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "OutItem",
        "type": "FTableRowBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "FindCachedItemFromLookupBP",
    "description": "Attempts to get structure data stored in a DataRegistry cache after an async acquire, returning OutItem if the item is available. OutItem should not be accessed from the Not Found pin was not found.",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "ResolvedLookup",
        "type": "FDataRegistryLookup",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "EDataRegistrySubsystemGetItemResult",
        "optional": false,
        "out": true
      },
      {
        "name": "OutItem",
        "type": "FTableRowBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "FindCachedItemBP",
    "description": "Attempts to get cached structure data stored in a DataRegistry, returning OutItem if the item is available. This version has two output pins for convenience, and OutItem should not be accessed from the Not Found pin.",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "EDataRegistrySubsystemGetItemResult",
        "optional": false,
        "out": true
      },
      {
        "name": "OutItem",
        "type": "FTableRowBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "EvaluateDataRegistryCurve",
    "description": "Attempts to evaluate a curve stored in a DataRegistry cache using a specific input value",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "InputValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "EDataRegistrySubsystemGetItemResult",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "EqualEqual_DataRegistryType",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "EqualEqual_DataRegistryId",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "Conv_DataRegistryTypeToString",
    "description": "Converts a Data Registry Type to a string. The other direction is not provided because it cannot be validated",
    "parameters": [
      {
        "name": "DataRegistryType",
        "type": "FDataRegistryType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "Conv_DataRegistryIdToString",
    "description": "Converts a Data Registry Id to a string. The other direction is not provided because it cannot be validated",
    "parameters": [
      {
        "name": "DataRegistryId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UDataRegistrySubsystem",
    "name": "AcquireItemBP",
    "description": "Starts an asynchronous acquire of a data registry item that may not yet be cached, and then accessed with Get Data Registry Item From Lookup This function will only work properly if the data registry is set up for asynchronous querying.",
    "parameters": [
      {
        "name": "ItemId",
        "type": "FDataRegistryId",
        "optional": false,
        "out": false
      },
      {
        "name": "AcquireCallback",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetDatasmithUserDataValuesForKey",
    "description": "Get the values of the given key for the Datasmith User Data of the given object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bPartialMatchKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetDatasmithUserDataValueForKey",
    "description": "Get the value of the given key for the Datasmith User Data of the given object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bPartialMatchKey",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetDatasmithUserDataKeysAndValuesForValue",
    "description": "Get the keys and values for which the associated value contains the string to match for the Datasmith User Data of the given object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "StringToMatch",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutKeys",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValues",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetDatasmithUserData",
    "description": "Get the Datasmith User Data of a given object",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UDatasmithAssetUserData"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetAllObjectsAndValuesForKey",
    "description": "Find all loaded objects of the given type that have a Datasmith User Data that contains the given key and their associated values. This is a slow operation, so editor only.",
    "parameters": [
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutObjects",
        "type": "TArray_UObject_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValues",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDatasmithContentBlueprintLibrary",
    "name": "GetAllDatasmithUserData",
    "description": "Find all Datasmith User Data of loaded objects of the given type. This is a slow operation, so editor only.",
    "parameters": [
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutUserData",
        "type": "TArray_UDatasmithAssetUserData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "StructToJson",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "StructArrayToJson",
    "description": "",
    "parameters": [
      {
        "name": "InStructArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "SaveFile",
    "description": "",
    "parameters": [
      {
        "name": "Content",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Path",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "LoadFile",
    "description": "",
    "parameters": [
      {
        "name": "Path",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "JsonToStructArray",
    "description": "",
    "parameters": [
      {
        "name": "InJsonString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InStructArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "JsonToStruct",
    "description": "this OutStruct is an Generics output param",
    "parameters": [
      {
        "name": "InJsonString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutStruct",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEasySaveBPLibrary",
    "name": "IsFileExists",
    "description": "",
    "parameters": [
      {
        "name": "FilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "StripLODGeometry",
    "description": "Utility class to altering and analyzing a SkeletalMesh and use the common functionalities of the SkeletalMesh Editor. The editor should not be in play in editor mode. This function will strip all triangle in the specified LOD that don't have any UV area pointing on a black pixel in the TextureMask. We use the UVChannel 0 to find the pixels in the texture.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureMask",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Threshold",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "SetLodBuildSettings",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BuildOptions",
        "type": "FSkeletalMeshBuildSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "RenameSocket",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OldName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "RemoveLODs",
    "description": "Remove all the specified LODs. This function will remove all the valid LODs in the list. Valid LOD is any LOD greater then 0 that exist in the skeletalmesh. We cannot remove the base LOD 0. will have removed all valid LODs.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToRemoveLODs",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "ReimportAllCustomLODs",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "RegenerateLOD",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewLODCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bRegenerateEvenIfImported",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bGenerateBaseLOD",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "ImportLOD",
    "description": "",
    "parameters": [
      {
        "name": "BaseMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "GetNumVerts",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "GetLODCount",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "GetLodBuildSettings",
    "description": "",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBuildOptions",
        "type": "FSkeletalMeshBuildSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorSkeletalMeshLibrary",
    "name": "CreatePhysicsAsset",
    "description": "This function creates a PhysicsAsset for the given SkeletalMesh with the same settings as if it were created through FBX import",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPhysicsAsset"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetLodsWithNotification",
    "description": "Utility class to altering and analyzing a StaticMesh and use the common functionalities of the Mesh Editor. The editor should not be in play in editor mode.",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ReductionOptions",
        "type": "FStaticMeshReductionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyChanges",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetLods",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ReductionOptions",
        "type": "FStaticMeshReductionOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetLodReductionSettings",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ReductionOptions",
        "type": "FMeshReductionSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetLodFromStaticMesh",
    "description": "",
    "parameters": [
      {
        "name": "DestinationStaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationLodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceStaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceLodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bReuseExistingMaterialSlots",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetLodBuildSettings",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BuildOptions",
        "type": "FMeshBuildSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetGenerateLightmapUVs",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bGenerateLightmapUVs",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetConvexDecompositionCollisionsWithNotification",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "HullCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxHullVerts",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HullPrecision",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyChanges",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetConvexDecompositionCollisions",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "HullCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxHullVerts",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HullPrecision",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "SetAllowCPUAccess",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowCPUAccess",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "RemoveUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannelIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "RemoveLods",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "RemoveCollisionsWithNotification",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyChanges",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "RemoveCollisions",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "ReimportAllCustomLODs",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "IsSectionCollisionEnabled",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "InsertUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannelIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "ImportLOD",
    "description": "",
    "parameters": [
      {
        "name": "BaseStaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "HasVertexColors",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "HasInstanceVertexColors",
    "description": "",
    "parameters": [
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetSimpleCollisionCount",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetNumUVChannels",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetNumberVerts",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetNumberMaterials",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetLodScreenSizes",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_number_"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetLodReductionSettings",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutReductionOptions",
        "type": "FMeshReductionSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetLodCount",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetLodBuildSettings",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBuildOptions",
        "type": "FMeshBuildSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetConvexCollisionCount",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GetCollisionComplexity",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GeneratePlanarUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannelIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Tiling",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GenerateCylindricalUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannelIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Tiling",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "GenerateBoxUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannelIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "EnableSectionCollision",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bCollisionEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "EnableSectionCastShadow",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bCastShadow",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "BulkSetConvexDecompositionCollisionsWithNotification",
    "description": "",
    "parameters": [
      {
        "name": "StaticMeshes",
        "type": "TArray_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "HullCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxHullVerts",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HullPrecision",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyChanges",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "BulkSetConvexDecompositionCollisions",
    "description": "",
    "parameters": [
      {
        "name": "StaticMeshes",
        "type": "TArray_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "HullCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxHullVerts",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HullPrecision",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "AddUVChannel",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "AddSimpleCollisionsWithNotification",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ShapeType",
        "type": "EScriptCollisionShapeType",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyChanges",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UDEPRECATED_EditorStaticMeshLibrary",
    "name": "AddSimpleCollisions",
    "description": "",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ShapeType",
        "type": "EScriptCollisionShapeType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SyncBrowserToObjects",
    "description": "Utility class to do most of the common functionalities with the ContentBrowser. The AssetRegistryHelpers class has more complex utilities. Use FindAssetData to get a FAssetData from an Asset Path. The Asset Path can be represented by ie. (Reference/Text Path)       StaticMesh'/Game/MyFolder/MyAsset.MyAsset' ie. (Full Name)                         StaticMesh /Game/MyFolder/MyAsset.MyAsset ie. (Path Name)                         /Game/MyFolder/MyAsset.MyAsset ie. (Package Name)                      /Game/MyFolder/MyAsset The Directory Path can be represented by ie. /Game/MyNewFolder/ ie. /Game/MyNewFolder All operations can be slow. The editor should not be in play in editor mode. It will not work on assets of the type level. Browses to the associated asset and selects it in the most recently used Content Browser (summoning one if necessary) This is an asynchronous operation that can take a couple of frames to resolve the request",
    "parameters": [
      {
        "name": "AssetPaths",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SetMetadataTag",
    "description": "Set the value associated with a given tag of a loaded asset's metadata.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SaveLoadedAssets",
    "description": "Save the packages the assets live in. All objects that live in the package will be saved. Will try to checkout the files.",
    "parameters": [
      {
        "name": "AssetsToSave",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyIfIsDirty",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SaveLoadedAsset",
    "description": "Save the packages the assets live in. All objects that live in the package will be saved. Will try to checkout the file.",
    "parameters": [
      {
        "name": "AssetToSave",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyIfIsDirty",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SaveDirectory",
    "description": "Save the packages the assets live in inside the directory. All objects that are in the directory will be saved. Will try to checkout the file first. Assets will be loaded before being saved.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyIfIsDirty",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bRecursive",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "SaveAsset",
    "description": "Save the packages the assets live in. All objects that live in the package will be saved. Will try to checkout the file first. The Asset will be loaded before being saved.",
    "parameters": [
      {
        "name": "AssetToSave",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyIfIsDirty",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "RenameLoadedAsset",
    "description": "Rename an asset from the Content Browser that is already loaded. Equivalent to a Move operation. Will try to checkout the files.",
    "parameters": [
      {
        "name": "SourceAsset",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "RenameDirectory",
    "description": "Rename assets from the Content Browser that are in the folder. Equivalent to a Move operation. Will try to checkout the files. The Assets will be loaded before being renamed.",
    "parameters": [
      {
        "name": "SourceDirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationDirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "RenameAsset",
    "description": "Rename an asset from the Content Browser. Equivalent to a Move operation. Will try to checkout the file. The Asset will be loaded before being renamed.",
    "parameters": [
      {
        "name": "SourceAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "RemoveMetadataTag",
    "description": "Remove the given tag from a loaded asset's metadata.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "MakeDirectory",
    "description": "Create the directory on disk and in the Content Browser.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "LoadBlueprintClass",
    "description": "Load a Blueprint asset from the Content Browser and return its generated class. It will verify if the object is already loaded and only load it if it's necessary.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "LoadAsset",
    "description": "Load an asset from the Content Browser. It will verify if the object is already loaded and only load it if it's necessary.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "ListAssets",
    "description": "Return the list of all the assets found in the DirectoryPath.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursive",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bIncludeFolder",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "ListAssetByTagValue",
    "description": "Return the list of all the assets that have the pair of Tag/Value.",
    "parameters": [
      {
        "name": "TagName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TagValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetTagValues",
    "description": "Gets all TagValues (from Asset Registry) associated with an (unloaded) asset as strings value.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__string_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetProjectRootAssetDirectory",
    "description": "Historically, all project assets were stored in the logical \"/Game/\" directory when using plugins or UEFN projects, we want to ease asset reuse, and so the ambiguous \"/Game/\" directory is untenable. This function will return the useful project name.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetPathNameForLoadedAsset",
    "description": "Return a valid AssetPath for a loaded asset. The asset need to be a valid asset in the Content Browser. Similar to GetPathName(). The format will be: /Game/MyFolder/MyAsset.MyAsset",
    "parameters": [
      {
        "name": "LoadedAsset",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetPackageForObject",
    "description": "Returns the object's containing package",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPackage"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetMetadataTagValues",
    "description": "Get all tags/values of a loaded asset's metadata.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__string_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "GetMetadataTag",
    "description": "Get the value associated with the given tag of a loaded asset's metadata.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "FindPackageReferencersForAsset",
    "description": "Find Package Referencers for an asset. Only Soft and Hard dependencies would be looked for. Soft are dependencies which don't need to be loaded for the object to be used. Had are dependencies which are required for correct usage of the source asset and must be loaded at the same time. Other references may exist. The asset may be currently used in memory by another asset, by the editor or by code. Package dependencies are cached with the asset. False positive can happen until all the assets are loaded and re-saved.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bLoadAssetsToConfirm",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "FindAssetData",
    "description": "Return the AssetData for the Asset that can then be used with the more complex lib AssetRegistryHelpers.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAssetData"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DuplicateLoadedAsset",
    "description": "Duplicate an asset from the Content Browser that is already loaded. Will try to checkout the file.",
    "parameters": [
      {
        "name": "SourceAsset",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DuplicateDirectory",
    "description": "Duplicate asset from the Content Browser that are in the folder. Will try to checkout the files. The Assets will be loaded before being duplicated.",
    "parameters": [
      {
        "name": "SourceDirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationDirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DuplicateAsset",
    "description": "Duplicate an asset from the Content Browser. Will try to checkout the file. The Asset will be loaded before being duplicated.",
    "parameters": [
      {
        "name": "SourceAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DoesDirectoryHaveAssets",
    "description": "Check if there any asset that exist in the directory.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursive",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DoesDirectoryExist",
    "description": "Check is the directory exist in the Content Browser.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DoesAssetExist",
    "description": "Check if the asset exists in the Content Browser.",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DoAssetsExist",
    "description": "Check if the assets exist in the Content Browser.",
    "parameters": [
      {
        "name": "AssetPaths",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DeleteLoadedAssets",
    "description": "Delete assets from the Content Browser that are already loaded. This is a Force Delete. It doesn't check if the assets have references in other Levels or by Actors. It will close all the asset editors and may clear the Transaction buffer (Undo History). Will try to mark the files as deleted.",
    "parameters": [
      {
        "name": "AssetsToDelete",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DeleteLoadedAsset",
    "description": "Delete an asset from the Content Browser that is already loaded. This is a Force Delete. It doesn't check if the asset has references in other Levels or by Actors. It will close all the asset editors and may clear the Transaction buffer (Undo History). Will try to mark the file as deleted.",
    "parameters": [
      {
        "name": "AssetToDelete",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DeleteDirectory",
    "description": "Delete the packages inside a directory. If the directory is then empty, delete the directory. This is a Force Delete. It doesn't check if the assets have references in other Levels or by Actors. It will close all the asset editors and may clear the Transaction buffer (Undo History). Will try to mark the file as deleted. Assets will be loaded before being deleted. The search is always recursive. It will try to delete the sub folders.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "DeleteAsset",
    "description": "Delete the package the assets live in. All objects that live in the package will be deleted. This is a Force Delete. It doesn't check if the asset has references in other Levels or by Actors. It will close all the asset editors and may clear the Transaction buffer (Undo History). Will try to mark the file as deleted. The Asset will be loaded before being deleted.",
    "parameters": [
      {
        "name": "AssetPathToDelete",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "ConsolidateAssets",
    "description": "Consolidates an asset by replacing all references/uses of the provided AssetsToConsolidate with references to AssetToConsolidateTo. This is useful when you want all references of assets to be replaced by a single asset. The function first attempts to directly replace all relevant references located within objects that are already loaded and in memory. Next, it deletes the AssetsToConsolidate, leaving behind object redirectors to AssetToConsolidateTo.",
    "parameters": [
      {
        "name": "AssetToConsolidateTo",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetsToConsolidate",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "CheckoutLoadedAssets",
    "description": "Checkout the assets from the Content Browser.",
    "parameters": [
      {
        "name": "AssetsToCheckout",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "CheckoutLoadedAsset",
    "description": "Checkout the asset from the Content Browser.",
    "parameters": [
      {
        "name": "AssetToCheckout",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "CheckoutDirectory",
    "description": "Checkout assets from the Content Browser. It will load the assets if needed. All objects that are in the directory will be checkout. Assets will be loaded before being checkout.",
    "parameters": [
      {
        "name": "DirectoryPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursive",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorAssetLibrary",
    "name": "CheckoutAsset",
    "description": "Checkout the asset from the Content Browser.",
    "parameters": [
      {
        "name": "AssetToCheckout",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorDialogLibrary",
    "name": "ShowSuppressableWarningDialog",
    "description": "Utility class to create simple pop-up dialogs to notify the user of task completion, or to ask them to make simple Yes/No/Retry/Cancel type decisions. Open a modal suppressable warning window, if suppressed will return the default value",
    "parameters": [
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InIniSettingName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InIniSettingFileNameOverride",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bDefaultValue",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorDialogLibrary",
    "name": "ShowObjectsDetailsView",
    "description": "Open a modal message box dialog containing a details view for inspecting / modifying multiples UObjects.",
    "parameters": [
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutObjects",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FEditorDialogLibraryObjectDetailsViewOptions",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorDialogLibrary",
    "name": "ShowObjectDetailsView",
    "description": "Open a modal message box dialog containing a details view for inspecting / modifying a UObject.",
    "parameters": [
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FEditorDialogLibraryObjectDetailsViewOptions",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorDialogLibrary",
    "name": "ShowMessage",
    "description": "Open a modal message box dialog with the given message. If running in \"-unattended\" mode it will immediately return the value specified by DefaultValue. If not running in \"-unattended\" mode then it will block execution until the user makes a decision, at which point their decision will be returned.",
    "parameters": [
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MessageType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MessageCategory",
        "type": "EAppMsgCategory",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "BySelection",
    "description": "Utility class to filter a list of objects. Object should be in the World Editor. Filter the array based on Object's selection.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByLevelName",
    "description": "Filter the array by Level the Actor belongs to.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByLayer",
    "description": "Filter the array by Layer the Actor belongs to.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "LayerName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByIDName",
    "description": "Filter the array based on the Object's ID name.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "NameSubString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StringMatch",
        "type": "EEditorScriptingStringMatchType",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByClass",
    "description": "Filter the array based on the Object's class.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByActorTag",
    "description": "Filter the array by Tag the Actor contains",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorFilterLibrary",
    "name": "ByActorLabel",
    "description": "Filter the array based on the Actor's label (what we see in the editor)",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "NameSubString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StringMatch",
        "type": "EEditorScriptingStringMatchType",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterType",
        "type": "EEditorScriptingFilterType",
        "optional": true,
        "out": false
      },
      {
        "name": "bIgnoreCase",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SpawnActorFromObject",
    "description": "Utility class to do most of the common functionalities in the World Editor. The editor should not be in play in editor mode.",
    "parameters": [
      {
        "name": "ObjectToUse",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bTransient",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SpawnActorFromClass",
    "description": "",
    "parameters": [
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bTransient",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SetSelectedLevelActors",
    "description": "",
    "parameters": [
      {
        "name": "ActorsToSelect",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SetLevelViewportCameraInfo",
    "description": "",
    "parameters": [
      {
        "name": "CameraLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SetCurrentLevelByName",
    "description": "",
    "parameters": [
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SetActorSelectionState",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBeSelected",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SaveCurrentLevel",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "SaveAllDirtyLevels",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ReplaceSelectedActors",
    "description": "Replaces the selected Actors with the same number of a different kind of Actor using the specified factory to spawn the new Actors note that only Location, Rotation, Drawscale, Drawscale3D, Tag, and Group are copied from the old Actors",
    "parameters": [
      {
        "name": "InAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ReplaceMeshComponentsMeshesOnActors",
    "description": "",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "MeshToBeReplaced",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ReplaceMeshComponentsMeshes",
    "description": "",
    "parameters": [
      {
        "name": "MeshComponents",
        "type": "TArray_UStaticMeshComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "MeshToBeReplaced",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ReplaceMeshComponentsMaterialsOnActors",
    "description": "",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialToBeReplaced",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "NewMaterial",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ReplaceMeshComponentsMaterials",
    "description": "",
    "parameters": [
      {
        "name": "MeshComponents",
        "type": "TArray_UMeshComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialToBeReplaced",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "NewMaterial",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "PilotLevelActor",
    "description": "",
    "parameters": [
      {
        "name": "ActorToPilot",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "NewLevelFromTemplate",
    "description": "",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TemplateAssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "NewLevel",
    "description": "",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "MergeStaticMeshActors",
    "description": "",
    "parameters": [
      {
        "name": "ActorsToMerge",
        "type": "TArray_AStaticMeshActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "MergeOptions",
        "type": "FMergeStaticMeshActorsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMergedActor",
        "type": "AStaticMeshActor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "LoadLevel",
    "description": "",
    "parameters": [
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "JoinStaticMeshActors",
    "description": "",
    "parameters": [
      {
        "name": "ActorsToJoin",
        "type": "TArray_AStaticMeshActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "JoinOptions",
        "type": "FJoinStaticMeshActorsOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetSelectedLevelActors",
    "description": "",
    "parameters": [],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetPIEWorlds",
    "description": "",
    "parameters": [
      {
        "name": "bIncludeDedicatedServer",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UWorld_"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetLevelViewportCameraInfo",
    "description": "",
    "parameters": [
      {
        "name": "CameraLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetGameWorld",
    "description": "",
    "parameters": [],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetEditorWorld",
    "description": "",
    "parameters": [],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetAllLevelActorsComponents",
    "description": "",
    "parameters": [],
    "returnType": "TArray_UActorComponent_"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetAllLevelActors",
    "description": "",
    "parameters": [],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "GetActorReference",
    "description": "",
    "parameters": [
      {
        "name": "PathToActor",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "EditorSetGameView",
    "description": "",
    "parameters": [
      {
        "name": "bGameView",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "DestroyActor",
    "description": "",
    "parameters": [
      {
        "name": "ActorToDestroy",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "CreateProxyMeshActor",
    "description": "",
    "parameters": [
      {
        "name": "ActorsToMerge",
        "type": "TArray_AStaticMeshActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "MergeOptions",
        "type": "FCreateProxyMeshActorOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMergedActor",
        "type": "AStaticMeshActor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelLibrary",
    "name": "ConvertActors",
    "description": "",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "APawn",
    "name": "GetMovementBaseActor",
    "description": "Pawn is the base class of all actors that can be possessed by players or AI. They are the physical representations of players and creatures in a level. Spawn default controller for this Pawn, and get possessed by it. Event called when the Pawn is no longer possessed by a Controller. Only called on the server (or in standalone) Event called after a pawn has been restarted, usually by a possession change. This is called on the server for all pawns and the owning client for player pawns Event called when the Pawn is possessed by a Controller. Only called on the server (or in standalone) Event called after a pawn's controller has changed, on the server and owning client. This will happen at the same time as the delegate on GameInstance Inform AIControllers that you've made a noise they might hear (they are sent a HearNoise message if they have bHearNoises==true) The instigator of this sound is the pawn which is used to call MakeNoise. PlayerState Replication Notification Callback Called when Controller is replicated Returns true if controlled by a human player (possessed by a PlayerController).        This returns true for players controlled by remote clients Check if this actor is currently being controlled at all (the actor has a valid Controller, which will be false for remote clients) Helper to see if move input is ignored. If our controller is a PlayerController, checks Controller->IsMoveInputIgnored(). Is this pawn the ViewTarget of a local PlayerController?  Helpful for determining whether the pawn is visible/critical for any VFX.  NOTE: Technically there may be some cases where locally controlled pawns return false for this, such as if you are using a remote camera view of some sort.  But generally it will be true for locally controlled pawns, and it will always be true for pawns that are being spectated in-game or in Replays. Returns true if controlled by a local (not network) Controller. Returns true if controlled by a bot. Returns the Platform User ID of the PlayerController that is controlling this character. Returns an invalid Platform User ID if this character is not controlled by a local player. Return the pending input vector in world space. This is the most up-to-date value of the input vector, pending ConsumeMovementInputVector() which clears it, Usually only a PawnMovementComponent will want to read this value, or the Pawn itself if it is responsible for movement. Basically retrieved pawn's location on navmesh Return our PawnMovementComponent, if we have one. Gets the owning actor of the Movement Base Component on which the pawn is standing.",
    "parameters": [
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationAssetExtensions",
    "name": "GetSkeleton",
    "description": "",
    "parameters": [
      {
        "name": "InAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeleton"
  },
  {
    "class": "UAnimationAttributeIdentifierExtensions",
    "name": "IsValid",
    "description": "Script-exposed functionality for wrapping native functionality and constructing valid FAnimationAttributeIdentifier instances",
    "parameters": [
      {
        "name": "Identifier",
        "type": "FAnimationAttributeIdentifier",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationAttributeIdentifierExtensions",
    "name": "CreateAttributeIdentifier",
    "description": "Constructs a valid FAnimationAttributeIdentifier instance. Ensuring that the underlying BoneName exists on the Skeleton for the provided AnimationAsset.",
    "parameters": [
      {
        "name": "AnimationAsset",
        "type": "UAnimationAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeType",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidateExistsOnAsset",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FAnimationAttributeIdentifier"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "SetCurveIdentifier",
    "description": "Script-exposed functionality for wrapping native functionality and constructing valid FAnimationCurveIdentifier instances Constructs a valid FAnimationCurveIdentifier instance.",
    "parameters": [
      {
        "name": "InOutIdentifier",
        "type": "FAnimationCurveIdentifier",
        "optional": false,
        "out": true
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "IsValid",
    "description": "",
    "parameters": [
      {
        "name": "Identifier",
        "type": "FAnimationCurveIdentifier",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "GetType",
    "description": "",
    "parameters": [
      {
        "name": "Identifier",
        "type": "FAnimationCurveIdentifier",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "ERawCurveTrackTypes"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "GetTransformChildCurveIdentifier",
    "description": "Converts a valid FAnimationCurveIdentifier instance with RCT_Transform curve type to target a child curve.",
    "parameters": [
      {
        "name": "InOutIdentifier",
        "type": "FAnimationCurveIdentifier",
        "optional": false,
        "out": true
      },
      {
        "name": "Channel",
        "type": "ETransformCurveChannel",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EVectorCurveChannel",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "GetName",
    "description": "",
    "parameters": [
      {
        "name": "Identifier",
        "type": "FAnimationCurveIdentifier",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "GetCurveIdentifiers",
    "description": "Retrieves all curve identifiers for a specific curve types from the provided Skeleton",
    "parameters": [
      {
        "name": "InSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FAnimationCurveIdentifier_"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "GetCurveIdentifier",
    "description": "",
    "parameters": [
      {
        "name": "InSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAnimationCurveIdentifier"
  },
  {
    "class": "UAnimationCurveIdentifierExtensions",
    "name": "FindCurveIdentifier",
    "description": "Tries to construct a valid FAnimationCurveIdentifier instance. It tries to find the underlying SmartName on the provided Skeleton for the provided curve type.",
    "parameters": [
      {
        "name": "InSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveType",
        "type": "ERawCurveTrackTypes",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAnimationCurveIdentifier"
  },
  {
    "class": "UAnimationDataModelNotifiesExtensions",
    "name": "GetPayload",
    "description": "",
    "parameters": [
      {
        "name": "Payload",
        "type": "FAnimDataModelNotifPayload",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEmptyPayload"
  },
  {
    "class": "UAnimationDataModelNotifiesExtensions",
    "name": "CopyPayload",
    "description": "",
    "parameters": [
      {
        "name": "Payload",
        "type": "FAnimDataModelNotifPayload",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedStruct",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPayload",
        "type": "FEmptyPayload",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAnimMontage",
    "name": "CreateSlotAnimationAsDynamicMontage_WithBlendSettings",
    "description": "Any property you're adding to AnimMontage and parent class has to be considered for Child Asset Child Asset is considered to be only asset mapping feature using everything else in the class For example, you can just use all parent's setting  for the montage, but only remap assets This isn't magic bullet unfortunately and it is consistent effort of keeping the data synced with parent If you add new property, please make sure those property has to be copied for children. If it does, please add the copy in the function RefreshParentAssetData Check if this slot has a valid additive animation for the specified slot. The slot name should not include the group name. i.e. for \"DefaultGroup.DefaultSlot\", the slot name is \"DefaultSlot\". Get SectionName from SectionIndex. Returns NAME_None if not found Get SectionIndex from SectionName. Returns INDEX_None if not found Returns the number of sections this montage has Get the Montage's Group Name. This is the group from the first slot. Utility function to create dynamic montage from AnimSequence with blend in settings",
    "parameters": [
      {
        "name": "Asset",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotNodeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendInSettings",
        "type": "FMontageBlendSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendOutSettings",
        "type": "FMontageBlendSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InPlayRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "LoopCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InBlendOutTriggerTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "NotifyStateReachedEnd",
    "description": "A library of commonly used functionality for Notifies, exposed to blueprint. Get whether the notify state reached the end (was not cancelled)",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "IsBlendingOut",
    "description": "Gets whether this notify comes from a source that is blending out.",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "GetCurrentAnimationTimeRatio",
    "description": "Get the current anim notify time as a ratio (0 -> 1) through the animation for when this notify was fired",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "GetCurrentAnimationTime",
    "description": "Get the current anim notify time in seconds for when this notify was fired",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "GetCurrentAnimationNotifyStateTimeRatio",
    "description": "Gets the current time as a ratio (0 -> 1) relative to the start of the notify state",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimNotifyLibrary",
    "name": "GetCurrentAnimationNotifyStateTime",
    "description": "Gets the current time in seconds relative to the start of the notify state, clamped to the range of the notify state notify state",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAnimNotifyMirrorInspectionLibrary",
    "name": "IsTriggeredByMirroredAnimation",
    "description": "A library of commonly used functionality for Notifies related to mirroring, exposed to blueprint. Get whether the animation which triggered this notify was mirrored.",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyMirrorInspectionLibrary",
    "name": "GetMirrorDataTable",
    "description": "If the notify is mirrored, return the mirror data table that was active.",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMirrorDataTable"
  },
  {
    "class": "UAnimNotifyStateMachineInspectionLibrary",
    "name": "IsTriggeredByStateMachine",
    "description": "A library of commonly used functionality for Notifies related to state machines, exposed to blueprint. Get whether the notify was triggered from the specified state machine",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "StateMachineName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyStateMachineInspectionLibrary",
    "name": "IsTriggeredByStateInStateMachine",
    "description": "Get whether a particular state in a specific state machine triggered the notify",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "StateMachineName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StateName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAnimNotifyStateMachineInspectionLibrary",
    "name": "IsTriggeredByState",
    "description": "Get whether a state with the given name in any state machine triggered the notify",
    "parameters": [
      {
        "name": "EventReference",
        "type": "FAnimNotifyEventReference",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "StateName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAsyncActionChangePrimaryAssetBundles",
    "name": "AsyncChangeBundleStateForPrimaryAssetList",
    "description": "Change the bundle state of specific assets in PrimaryAssetList. AddBundles are added to the final state and RemoveBundles are removed, an empty array will make no change. This will not change the loaded status of primary assets but will load or unload secondary assets based on the bundles.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryAssetList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": false
      },
      {
        "name": "AddBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "RemoveBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionChangePrimaryAssetBundles"
  },
  {
    "class": "UAsyncActionChangePrimaryAssetBundles",
    "name": "AsyncChangeBundleStateForMatchingPrimaryAssets",
    "description": "Change the bundle state of all assets that match OldBundles to instead contain NewBundles. This will not change the loaded status of primary assets but will load or unload secondary assets based on the bundles.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NewBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "OldBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionChangePrimaryAssetBundles"
  },
  {
    "class": "UAsyncActionHandleSaveGame",
    "name": "AsyncSaveGameToSlot",
    "description": "Async action to handle async load/save of a USaveGame. This can be subclassed by a specific game Schedule an async save to a specific slot. UGameplayStatics::AsyncSaveGameToSlot is the native version of this. When the save has succeeded or failed, the completed pin is activated with success/failure and the save game object. Keep in mind that some platforms may not support trying to load and save at the same time.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveGameObject",
        "type": "USaveGame",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionHandleSaveGame"
  },
  {
    "class": "UAsyncActionHandleSaveGame",
    "name": "AsyncLoadGameFromSlot",
    "description": "Schedule an async load of a specific slot. UGameplayStatics::AsyncLoadGameFromSlot is the native version of this. When the load has succeeded or failed, the completed pin is activated with success/failure and the newly loaded save game object if valid. Keep in mind that some platforms may not support trying to load and save at the same time.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionHandleSaveGame"
  },
  {
    "class": "UAsyncActionLoadPrimaryAsset",
    "name": "AsyncLoadPrimaryAsset",
    "description": "Load a primary asset object into memory, this will cause it to stay loaded until it is explicitly unloaded. The completed event will happen when the load succeeds or fails, you should cast the Loaded object to verify it is the correct type. If LoadBundles is specified, those bundles are loaded along with the asset.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryAsset",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "LoadBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionLoadPrimaryAsset"
  },
  {
    "class": "UAsyncActionLoadPrimaryAssetClass",
    "name": "AsyncLoadPrimaryAssetClass",
    "description": "Load a primary asset class  into memory, this will cause it to stay loaded until it is explicitly unloaded. The completed event will happen when the load succeeds or fails, you should cast the Loaded class to verify it is the correct type. If LoadBundles is specified, those bundles are loaded along with the asset.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryAsset",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "LoadBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionLoadPrimaryAssetClass"
  },
  {
    "class": "UAsyncActionLoadPrimaryAssetClassList",
    "name": "AsyncLoadPrimaryAssetClassList",
    "description": "Load a list of primary asset classes into memory, this will cause them to stay loaded until explicitly unloaded. The completed event will happen when the load succeeds or fails, and the Loaded list will contain all of the requested classes found at completion. If LoadBundles is specified, those bundles are loaded along with the assets.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryAssetList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": false
      },
      {
        "name": "LoadBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionLoadPrimaryAssetClassList"
  },
  {
    "class": "UAsyncActionLoadPrimaryAssetList",
    "name": "AsyncLoadPrimaryAssetList",
    "description": "Load a list of primary asset objects into memory, this will cause them to stay loaded until explicitly unloaded. The completed event will happen when the load succeeds or fails, and the Loaded list will contain all of the requested assets found at completion. If LoadBundles is specified, those bundles are loaded along with the assets.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryAssetList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": false
      },
      {
        "name": "LoadBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncActionLoadPrimaryAssetList"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "StringToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "String",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "StringArrayToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Strings",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "ObjectToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "ObjectArrayToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Objects",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "IntegerToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Integer",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "IntegerArrayToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Integers",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "FloatToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Float",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "FloatArrayToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Floats",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "BooleanToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Bool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UAudioParameterConversionStatics",
    "name": "BooleanArrayToAudioParameter",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Bools",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FAudioParameter"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "SetInstancedStructValue",
    "description": "Sets the value of InstancedStruct from the given source value.",
    "parameters": [
      {
        "name": "InstancedStruct",
        "type": "FInstancedStruct",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "Reset",
    "description": "Resets an InstancedStruct.",
    "parameters": [
      {
        "name": "InstancedStruct",
        "type": "FInstancedStruct",
        "optional": false,
        "out": true
      },
      {
        "name": "StructType",
        "type": "UScriptStruct",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "NotEqual_InstancedStruct",
    "description": "Checks whether two InstancedStructs are not equal.",
    "parameters": [
      {
        "name": "A",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "MakeInstancedStruct",
    "description": "Create a new InstancedStruct from the given source value.",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInstancedStruct"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "IsValid_InstancedStruct",
    "description": "Checks whether the InstancedStruct contains value.",
    "parameters": [
      {
        "name": "InstancedStruct",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "IsInstancedStructValid",
    "description": "Checks whether an InstancedStruct contains value.",
    "parameters": [
      {
        "name": "InstancedStruct",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EStructUtilsResult"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "GetInstancedStructValue",
    "description": "Retrieves data from an InstancedStruct if it matches the output type.",
    "parameters": [
      {
        "name": "ExecResult",
        "type": "EStructUtilsResult",
        "optional": false,
        "out": true
      },
      {
        "name": "InstancedStruct",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintInstancedStructLibrary",
    "name": "EqualEqual_InstancedStruct",
    "description": "Checks whether two InstancedStructs (and the values contained within) are equal.",
    "parameters": [
      {
        "name": "A",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FInstancedStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "SetMapPropertyByName",
    "description": "Not exposed to users. Supports setting a map property on an object by name.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Values",
    "description": "Outputs an array of all values present in the map",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Remove",
    "description": "Removes a key and its associated value from the map.",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Length",
    "description": "Determines the number of entries in a provided Map",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Keys",
    "description": "Outputs an array of all keys present in the map",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Keys",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_IsNotEmpty",
    "description": "Check if the map has any entries",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_IsEmpty",
    "description": "Check if the map does not have any entires",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Find",
    "description": "Finds the value associated with the provided Key",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Contains",
    "description": "Checks whether key is in a provided Map",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Clear",
    "description": "Clears a map of all entries, resetting it to empty",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintMapLibrary",
    "name": "Map_Add",
    "description": "Adds a key and value to the map. If something already uses the provided key it will be overwritten with the new value. After calling Key is guaranteed to be associated with Value until a subsequent mutation of the Map.",
    "parameters": [
      {
        "name": "TargetMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "VideoCaptureDir",
    "description": "Function library to expose FPaths to Blueprints and Python Function signatures are preserved for the most part with adjustments made to some signatures to better match Blueprints / Python workflow Returns the directory the engine uses to output user requested video capture files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ValidatePath",
    "description": "Validates that the parts that make up the path contain no invalid characters as dictated by the operating system Note that this is a different set of restrictions to those imposed by FPackageName",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bDidSucceed",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutReason",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "Split",
    "description": "Parses a fully qualified or relative filename into its components (filename, path, extension).",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PathPart",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "FilenamePart",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "ExtensionPart",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "SourceConfigDir",
    "description": "Returns the directory the engine uses to look for the source leaf ini files. This can't be an .ini variable for obvious reasons.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ShouldSaveToUserDir",
    "description": "Should the \"saved\" directory structures be rooted in the user dir or relative to the \"engine/game\"",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ShaderWorkingDir",
    "description": "Returns the Shader Working Directory",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "SetProjectFilePath",
    "description": "Sets the path to the project file.",
    "parameters": [
      {
        "name": "NewGameProjectFilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "SetExtension",
    "description": "Sets the extension of the given filename (like ChangeExtension, but also applies the extension if the file doesn't have one)",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InNewExtension",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ScreenShotDir",
    "description": "Returns the directory the engine uses to output screenshot files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "SandboxesDir",
    "description": "Returns the directory the engine stores sandbox output",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "RootDir",
    "description": "Returns the root directory of the engine directory tree",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "RemoveDuplicateSlashes",
    "description": "Removes duplicate slashes in paths. Assumes all slashes have been converted to TEXT('/'). For example, takes the string: BaseDirectory/SomeDirectory//SomeOtherDirectory////Filename.ext and converts it to: BaseDirectory/SomeDirectory/SomeOtherDirectory/Filename.ext",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectUserDir",
    "description": "Returns the root directory for user-specific game files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectSavedDir",
    "description": "Returns the saved directory of the current game by looking at FApp::GetProjectName().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectPluginsDir",
    "description": "Returns the plugins directory of the current game by looking at FApp::GetProjectName().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectPersistentDownloadDir",
    "description": "* Returns the writable directory for downloaded data that persists across play sessions.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectModsDir",
    "description": "Returns the mods directory of the current project by looking at FApp::GetProjectName().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectLogDir",
    "description": "Returns the directory the engine uses to output logs. This currently can't be an .ini setting as the game starts logging before it can read from .ini files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectIntermediateDir",
    "description": "Returns the intermediate directory of the current game by looking at FApp::GetProjectName().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectDir",
    "description": "Returns the base directory of the current project by looking at FApp::GetProjectName(). This is usually a subdirectory of the installation root directory and can be overridden on the command line to allow self contained mod support.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectContentDir",
    "description": "Returns the content directory of the current game by looking at FApp::GetProjectName().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProjectConfigDir",
    "description": "Returns the directory the root configuration files are located.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ProfilingDir",
    "description": "Returns the directory the engine uses to output profiling files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "NormalizeFilename",
    "description": "Convert all / and \\ to TEXT(\"/\")",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "NormalizeDirectoryName",
    "description": "Normalize all / and \\ to TEXT(\"/\") and remove any trailing TEXT(\"/\") if the character before that is not a TEXT(\"/\") or a colon",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "MakeValidFileName",
    "description": "Returns a string that is safe to use as a filename because all items in GetInvalidFileSystemChars() are removed Optionally specify the character to replace invalid characters with",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InReplacementChar",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "MakeStandardFilename",
    "description": "Make fully standard \"Unreal\" pathname: - Normalizes path separators [NormalizeFilename] - Removes extraneous separators  [NormalizeDirectoryName, as well removing adjacent separators] - Collapses internal ..'s - Makes relative to Engine\\Binaries\\<Platform> (will ALWAYS start with ..\\..\\..)",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "MakePlatformFilename",
    "description": "Takes an \"Unreal\" pathname and converts it to a platform filename.",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "MakePathRelativeTo",
    "description": "Assuming both paths (or filenames) are relative to the same base dir, converts InPath to be relative to InRelativeTo",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InRelativeTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "LaunchDir",
    "description": "Returns the directory the application was launched from (useful for commandline utilities)",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "IsSamePath",
    "description": "Checks if two paths are the same.",
    "parameters": [
      {
        "name": "PathA",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PathB",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "IsRestrictedPath",
    "description": "Determines if supplied path uses a restricted/internal subdirectory.  Note that slashes are normalized and character case is ignored for the comparison.",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "IsRelative",
    "description": "Returns true if this path is relative to another path",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "IsProjectFilePathSet",
    "description": "Checks whether the path to the project file, if any, is set.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "IsDrive",
    "description": "Returns true if this path represents a root drive or volume",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "HasProjectPersistentDownloadDir",
    "description": "* Returns true if a writable directory for downloaded data that persists across play sessions is available",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetToolTipLocalizationPaths",
    "description": "Returns a list of tool tip localization paths",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetRestrictedFolderNames",
    "description": "Returns a list of restricted/internal folder names (without any slashes) which may be tested against full paths to determine if a path is restricted or not.",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetRelativePathToRoot",
    "description": "Gets the relative path to get from BaseDir to RootDirectory",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetPropertyNameLocalizationPaths",
    "description": "Returns a list of property name localization paths",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetProjectFilePath",
    "description": "Gets the path to the project file.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetPath",
    "description": "Returns the path in front of the filename",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetInvalidFileSystemChars",
    "description": "Returns a string containing all invalid characters as dictated by the operating system",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetGameLocalizationPaths",
    "description": "Returns a list of game-specific localization paths",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetExtension",
    "description": "Gets the extension for this filename.",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeDot",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetEngineLocalizationPaths",
    "description": "Returns a list of engine-specific localization paths",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetEditorLocalizationPaths",
    "description": "Returns a list of editor-specific localization paths",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetCleanFilename",
    "description": "Returns the filename (with extension), minus any path information.",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GetBaseFilename",
    "description": "Returns the same thing as GetCleanFilename, but without the extension",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRemovePath",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GeneratedConfigDir",
    "description": "Returns the directory the engine saves generated config files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GameUserDeveloperDir",
    "description": "Returns the directory that contains developer-specific content for the current user",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GameSourceDir",
    "description": "Returns the directory where game source code files are kept",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GameDevelopersDir",
    "description": "Returns the directory that contains subfolders for developer-specific content",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "GameAgnosticSavedDir",
    "description": "Returns the saved directory that is not game specific. This is usually the same as EngineSavedDir().",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "FileExists",
    "description": "Returns true if this file was found, false otherwise",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "FeaturePackDir",
    "description": "Returns the directory where feature packs are kept",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EnterprisePluginsDir",
    "description": "Returns the enterprise plugins directory",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EnterpriseFeaturePackDir",
    "description": "Returns the enterprise FeaturePack directory",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EnterpriseDir",
    "description": "Returns the base directory enterprise directory.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineVersionAgnosticUserDir",
    "description": "Returns the root directory for user-specific engine files which can be shared between versions. Always writable.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineUserDir",
    "description": "Returns the root directory for user-specific engine files. Always writable.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineSourceDir",
    "description": "Returns the directory where engine source code files are kept",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineSavedDir",
    "description": "Returns the saved directory of the engine",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EnginePluginsDir",
    "description": "Returns the plugins directory of the engine",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineIntermediateDir",
    "description": "Returns the intermediate directory of the engine",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineDir",
    "description": "Returns the base directory of the \"core\" engine that can be shared across several games or across games & mods. Shaders and base localization files e.g. reside in the engine directory.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineContentDir",
    "description": "Returns the content directory of the \"core\" engine that can be shared across several games or across games & mods.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "EngineConfigDir",
    "description": "Returns the directory the root configuration files are located.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "DirectoryExists",
    "description": "Returns true if this directory was found, false otherwise",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "DiffDir",
    "description": "Returns the directory for temp files used for diffing",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "CreateTempFilename",
    "description": "Creates a temporary filename with the specified prefix.",
    "parameters": [
      {
        "name": "Path",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Extension",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ConvertToSandboxPath",
    "description": "Converts a normal path to a sandbox path (in Saved/Sandboxes).",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InSandboxName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ConvertRelativePathToFull",
    "description": "Converts a relative path name to a fully qualified name relative to the specified BasePath. BasePath will be the process BaseDir() if not BasePath is given",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InBasePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ConvertFromSandboxPath",
    "description": "Converts a sandbox (in Saved/Sandboxes) path to a normal path.",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InSandboxName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "Combine",
    "description": "Combine two or more Paths into one single Path",
    "parameters": [
      {
        "name": "InPaths",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "CollapseRelativeDirectories",
    "description": "Takes a fully pathed string and eliminates relative pathing (eg: annihilates \"..\" with the adjacent directory). Assumes all slashes have been converted to TEXT('/'). For example, takes the string: BaseDirectory/SomeDirectory/../SomeOtherDirectory/Filename.ext and converts it to: BaseDirectory/SomeOtherDirectory/Filename.ext",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "CloudDir",
    "description": "Returns the directory for local files used in cloud emulation or support",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "ChangeExtension",
    "description": "Changes the extension of the given filename (does nothing if the file has no extension)",
    "parameters": [
      {
        "name": "InPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InNewExtension",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "BugItDir",
    "description": "Returns the directory the engine uses to output BugIt files.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "AutomationTransientDir",
    "description": "Returns the directory for automation save files that are meant to be deleted every run",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "AutomationLogDir",
    "description": "Returns the directory for automation log files",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPathsLibrary",
    "name": "AutomationDir",
    "description": "Returns the directory for automation save files",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "SetAllowedDeviceOrientation",
    "description": "Set the allowed orientation of the device.",
    "parameters": [
      {
        "name": "NewAllowedDeviceOrientation",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "ScheduleLocalNotificationFromNow",
    "description": "Schedule a local notification to fire inSecondsFromNow from now",
    "parameters": [
      {
        "name": "inSecondsFromNow",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Body",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Action",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "ScheduleLocalNotificationBadgeFromNow",
    "description": "Schedule a local notification badge to fire inSecondsFromNow from now",
    "parameters": [
      {
        "name": "inSecondsFromNow",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "ScheduleLocalNotificationBadgeAtTime",
    "description": "Schedule a local notification badge at a specific time, inLocalTime specifies the current local time or if UTC time should be used",
    "parameters": [
      {
        "name": "FireDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalTime",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "ScheduleLocalNotificationAtTime",
    "description": "Schedule a local notification at a specific time, inLocalTime specifies the current local time or if UTC time should be used",
    "parameters": [
      {
        "name": "FireDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalTime",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Body",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Action",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "GetLaunchNotification",
    "description": "Get the local notification that was used to launch the app",
    "parameters": [
      {
        "name": "NotificationLaunchedApp",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "FireDate",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "GetDeviceOrientation",
    "description": "Returns the current orientation of the device: will be either Portrait, LandscapeLeft, PortraitUpsideDown or LandscapeRight.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "GetAllowedDeviceOrientation",
    "description": "Returns the allowed orientation of the device. This is NOT the same as GetDeviceOrientation, which only returns Portrait, LandscapeLeft, PortraitUpsideDown or LandscapeRight. The allowed orientation limits what orientation your device can have. So if you set the allowed orientation to LandscapeLeft, GetDeviceOrientation will only ever return LandscapeLeft. But if you set the allowed orientation to LandscapeSensor, you are actually restricting the allowed orientations to LandscapeLeft OR LandscapeRight (depending on the sensor), so GetDeviceOrientation might return LandscapeLeft OR LandscapeRight.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "ClearAllLocalNotifications",
    "description": "Clear all pending local notifications. Typically this will be done before scheduling new notifications when going into the background",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "CancelLocalNotificationById",
    "description": "Cancel a local notification given the ActivationEvent",
    "parameters": [
      {
        "name": "NotificationId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintPlatformLibrary",
    "name": "CancelLocalNotification",
    "description": "Cancel a local notification given the ActivationEvent",
    "parameters": [
      {
        "name": "ActivationEvent",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "SetSetPropertyByName",
    "description": "Not exposed to users. Supports setting a set property on an object by name.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Union",
    "description": "Assigns Result to the union of two sets, A and B. That is, Result will contain all elements that are in Set A and in addition all elements in Set B. Note that a Set is a collection of unique elements, so duplicates will be eliminated.",
    "parameters": [
      {
        "name": "A",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "TSet_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_ToArray",
    "description": "Outputs an Array containing copies of the entries of a Set.",
    "parameters": [
      {
        "name": "A",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_RemoveItems",
    "description": "Removes all elements in an Array from a set.",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Items",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Remove",
    "description": "Remove item from set. Output value indicates if something was actually removed. False indicates no equivalent item was found.",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Item",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Length",
    "description": "Get the number of items in a set.",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_IsNotEmpty",
    "description": "Check if the set has any elements",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_IsEmpty",
    "description": "Check if the set is empty",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Intersection",
    "description": "Assigns Result to the intersection of Set A and Set B. That is, Result will contain all elements that are in both Set A and Set B. To intersect with the empty set use Clear.",
    "parameters": [
      {
        "name": "A",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "TSet_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Difference",
    "description": "Assigns Result to the relative difference of two sets, A and B. That is, Result will contain  all elements that are in Set A but are not found in Set B. Note that the difference between two sets  is not commutative. The Set whose elements you wish to preserve should be the first (top) parameter. Also called the relative complement.",
    "parameters": [
      {
        "name": "A",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "TSet_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Contains",
    "description": "Returns true if the set contains the given item.",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ItemToFind",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Clear",
    "description": "Clear a set, removes all content.",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_AddItems",
    "description": "Adds all elements from an Array to a Set",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewItems",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintSetLibrary",
    "name": "Set_Add",
    "description": "Adds item to set",
    "parameters": [
      {
        "name": "TargetSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewItem",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertSetType",
    "description": "",
    "parameters": [
      {
        "name": "InSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSet_integer_"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertMapType",
    "description": "",
    "parameters": [
      {
        "name": "InMap",
        "type": "TMap_integer__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_integer__integer_"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector4fToFVector4d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector4dToFVector4f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector3fToFVector3d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector3dToFVector3f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector2fToFVector2d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFVector2dToFVector2f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFTransform3fToFTransform3d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFTransform3dToFTransform3f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFRotator3fToFRotator3d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFRotator3dToFRotator3f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFQuat4fToFQuat4d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFQuat4dToFQuat4f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFPlane4fToFPlane4d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFPlane4dToFPlane4f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFMatrix44fToFMatrix44d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFMatrix44dToFMatrix44f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFBox2fToFBox2d",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertFBox2dToFBox2f",
    "description": "",
    "parameters": [
      {
        "name": "InFromData",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintTypeConversions",
    "name": "ConvertArrayType",
    "description": "Container conversions",
    "parameters": [
      {
        "name": "InArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UBuiltInAttributesExtensions",
    "name": "AddTransformAttribute",
    "description": "",
    "parameters": [
      {
        "name": "AnimSequenceBase",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Keys",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "Values",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_IsStateRelevant",
    "description": "A library of commonly used functionality from the CachedAnimData family, exposed to blueprint. CachedAnimStateData **// Returns whether a state is relevant (specified in the provided FCachedAnimStateData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateData",
        "type": "FCachedAnimStateData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_IsRelevant",
    "description": "Returns true when the input state, or states, have any weight (specified in the provided FCachedAnimStateArray)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateArray",
        "type": "FCachedAnimStateArray",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_IsFullWeight",
    "description": "Returns true when the weight of the input state (or summed weight for multiple input states) is 1.0 of greater (specified in the provided FCachedAnimStateArray)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateArray",
        "type": "FCachedAnimStateArray",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetTotalWeight",
    "description": "CachedAnimStateArray **// Returns the summed weight of a state or states, relative to their state machine (specified in the provided FCachedAnimStateArray)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateArray",
        "type": "FCachedAnimStateArray",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetRelevantAnimTimeRemainingFraction",
    "description": "Gets the time to the end of the asset, as a fraction, of the most relevant asset player in the specified state (specified in the provided FCachedAnimRelevancyData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimRelevancyData",
        "type": "FCachedAnimRelevancyData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetRelevantAnimTimeRemaining",
    "description": "Gets the time to the end of the asset, in seconds, of the most relevant asset player in the specified state (specified in the provided FCachedAnimRelevancyData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimRelevancyData",
        "type": "FCachedAnimRelevancyData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetRelevantAnimTime",
    "description": "CachedAnimRelevancyData **// Gets the accumulated time, in seconds, of the most relevant asset player in the specified state (specified in the provided FCachedAnimRelevancyData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimRelevancyData",
        "type": "FCachedAnimRelevancyData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetLocalWeight",
    "description": "Returns the weight of a state, relative to its state machine (specified in the provided FCachedAnimStateData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateData",
        "type": "FCachedAnimStateData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetGlobalWeight",
    "description": "Returns the weight of a state, relative to the graph (specified in the provided FCachedAnimStateData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimStateData",
        "type": "FCachedAnimStateData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetCrossfadeDuration",
    "description": "CachedAnimTransitionData **// Gets the crossfade duration of the transition between the two input states. If multiple transition rules exist, the first will be returned (specified in the provided FCachedAnimTransitionData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimTransitionData",
        "type": "FCachedAnimTransitionData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetAssetPlayerTimeRatio",
    "description": "Gets the accumulated time, as a fraction, of the asset player in the specified state. Assumes only one player in the state (specified in the provided FCachedAnimAssetPlayerData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimAssetPlayerData",
        "type": "FCachedAnimAssetPlayerData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCachedAnimDataLibrary",
    "name": "StateMachine_GetAssetPlayerTime",
    "description": "CachedAnimAssetPlayerData **// Gets the accumulated time, in seconds, of the asset player in the specified state. Assumes only one player in the state (specified in the provided FCachedAnimAssetPlayerData)",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "CachedAnimAssetPlayerData",
        "type": "FCachedAnimAssetPlayerData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UCameraLensEffectInterfaceClassSupportLibrary",
    "name": "SetInterfaceClass",
    "description": "Set the represented class of the passed in variable. Note: Check the tooltips on the individual pins. You cannot bypass the validation by connecting a wires to this node!!",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Var",
        "type": "FCameraLensInterfaceClassSupport",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "EInterfaceValidResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraLensEffectInterfaceClassSupportLibrary",
    "name": "IsInterfaceValid",
    "description": "Evaluate the live interface to see if it is a valid reference.",
    "parameters": [
      {
        "name": "CameraLens",
        "type": "TScriptInterface_UCameraLensEffectInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EInterfaceValidResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraLensEffectInterfaceClassSupportLibrary",
    "name": "IsInterfaceClassValid",
    "description": "Check whether or not the interface class is valid",
    "parameters": [
      {
        "name": "CameraLens",
        "type": "FCameraLensInterfaceClassSupport",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EInterfaceValidResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraLensEffectInterfaceClassSupportLibrary",
    "name": "GetInterfaceClass",
    "description": "Returns the class represented by this lens effect wrapper...",
    "parameters": [
      {
        "name": "CameraLens",
        "type": "FCameraLensInterfaceClassSupport",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_AActor_"
  },
  {
    "class": "UCanvasRenderTarget2D",
    "name": "CreateCanvasRenderTarget2D",
    "description": "CanvasRenderTarget2D is 2D render target which exposes a Canvas interface to allow you to draw elements onto it directly.  Use CreateCanvasRenderTarget2D() to create a render target texture by unique name, then bind a function to the OnCanvasRenderTargetUpdate delegate which will be called when the render target is updated.  If you need to repaint your canvas every single frame, simply call UpdateResource() on it from a Tick function.  Also, remember to hold onto your new canvas render target with a reference so that it doesn't get garbage collected. Updates the the canvas render target texture's resource. This is where the render target will create or find a canvas object to use.  It also calls UpdateResourceImmediate() to clear the render target texture from the deferred rendering list, to stop the texture from being cleared the next frame. From there it will ask the rendering thread to set up the RHI viewport. The canvas is then set up for rendering and then the user's update delegate is called.  The canvas is then flushed and the RHI resolves the texture to make it available for rendering. Allows a Blueprint to implement how this Canvas Render Target 2D should be updated. Gets a specific render target's size from the global map of canvas render targets. Creates a new canvas render target and initializes it to the specified dimensions",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CanvasRenderTarget2DClass",
        "type": "TSubclassOf_UCanvasRenderTarget2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "ETextureRenderTargetSampleCount"
  },
  {
    "class": "UChaosBlueprintLibrary",
    "name": "GetEventRelayFromContext",
    "description": "",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UChaosEventRelay"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetProjectionParams",
    "description": "Sets projection parameters of the constraint @@param Accessor                                 Constraint accessor to change @@param bEnableProjection                true to enable projection @@param ProjectionLinearAlpha    how much linear projection to apply in [0,1] range @@param ProjectionAngularAlpha   how much angular projection to apply in [0,1] range",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableProjection",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ProjectionLinearAlpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ProjectionAngularAlpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetParentDominates",
    "description": "Sets whether the parent body is not affected by it's child motion @@param Accessor                         Constraint accessor to change @@param bParentDominates         true to avoid the parent being affected by its child motion",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bParentDominates",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetOrientationDriveTwistAndSwing",
    "description": "Enables/Disables angular orientation drive. Only relevant if the AngularDriveMode is set to Twist and Swing @@param Accessor                         Constraint accessor to change @@param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing @@param bEnableTwistDrive        Indicates whether the drive for the twist axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableTwistDrive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableSwingDrive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetOrientationDriveSLERP",
    "description": "Enables/Disables the angular orientation slerp drive. Only relevant if the AngularDriveMode is set to SLERP @@param Accessor                         Constraint accessor to change @@param bEnableSLERP                     Indicates whether the SLERP drive should be enabled. Only relevant if the AngularDriveMode is set to SLERP",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableSLERP",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetMassConditioningEnabled",
    "description": "",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableMassConditioning",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearVelocityTarget",
    "description": "Sets the target velocity for the linear drive. @@param Accessor                         Constraint accessor to change @@param InVelTarget                      Target velocity",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "InVelTarget",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearVelocityDrive",
    "description": "Enables/Disables linear velocity drive @@param Accessor                         Constraint accessor to change @@param bEnableDriveX            Indicates whether the drive for the X-Axis should be enabled @@param bEnableDriveY            Indicates whether the drive for the Y-Axis should be enabled @@param bEnableDriveZ            Indicates whether the drive for the Z-Axis should be enabled",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableDriveX",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableDriveY",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableDriveZ",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearSoftLimitParams",
    "description": "Sets Constraint Linear Soft Limit parameters @@param Accessor                                         Constraint accessor to change *     @@param bSoftLinearLimit                         True is the linear limit is soft @@param LinearLimitStiffness                     Stiffness of the soft linear limit. Only used when Soft limit is on ( positive value ) @@param LinearLimitDamping                       Damping of the soft linear limit. Only used when Soft limit is on ( positive value ) @@param LinearLimitRestitution               Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param LinearLimitContactDistance       Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftLinearLimit",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearLimitStiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearLimitDamping",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearLimitRestitution",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearPositionTarget",
    "description": "Sets the target position for the linear drive. @@param Accessor                         Constraint accessor to change @@param InPosTarget                      Target position",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "InPosTarget",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearPositionDrive",
    "description": "Enables/Disables linear position drive @@param Accessor                         Constraint accessor to change @@param bEnableDriveX            Indicates whether the drive for the X-Axis should be enabled @@param bEnableDriveY            Indicates whether the drive for the Y-Axis should be enabled @@param bEnableDriveZ            Indicates whether the drive for the Z-Axis should be enabled",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableDriveX",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableDriveY",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableDriveZ",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearPlasticity",
    "description": "Sets Constraint Linear Plasticity properties @@param Accessor                                         Constraint accessor to change @@param bLinearPlasticity                        Whether it is possible to reset the target position from the linear displacement @@param LinearPlasticityThreshold        Delta from target needed to reset the target joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bLinearPlasticity",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearPlasticityThreshold",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PlasticityType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearLimits",
    "description": "Sets Constraint Linear Motion Ranges @@param Accessor Constraint accessor to change @@param XMotion  Type of motion along the X axis @@param YMotion  Type of motion along the Y axis @@param ZMotion  Type of motion along the Z axis @@param Limit    linear limit to apply to all axis",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "XMotion",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "YMotion",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ZMotion",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Limit",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearDriveParams",
    "description": "Sets the drive params for the linear drive. @@param Accessor                         Constraint accessor to change @@param PositionStrength         Positional strength for the drive (stiffness) @@param VelocityStrength         Velocity strength of the drive (damping) @@param InForceLimit                     Max force applied by the drive",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "PositionStrength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityStrength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InForceLimit",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetLinearBreakable",
    "description": "Sets the Linear Breakable properties @@param Accessor                         Constraint accessor to change @@param bLinearBreakable         Whether it is possible to break the joint with linear force @@param LinearBreakThreshold     Force needed to break the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bLinearBreakable",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LinearBreakThreshold",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetDisableCollision",
    "description": "Sets whether bodies attched to the constraint can collide or not @@param Accessor                         Constraint accessor to change @@param bDisableCollision        true to disable collision between constrained bodies",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bDisableCollision",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetContactTransferScale",
    "description": "Set Contact Transfer Scale @@param Accessor                                         Constraint accessor to change @@param ContactTransferScale                     Set Contact Transfer Scale onto joints parent",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "ContactTransferScale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularVelocityTarget",
    "description": "Sets the target velocity for the angular drive. @@param Accessor                         Constraint accessor to change @@param InVelTarget                      Target velocity",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "InVelTarget",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularVelocityDriveTwistAndSwing",
    "description": "Enables/Disables angular velocity twist and swing drive. Only relevant if the AngularDriveMode is set to Twist and Swing @@param Accessor                         Constraint accessor to change @@param bEnableTwistDrive        Indicates whether the drive for the twist axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing @@param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableTwistDrive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableSwingDrive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularVelocityDriveSLERP",
    "description": "Enables/Disables the angular velocity slerp drive. Only relevant if the AngularDriveMode is set to SLERP @@param Accessor                         Constraint accessor to change @@param bEnableSLERP                     Indicates whether the SLERP drive should be enabled. Only relevant if the AngularDriveMode is set to SLERP",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableSLERP",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularSoftTwistLimitParams",
    "description": "Sets Constraint Angular Soft Twist Limit parameters @@param Accessor                                         Constraint accessor to change *     @@param bSoftTwistLimit                          True is the twist limit is soft @@param TwistLimitStiffness                      Stiffness of the soft Twist limit. Only used when Soft limit is on ( positive value ) @@param TwistLimitDamping                        Damping of the soft Twist limit. Only used when Soft limit is on ( positive value ) @@param TwistLimitRestitution                Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param TwistLimitContactDistance        Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftTwistLimit",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistLimitStiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistLimitDamping",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistLimitRestitution",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularSoftSwingLimitParams",
    "description": "Sets Constraint Angular Soft Swing Limit parameters @@param Accessor                                         Constraint accessor to change *     @@param bSoftSwingLimit                          True is the swing limit is soft @@param SwingLimitStiffness                      Stiffness of the soft swing limit. Only used when Soft limit is on ( positive value ) @@param SwingLimitDamping                        Damping of the soft swing limit. Only used when Soft limit is on ( positive value ) @@param SwingLimitRestitution                Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param SwingLimitContactDistance        Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftSwingLimit",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "SwingLimitStiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SwingLimitDamping",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SwingLimitRestitution",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SwingLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularPlasticity",
    "description": "Sets Constraint Angular Plasticity properties @@param Accessor                                         Constraint accessor to change @@param bAngularPlasticity                       Whether it is possible to reset the target angle from the angular displacement @@param AngularPlasticityThreshold       Degrees needed to reset the rest state of the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bAngularPlasticity",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "AngularPlasticityThreshold",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularOrientationTarget",
    "description": "Sets the target orientation for the angular drive. @@param Accessor                         Constraint accessor to change @@param InPosTarget                      Target orientation",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "InPosTarget",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularLimits",
    "description": "Sets COnstraint Angular Motion Ranges @@param Accessor                         Constraint accessor to change @@param Swing1MotionType         Type of swing motion ( first axis ) @@param Swing1LimitAngle         Size of limit in degrees in [0, 180] range @@param Swing2MotionType             Type of swing motion ( second axis ) @@param Swing2LimitAngle         Size of limit in degrees in [0, 180] range @@param TwistMotionType              Type of twist motion @@param TwistLimitAngle          Size of limit in degrees in [0, 180] range",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "Swing1MotionType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Swing1LimitAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Swing2MotionType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Swing2LimitAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistMotionType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistLimitAngle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularDriveParams",
    "description": "Sets the drive params for the angular drive. @@param Accessor                         Constraint accessor to change @@param PositionStrength         Positional strength for the drive (stiffness) @@param VelocityStrength         Velocity strength of the drive (damping) @@param InForceLimit                     Max force applied by the drive",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "PositionStrength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityStrength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InForceLimit",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularDriveMode",
    "description": "Switches the angular drive mode between SLERP and Twist And Swing @@param Accessor         Constraint accessor to change @@param DriveMode        The angular drive mode to use. SLERP uses shortest spherical path, but will not work if any angular constraints are locked. Twist and Swing decomposes the path into the different angular degrees of freedom but may experience gimbal lock",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "DriveMode",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "SetAngularBreakable",
    "description": "Sets Constraint Angular Breakable properties @@param Accessor                                 Constraint accessor to change @@param bAngularBreakable                Whether it is possible to break the joint with angular force @@param AngularBreakThreshold    Torque needed to break the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bAngularBreakable",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "AngularBreakThreshold",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetProjectionParams",
    "description": "Gets projection parameters of the constraint @@param Accessor                                 Constraint accessor to query @@param bEnableProjection                true to enable projection @@param ProjectionLinearAlpha    how much linear projection to apply in [0,1] range @@param ProjectionAngularAlpha   how much angular projection to apply in [0,1] range",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bEnableProjection",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ProjectionLinearAlpha",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "ProjectionAngularAlpha",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetParentDominates",
    "description": "Gets whether the parent body is not affected by it's child motion @@param Accessor Constraint accessor to query",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetOrientationDriveTwistAndSwing",
    "description": "Gets whether angular orientation drive are enabled. Only relevant if the AngularDriveMode is set to Twist and Swing @@param Accessor                         Constraint accessor to query @@param bOutEnableTwistDrive     Indicates whether the drive for the twist axis is enabled. Only relevant if the AngularDriveMode is set to Twist and Swing @@param bOutEnableSwingDrive     Indicates whether the drive for the swing axis is enabled. Only relevant if the AngularDriveMode is set to Twist and Swing",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableTwistDrive",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableSwingDrive",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetOrientationDriveSLERP",
    "description": "Gets whether the angular orientation slerp drive is enabled or not. Only relevant if the AngularDriveMode is set to SLERP @@param Accessor                         Constraint accessor to query @@param bOutEnableSLERP          Indicates whether the SLERP drive should be enabled. Only relevant if the AngularDriveMode is set to SLERP",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableSLERP",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetMassConditioningEnabled",
    "description": "",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearVelocityTarget",
    "description": "Gets the target velocity for the linear drive. @@param Accessor                         Constraint accessor to query @@param OutVelTarget                     Target velocity",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutVelTarget",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearVelocityDrive",
    "description": "Gets whether linear velocity drive is enabled or not @@param Accessor                         Constraint accessor to query @@param bOutEnableDriveX         Indicates whether the drive for the X-Axis is enabled @@param bOutEnableDriveY         Indicates whether the drive for the Y-Axis is enabled @@param bOutEnableDriveZ         Indicates whether the drive for the Z-Axis is enabled",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveX",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveY",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveZ",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearSoftLimitParams",
    "description": "Gets Constraint Linear Soft Limit parameters @@param Accessor                                         Constraint accessor to query *     @@param bSoftLinearLimit                         True is the Linear limit is soft @@param LinearLimitStiffness                     Stiffness of the soft Linear limit. Only used when Soft limit is on ( positive value ) @@param LinearLimitDamping                       Damping of the soft Linear limit. Only used when Soft limit is on ( positive value ) @@param LinearLimitRestitution               Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param LinearLimitContactDistance       Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftLinearLimit",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearLimitStiffness",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearLimitDamping",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearLimitRestitution",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearPositionTarget",
    "description": "Gets the target position for the linear drive. @@param Accessor                         Constraint accessor to query @@param OutPosTarget                     Target position",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPosTarget",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearPositionDrive",
    "description": "Gets whether linear position drive is enabled or not @@param Accessor                         Constraint accessor to query @@param bOutEnableDriveX         Indicates whether the drive for the X-Axis is enabled @@param bOutEnableDriveY         Indicates whether the drive for the Y-Axis is enabled @@param bOutEnableDriveZ         Indicates whether the drive for the Z-Axis is enabled",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveX",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveY",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableDriveZ",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearPlasticity",
    "description": "Gets Constraint Linear Plasticity properties @@param Accessor                                         Constraint accessor to query @@param bAngularPlasticity                       Whether it is possible to reset the target position from the linear displacement @@param AngularPlasticityThreshold       Delta from target needed to reset the target joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bLinearPlasticity",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearPlasticityThreshold",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "PlasticityType",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearLimits",
    "description": "Gets Constraint Linear Motion Ranges @@param Accessor Constraint accessor to query @@param XMotion  Type of motion along the X axis @@param YMotion  Type of motion along the Y axis @@param ZMotion  Type of motion along the Z axis @@param Limit    linear limit applied to all axis",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "XMotion",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "YMotion",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "ZMotion",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Limit",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearDriveParams",
    "description": "Gets the drive params for the linear drive. @@param Accessor                         Constraint accessor to query @@param OutPositionStrength      Positional strength for the drive (stiffness) @@param OutVelocityStrength      Velocity strength of the drive (damping) @@param OutForceLimit            Max force applied by the drive",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPositionStrength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutVelocityStrength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutForceLimit",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetLinearBreakable",
    "description": "Gets Constraint Linear Breakable properties @@param Accessor                         Constraint accessor to query @@param bLinearBreakable         Whether it is possible to break the joint with linear force @@param LinearBreakThreshold     Force needed to break the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bLinearBreakable",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearBreakThreshold",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetDisableCollsion",
    "description": "Gets whether bodies attched to the constraint can collide or not @@param Accessor         Constraint accessor to query",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetContactTransferScale",
    "description": "Gets Constraint Contact Transfer Scale properties @@param Accessor                                         Constraint accessor to query @@param ContactTransferScale                     Scale for transfer of child energy to parent.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "ContactTransferScale",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAttachedBodyNames",
    "description": "Gets Attached body names @@param Accessor         Constraint accessor to query @@param ParentBody       Parent body name of the constraint @@param ChildBody        Child body name of the constraint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "ParentBody",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "ChildBody",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularVelocityTarget",
    "description": "Gets the target velocity for the angular drive. @@param Accessor                         Constraint accessor to query @@param OutVelTarget                     Target velocity",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutVelTarget",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularVelocityDriveTwistAndSwing",
    "description": "Gets whether angular velocity twist and swing drive is enabled or not. Only relevant if the AngularDriveMode is set to Twist and Swing @@param Accessor                         Constraint accessor to query @@param bOutEnableTwistDrive     Indicates whether the drive for the twist axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing @@param bOutEnableSwingDrive Indicates whether the drive for the swing axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableTwistDrive",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableSwingDrive",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularVelocityDriveSLERP",
    "description": "Gets whether the angular velocity slerp drive is enabled or not. Only relevant if the AngularDriveMode is set to SLERP @@param Accessor                         Constraint accessor to query @@param bOutEnableSLERP          Indicates whether the SLERP drive is enabled. Only relevant if the AngularDriveMode is set to SLERP",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bOutEnableSLERP",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularSoftTwistLimitParams",
    "description": "Gets Constraint Angular Soft Twist Limit parameters @@param Accessor                                         Constraint accessor to query *     @@param bSoftTwistLimit                          True is the Twist limit is soft @@param TwistLimitStiffness                      Stiffness of the soft Twist limit. Only used when Soft limit is on ( positive value ) @@param TwistLimitDamping                        Damping of the soft Twist limit. Only used when Soft limit is on ( positive value ) @@param TwistLimitRestitution                Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param TwistLimitContactDistance        Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftTwistLimit",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistLimitStiffness",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistLimitDamping",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistLimitRestitution",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularSoftSwingLimitParams",
    "description": "Gets Constraint Angular Soft Swing Limit parameters @@param Accessor                                         Constraint accessor to query *     @@param bSoftSwingLimit                          True is the swing limit is soft @@param SwingLimitStiffness                      Stiffness of the soft swing limit. Only used when Soft limit is on ( positive value ) @@param SwingLimitDamping                        Damping of the soft swing limit. Only used when Soft limit is on ( positive value ) @@param SwingLimitRestitution                Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead. @@param SwingLimitContactDistance        Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bSoftSwingLimit",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "SwingLimitStiffness",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SwingLimitDamping",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SwingLimitRestitution",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SwingLimitContactDistance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularPlasticity",
    "description": "Sets Constraint Angular Plasticity properties @@param Accessor                                         Constraint accessor to query @@param bAngularPlasticity                       Whether it is possible to reset the target angle from the angular displacement @@param AngularPlasticityThreshold       Degrees needed to reset the rest state of the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bAngularPlasticity",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "AngularPlasticityThreshold",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularOrientationTarget",
    "description": "Gets the target orientation for the angular drive. @@param Accessor                         Constraint accessor to query @@param OutPosTarget                     Target orientation",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPosTarget",
        "type": "FRotator",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularLimits",
    "description": "Gets Constraint Angular Motion Ranges @@param Accessor                         Constraint accessor to query @@param Swing1MotionType         Type of swing motion ( first axis ) @@param Swing1LimitAngle         Size of limit in degrees in [0, 180] range @@param Swing2MotionType             Type of swing motion ( second axis ) @@param Swing2LimitAngle         Size of limit in degrees in [0, 180] range @@param TwistMotionType              Type of twist motion @@param TwistLimitAngle          Size of limit in degrees in [0, 180] range",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "Swing1MotionType",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Swing1LimitAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Swing2MotionType",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Swing2LimitAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistMotionType",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "TwistLimitAngle",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularDriveParams",
    "description": "Gets the drive params for the angular drive. @@param Accessor                         Constraint accessor to query @@param OutPositionStrength      Positional strength for the drive (stiffness) @@param OutVelocityStrength      Velocity strength of the drive (damping) @@param OutForceLimit            Max force applied by the drive",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPositionStrength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutVelocityStrength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutForceLimit",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularDriveMode",
    "description": "Gets the angular drive mode ( SLERP or Twist And Swing) @@param Accessor         Constraint accessor to query @@param OutDriveMode     The angular drive mode to use. SLERP uses shortest spherical path, but will not work if any angular constraints are locked. Twist and Swing decomposes the path into the different angular degrees of freedom but may experience gimbal lock",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutDriveMode",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "GetAngularBreakable",
    "description": "Gets Constraint Angular Breakable properties @@param Accessor                                 Constraint accessor to query @@param bAngularBreakable                Whether it is possible to break the joint with angular force @@param AngularBreakThreshold    Torque needed to break the joint",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bAngularBreakable",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "AngularBreakThreshold",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UConstraintInstanceBlueprintLibrary",
    "name": "CopyParams",
    "description": "Copies all properties from one constraint to another",
    "parameters": [
      {
        "name": "Accessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "SourceAccessor",
        "type": "FConstraintInstanceAccessor",
        "optional": false,
        "out": true
      },
      {
        "name": "bKeepPosition",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bKeepRotation",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "RemoveDataTableRow",
    "description": "Removes the row with the provided name from a Data Table.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "RowName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableRowStruct",
    "description": "Get the row struct used by the given Data Table, if any",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UScriptStruct"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableRowNames",
    "description": "",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRowNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableRowFromName",
    "description": "Get a Row from a DataTable given a RowName",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "RowName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRow",
        "type": "FTableRowBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableColumnNames",
    "description": "Get the name of each column in this Data Table.",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "OutColumnNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableColumnNameFromExportName",
    "description": "Get the raw property name of a data table column from its friendly export name.",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "ColumnExportName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutColumnName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableColumnExportNames",
    "description": "Get the friendly export name of each column in this Data Table.",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "OutExportColumnNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableColumnAsString",
    "description": "Export from the DataTable all the row for one column. Export it as string. The row name is not included.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "FillDataTableFromJSONString",
    "description": "Empty and fill a Data Table from JSON string.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "JSONString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportRowStruct",
        "type": "UScriptStruct",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "FillDataTableFromJSONFile",
    "description": "Empty and fill a Data Table from JSON file.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "JSONFilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportRowStruct",
        "type": "UScriptStruct",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "FillDataTableFromCSVString",
    "description": "Empty and fill a Data Table from CSV string.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "CSVString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportRowStruct",
        "type": "UScriptStruct",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "FillDataTableFromCSVFile",
    "description": "Empty and fill a Data Table from CSV file.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "CSVFilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportRowStruct",
        "type": "UScriptStruct",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "ExportDataTableToJSONString",
    "description": "Export a Data Table to JSON string.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJSONString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "ExportDataTableToJSONFile",
    "description": "Export a Data Table to JSON file.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "JSONFilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "ExportDataTableToCSVString",
    "description": "Export a Data Table to CSV string.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCSVString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "ExportDataTableToCSVFile",
    "description": "Export a Data Table to CSV file.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "CSVFilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "EvaluateCurveTableRow",
    "description": "",
    "parameters": [
      {
        "name": "CurveTable",
        "type": "UCurveTable",
        "optional": false,
        "out": false
      },
      {
        "name": "RowName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InXY",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResult",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutXY",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "ContextString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "DoesDataTableRowExist",
    "description": "Returns whether or not Table contains a row named RowName",
    "parameters": [
      {
        "name": "Table",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "RowName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "AddDataTableRow",
    "description": "Add a row to a Data Table with the provided name and data.",
    "parameters": [
      {
        "name": "DataTable",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "RowName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RowData",
        "type": "FTableRowBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetTableDataRowFromName",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "P2",
        "type": "lightuserdata",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UDataTableFunctionLibrary",
    "name": "GetDataTableRowFromName",
    "description": "",
    "parameters": [
      {
        "name": "P0",
        "type": "UDataTable",
        "optional": false,
        "out": false
      },
      {
        "name": "P1",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "P2",
        "type": "lightuserdata",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorFlagCollector",
    "name": "GetFlagNames",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UEngineElementsLibrary",
    "name": "K2_AcquireEditorSMInstanceElementHandle",
    "description": "",
    "parameters": [
      {
        "name": "ISMComponent",
        "type": "UInstancedStaticMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InstanceIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowCreate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementHandle"
  },
  {
    "class": "UEngineElementsLibrary",
    "name": "K2_AcquireEditorObjectElementHandle",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowCreate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementHandle"
  },
  {
    "class": "UEngineElementsLibrary",
    "name": "K2_AcquireEditorComponentElementHandle",
    "description": "",
    "parameters": [
      {
        "name": "Component",
        "type": "UActorComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowCreate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementHandle"
  },
  {
    "class": "UEngineElementsLibrary",
    "name": "K2_AcquireEditorActorElementHandle",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowCreate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementHandle"
  },
  {
    "class": "UExporter",
    "name": "RunAssetExportTasks",
    "description": "Export the given object to file.  Overridden by script based exporters. Export the given objects to files.  Child classes do not override this, but they do provide an Export() function to do the resource-specific export work.",
    "parameters": [
      {
        "name": "ExportTasks",
        "type": "TArray_UAssetExportTask_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UExporter",
    "name": "RunAssetExportTask",
    "description": "Export the given object to file.  Child classes do not override this, but they do provide an Export() function to do the resource-specific export work.",
    "parameters": [
      {
        "name": "Task",
        "type": "UAssetExportTask",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UFieldNotificationLibrary",
    "name": "SetPropertyValueAndBroadcastFields",
    "description": "The Field Notification system allows a user to know when a property value is modified at runtime (note that it can be a function return value). The class needs to implement the INotifyFieldValueChanged interface. The property' setter  usually follows this pattern \"if (new value != old value) assign the new value; broadcast that the value changed;\". The Blueprint implementation handles that setter logic automatically with SetPropertyValueAndBroadcast. When a property value is modified by replication, the RepNotify will call BroadcastFieldValueChanged. A function can also be a Field Notify. The function needs to be const and return a single value.",
    "parameters": [
      {
        "name": "NewValueByRef",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OldValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NetOwner",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasLocalRepNotify",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldFlushDormancyOnSet",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsNetProperty",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ExtraFieldIds",
        "type": "TArray_FFieldNotificationId_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UFieldNotificationLibrary",
    "name": "SetPropertyValueAndBroadcast",
    "description": "",
    "parameters": [
      {
        "name": "NewValueByRef",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OldValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NetOwner",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasLocalRepNotify",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldFlushDormancyOnSet",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsNetProperty",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UFieldNotificationLibrary",
    "name": "BroadcastFieldValueChanged",
    "description": "Broadcast that the Field value changed.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldId",
        "type": "FFieldNotificationId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UFieldNotificationLibrary",
    "name": "BroadcastFieldsValueChanged",
    "description": "Broadcast that a list of Field values changed.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldIds",
        "type": "TArray_FFieldNotificationId_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "UnRetainAllSoundsInSoundClass",
    "description": "Static class with useful gameplay utility functions that can be called from both Blueprint and C++ Iterate through all sound waves and releases handles to retained chunks. (If the chunk is not being played it will be up for eviction)",
    "parameters": [
      {
        "name": "InSoundClass",
        "type": "USoundClass",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "UnloadStreamLevelBySoftObjectPtr",
    "description": "Unload a streamed in level (by Object Reference)",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Level",
        "type": "TSoftObjectPtr_UWorld_",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBlockOnUnload",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "UnloadStreamLevel",
    "description": "Unload a streamed in level (by Name)",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBlockOnUnload",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "TransformWorldToFirstPerson",
    "description": "Transforms a world space location into \"first person space\". This function mirrors the morphing that is applied to first person primitives when they are rendered on the GPU, so it can be used for spawning objects (e.g. projectiles or ejected shell casings) relative to the morphed first person geometry on screen.",
    "parameters": [
      {
        "name": "ViewInfo",
        "type": "FMinimalViewInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnoreFirstPersonScale",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGameplayStatics",
    "name": "SuggestProjectileVelocity_MovingTarget",
    "description": "Returns a launch velocity need for a projectile to hit the TargetActor in TimeToTarget seconds based on the TargetActor's current velocity. This assumes the projectile is only accelerated by gravity (i.e. no outside forces), and that the TargetActor is moving at a constant velocity.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OutLaunchVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "ProjectileStartLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocationOffset",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "GravityZOverride",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TimeToTarget",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawDebugTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawDebugColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "SuggestProjectileVelocity_CustomArc",
    "description": "Returns the launch velocity needed for a projectile at rest at StartPos to land on EndPos. Assumes a medium arc (e.g. 45 deg on level ground). Projectile velocity is variable and unconstrained. Does no tracing.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OutLaunchVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "StartPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideGravityZ",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ArcParam",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnSoundAttached",
    "description": "This function allows users to create and play Audio Components attached to a specific Scene Component. Useful for spatialized and/or distance-attenuated sounds that need to follow another object in space. the attach component/point or an absolute world position that will be translated to a relative offset the attach component/point or an absolute world rotation that will be translated to a relative offset owner of the attach to component is destroyed. (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopWhenAttachedToDestroyed",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnSoundAtLocation",
    "description": "Spawns a sound at the given location. This does not travel with any actor. Replication is also not handled at this point. (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnSound2D",
    "description": "This function allows users to create Audio Components with settings specifically for non-spatialized, non-distance-attenuated sounds. Audio Components created using this function by default will not have Spatialization applied. Sound instances will begin playing upon spawning this Audio Component. * Not Replicated. (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "bPersistAcrossLevelTransition",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnObject",
    "description": "Create Object",
    "parameters": [
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Outer",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnForceFeedbackAttached",
    "description": "Plays a force feedback effect attached to and following the specified component. This is a fire and forget effect. Replication is also not handled at this point.",
    "parameters": [
      {
        "name": "ForceFeedbackEffect",
        "type": "UForceFeedbackEffect",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopWhenAttachedToDestroyed",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bLooping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IntensityMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "UForceFeedbackAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UForceFeedbackComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnForceFeedbackAtLocation",
    "description": "Plays a force feedback effect at the given location. This is a fire and forget effect and does not travel with any actor. Replication is also not handled at this point.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ForceFeedbackEffect",
        "type": "UForceFeedbackEffect",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bLooping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IntensityMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "UForceFeedbackAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UForceFeedbackComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnEmitterAttached",
    "description": "Plays the specified effect attached to and following the specified component. The system will go away when the effect is complete. Does not replicate.",
    "parameters": [
      {
        "name": "EmitterTemplate",
        "type": "UParticleSystem",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "PoolingMethod",
        "type": "EPSCPoolMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoActivate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UParticleSystemComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnEmitterAtLocation",
    "description": "Plays the specified effect at the given location and rotation, fire and forget. The system will go away when the effect is complete. Does not replicate.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "EmitterTemplate",
        "type": "UParticleSystem",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "PoolingMethod",
        "type": "EPSCPoolMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoActivateSystem",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UParticleSystemComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnDialogueAttached",
    "description": "Spawns a DialogueWave, a special type of Asset that requires Context data in order to resolve a specific SoundBase, which is then passed on to the new Audio Component. This function allows users to create and play Audio Components attached to a specific Scene Component. Useful for spatialized and/or distance-attenuated dialogue that needs to follow another object in space. attach component/point or an absolute world position that will be translated to a relative offset attach component/point or an absolute world rotation that will be translated to a relative offset to is destroyed. (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "Dialogue",
        "type": "UDialogueWave",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDialogueContext",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopWhenAttachedToDestroyed",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnDialogueAtLocation",
    "description": "Spawns a DialogueWave, a special type of Asset that requires Context data in order to resolve a specific SoundBase, which is then passed on to the new Audio Component. This function allows users to create and play Audio Components at a specific World Location and Rotation. Useful for spatialized and/or distance-attenuated dialogue. (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Dialogue",
        "type": "UDialogueWave",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDialogueContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnDialogue2D",
    "description": "Spawns a DialogueWave, a special type of Asset that requires Context data in order to resolve a specific SoundBase, which is then passed on to the new Audio Component. Audio Components created using this function by default will not have Spatialization applied. Sound instances will begin playing upon spawning this Audio Component. * Not Replicated. finishes (by completing or stopping) or whether it can be reactivated",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Dialogue",
        "type": "UDialogueWave",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDialogueContext",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnDecalAttached",
    "description": "Spawns a decal attached to and following the specified component. Does not replicate.",
    "parameters": [
      {
        "name": "DecalMaterial",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "DecalSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "LifeSpan",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDecalComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SpawnDecalAtLocation",
    "description": "Spawns a decal at the given location and rotation, fire and forget. Does not replicate.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DecalMaterial",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "DecalSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": true,
        "out": false
      },
      {
        "name": "LifeSpan",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDecalComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetWorldOriginLocation",
    "description": "Requests a new location for a world origin.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NewLocation",
        "type": "FIntVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetViewportMouseCaptureMode",
    "description": "Sets the current viewport mouse capture mode",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "MouseCaptureMode",
        "type": "EMouseCaptureMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetSubtitlesEnabled",
    "description": "Will set subtitles to be enabled or disabled.",
    "parameters": [
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetSoundMixClassOverride",
    "description": "Overrides the sound class adjuster in the given sound mix. If the sound class does not exist in the input sound mix, the sound class adjuster will be added to the list of active sound mix modifiers.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundMixModifier",
        "type": "USoundMix",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundClass",
        "type": "USoundClass",
        "optional": false,
        "out": false
      },
      {
        "name": "Volume",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Pitch",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FadeInTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bApplyToChildren",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetSoundClassDistanceScale",
    "description": "Linearly interpolates the attenuation distance scale value from it's current attenuation distance override value (1.0f it not overridden) to its new attenuation distance override, over the given amount of time * Fire and Forget. * Not Replicated.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoundClass",
        "type": "USoundClass",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceAttenuationScale",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeSec",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetPlayerPlatformUserId",
    "description": "Sets what platform user id a player should be using. This only works for local player controllers.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetPlayerControllerID",
    "description": "Sets what physical controller ID a player should be using. This only works for local player controllers.",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetMaxAudioChannelsScaled",
    "description": "Sets the max number of voices (also known as \"channels\") dynamically by percentage. E.g. if you want to temporarily reduce voice count by 50%, use 0.50. Later, you can return to the original max voice count by using 1.0.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxChannelCountScale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetGlobalTimeDilation",
    "description": "Sets the global time dilation.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeDilation",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetGlobalPitchModulation",
    "description": "Sets a global pitch modulation scalar that will apply to all non-UI sounds * Fire and Forget. * Not Replicated.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PitchModulation",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeSec",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetGlobalListenerFocusParameters",
    "description": "Sets the global listener focus parameters, which will scale focus behavior of sounds based on their focus azimuth settings in their attenuation settings. * Fire and Forget. * Not Replicated. distance to sounds, values > 1.0 will increase perceived distance to in-focus sounds. perceived distance to sounds, values > 1.0 will increase perceived distance to in-focus sounds. the priority of in-focus sounds, values > 1.0 will increase the priority of in-focus sounds. reduce the priority of sounds out-of-focus sounds, values > 1.0 will increase the priority of out-of-focus sounds.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FocusAzimuthScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NonFocusAzimuthScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FocusDistanceScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NonFocusDistanceScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FocusVolumeScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NonFocusVolumeScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FocusPriorityScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NonFocusPriorityScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetGamePaused",
    "description": "Sets the game's paused state",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bPaused",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetForceDisableSplitscreen",
    "description": "Enables split screen",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bDisable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetEnableWorldRendering",
    "description": "Enabled rendering of the world",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetBaseSoundMix",
    "description": "Set the sound mix of the audio system for special EQing",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundMix",
        "type": "USoundMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "SetActiveSpatialPluginByName",
    "description": "Get list of available Audio Spatialization Plugins",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InPluginName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "SaveGameToSlot",
    "description": "Save the contents of the SaveGameObject to a platform-specific save slot/file.",
    "parameters": [
      {
        "name": "SaveGameObject",
        "type": "USaveGame",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "RemovePlayer",
    "description": "Removes a local player from this game.",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "bDestroyPawn",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "RebaseZeroOriginOntoLocal",
    "description": "Returns local location for origin based position.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGameplayStatics",
    "name": "RebaseLocalOriginOntoZero",
    "description": "Returns origin based position for local world location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGameplayStatics",
    "name": "PushSoundMixModifier",
    "description": "Push a sound mix modifier onto the audio system",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundMixModifier",
        "type": "USoundMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "ProjectWorldToScreen",
    "description": "Transforms the given 3D world-space point into a its 2D screen space coordinate.",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bPlayerViewportRelative",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "PrimeSound",
    "description": "Primes the sound, caching the first chunk of streamed audio.",
    "parameters": [
      {
        "name": "InSound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PrimeAllSoundsInSoundClass",
    "description": "Primes the sound waves in the given USoundClass, caching the first chunk of streamed audio.",
    "parameters": [
      {
        "name": "InSoundClass",
        "type": "USoundClass",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PopSoundMixModifier",
    "description": "Pop a sound mix modifier from the audio system @@param InSoundMixModifier The Sound Mix Modifier to remove from the system",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundMixModifier",
        "type": "USoundMix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PlayWorldCameraShake",
    "description": "Plays an in-world camera shake that affects all nearby local players, with distance-based attenuation. Does not replicate.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Shake",
        "type": "TSubclassOf_UCameraShakeBase_",
        "optional": false,
        "out": false
      },
      {
        "name": "Epicenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InnerRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OuterRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Falloff",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bOrientShakeTowardsEpicenter",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PlaySoundAtLocation",
    "description": "Plays a sound at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point. to do a concurrency limit per owner.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "OwningActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "InitialParams",
        "type": "UInitialActiveSoundParams",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PlaySound2D",
    "description": "Plays a sound directly with no attenuation, perfect for UI sounds. * Fire and Forget. * Not Replicated. Allows PlaySound calls to do a concurrency limit per owner.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "OwningActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "bIsUISound",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PlayDialogueAtLocation",
    "description": "Plays a dialogue at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Dialogue",
        "type": "UDialogueWave",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDialogueContext",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AttenuationSettings",
        "type": "USoundAttenuation",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "PlayDialogue2D",
    "description": "Plays a dialogue directly with no attenuation, perfect for UI. * Fire and Forget. * Not Replicated.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Dialogue",
        "type": "UDialogueWave",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDialogueContext",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "ParseOption",
    "description": "Find an option in the options string and return it.",
    "parameters": [
      {
        "name": "Options",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGameplayStatics",
    "name": "OpenLevelBySoftObjectPtr",
    "description": "Travel to another level",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Level",
        "type": "TSoftObjectPtr_UWorld_",
        "optional": false,
        "out": false
      },
      {
        "name": "bAbsolute",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Options",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "OpenLevel",
    "description": "Travel to another level",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bAbsolute",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Options",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "ObjectIsA",
    "description": "Returns whether or not the object passed in is of (or inherits from) the class type.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "MakeHitResult",
    "description": "Create a HitResult struct",
    "parameters": [
      {
        "name": "bBlockingHit",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInitialOverlap",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ImpactPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ImpactNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysMat",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "HitActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "HitComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "HitBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "HitItem",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "FaceIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FHitResult"
  },
  {
    "class": "UGameplayStatics",
    "name": "LoadStreamLevelBySoftObjectPtr",
    "description": "Stream the level (by Object Reference); Calling again before it finishes has no effect",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Level",
        "type": "TSoftObjectPtr_UWorld_",
        "optional": false,
        "out": false
      },
      {
        "name": "bMakeVisibleAfterLoad",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBlockOnLoad",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "LoadStreamLevel",
    "description": "Stream the level (by Name); Calling again before it finishes has no effect",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bMakeVisibleAfterLoad",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBlockOnLoad",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "LoadGameFromSlot",
    "description": "Load the contents from a given slot.",
    "parameters": [
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USaveGame"
  },
  {
    "class": "UGameplayStatics",
    "name": "IsSplitscreenForceDisabled",
    "description": "Returns the split screen state",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "IsGamePaused",
    "description": "Returns the game's paused state",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "IsAnyLocalPlayerCameraWithinRange",
    "description": "Determines if any local player controller's camera is within range of the specified location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaximumRange",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "HasOption",
    "description": "Returns whether a key exists in an options string.",
    "parameters": [
      {
        "name": "Options",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InKey",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "HasLaunchOption",
    "description": "Checks the commandline to see if the desired option was specified on the commandline (e.g. -demobuild)",
    "parameters": [
      {
        "name": "OptionToCheck",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "GrassOverlappingSphereCount",
    "description": "Counts how many grass foliage instances overlap a given sphere.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CenterPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetWorldOriginLocation",
    "description": "Returns world origin current location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetWorldDeltaSeconds",
    "description": "Returns the frame delta time in seconds, adjusted by time dilation.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetViewProjectionMatrix",
    "description": "Returns the View Matrix, Projection Matrix and the View x Projection Matrix for a given view",
    "parameters": [
      {
        "name": "DesiredView",
        "type": "FMinimalViewInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "ViewMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "ProjectionMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "ViewProjectionMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetViewportMouseCaptureMode",
    "description": "Returns the current viewport mouse capture mode",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMouseCaptureMode"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetUnpausedTimeSeconds",
    "description": "Returns time in seconds since world was brought up for play, adjusted by time dilation and IS NOT stopped when game pauses",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetTimeSeconds",
    "description": "Returns time in seconds since world was brought up for play, adjusted by time dilation and IS stopped when game pauses",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetSurfaceType",
    "description": "Returns the EPhysicalSurface type of the given Hit. To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section",
    "parameters": [
      {
        "name": "Hit",
        "type": "FHitResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetStreamingLevel",
    "description": "Returns level streaming object with specified level package name",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PackageName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelStreaming"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetRealTimeSeconds",
    "description": "Returns time in seconds since world was brought up for play, does NOT stop when game pauses, NOT dilated/clamped",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerStateFromUniqueNetId",
    "description": "Returns the player state that matches the passed in online id, or null for an invalid one. This will work on both the client and server for local and remote players.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "UniqueId",
        "type": "FUniqueNetIdRepl",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerState"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerState",
    "description": "Returns the player state at the given index in the game state's PlayerArray. This will work on both the client and server and the index will be consistent. After initial replication, all clients and the server will have access to PlayerStates for all connected players.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerStateIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerState"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerPawn",
    "description": "Returns the pawn for the player controller at the specified player index. This will not include pawns of remote clients with no available player controller, you can use the player states list for that.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APawn"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerControllerID",
    "description": "Gets what physical controller ID a player is using. This only works for local player controllers.",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerControllerFromPlatformUser",
    "description": "Returns the player controller with the specified physical controller ID. This only works for local players.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerControllerFromID",
    "description": "Returns the player controller with the specified physical controller ID. This only works for local players.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerID",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerController",
    "description": "Returns the player controller found while iterating through the local and available remote player controllers. On a network client, this will only include local players as remote player controllers are not available. The index will be consistent as long as no new players join or leave, but it will not be the same across different clients and servers.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerCharacter",
    "description": "Returns the pawn for the player controller at the specified player index, will return null if the pawn is not a character. This will not include characters of remote clients with no available player controller, you can iterate the PlayerStates list for that.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ACharacter"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlayerCameraManager",
    "description": "Returns the camera manager for the Player Controller at the specified player index. This will not include remote clients with no player controller.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerCameraManager"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetPlatformName",
    "description": "Returns the string name of the current platform, to perform different behavior based on platform. (Platform names include Windows, Mac, Linux, IOS, Android, consoles, etc.).",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetObjectClass",
    "description": "Returns the class of a passed in Object, will always be valid if Object is not NULL",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetNumPlayerStates",
    "description": "Returns the number of active player states, there is one player state for every connected player even if they are a remote client. Indexes up to this can be use as PlayerStateIndex parameters for other functions.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetNumPlayerControllers",
    "description": "Returns the total number of available player controllers, including remote players when called on a server. Indexes up to this can be used as PlayerIndex parameters for the following functions.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetNumLocalPlayerControllers",
    "description": "Returns the number of fully initialized local players, this will be 0 on dedicated servers. Indexes up to this can be used as PlayerIndex parameters for the following functions, and you are guaranteed to get a local player controller.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetMaxAudioChannelCount",
    "description": "Retrieves the max voice count currently used by the audio engine.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetKeyValue",
    "description": "Break up a key=value pair into its key and value.",
    "parameters": [
      {
        "name": "Pair",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetIntOption",
    "description": "Find an option in the options string and return it as an integer.",
    "parameters": [
      {
        "name": "Options",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetGlobalTimeDilation",
    "description": "Gets the current global time dilation.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetGameState",
    "description": "Returns the current GameStateBase or Null if it can't be retrieved",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AGameStateBase"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetGameMode",
    "description": "Returns the current GameModeBase or Null if it can't be retrieved, such as on the client",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AGameModeBase"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetGameInstance",
    "description": "Returns the game instance object",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGameInstance"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetEnableWorldRendering",
    "description": "Returns the world rendering state",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetCurrentReverbEffect",
    "description": "Returns the highest priority reverb settings currently active from any source (Audio Volumes or manual settings).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UReverbEffect"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetCurrentLevelName",
    "description": "Get the name of the currently-open level.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bRemovePrefixString",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetClosestListenerLocation",
    "description": "Finds and returns the position of the closest listener to the specified location",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaximumRange",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowAttenuationOverride",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ListenerPosition",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAvailableSpatialPluginNames",
    "description": "Get list of available Audio Spatialization Plugin names",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAudioTimeSeconds",
    "description": "Returns time in seconds since world was brought up for play, IS stopped when game pauses, NOT dilated/clamped.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAllActorsWithTag",
    "description": "Find all Actors in the world with the specified tag. This is a very slow operation, as it will search over every actor in the world.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAllActorsWithInterface",
    "description": "Find all Actors in the world with the specified interface. This is a very slow operation, as it will search over every actor in the world.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Interface",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAllActorsOfClassWithTag",
    "description": "Find all Actors in the world of the specified class with the specified tag. This will be slow if there are many actors of the specified class.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAllActorsOfClass",
    "description": "Find all Actors in the world of the specified class. This will be slow if there are many actors of the specified class.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetActorOfClass",
    "description": "Find the first Actor in the world of the specified class.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetActorArrayBounds",
    "description": "Bind the bounds of an array of Actors",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyCollidingComponents",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetActorArrayAverageLocation",
    "description": "Find the average location (centroid) of an array of Actors",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetActiveSpatialPluginName",
    "description": "Get currently active Audio Spatialization Plugin name",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGameplayStatics",
    "name": "GetAccurateRealTime",
    "description": "Returns time in seconds since the application was started. Unlike the other time functions this is accurate to the exact time this function is called instead of set once per frame.",
    "parameters": [
      {
        "name": "Seconds",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "PartialSeconds",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "FlushLevelStreaming",
    "description": "Flushes level streaming in blocking fashion and returns when all sub-levels are loaded / visible / hidden",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "FinishSpawningActor",
    "description": "'Finish' spawning an actor.  This will run the construction script.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TransformScaleMethod",
        "type": "ESpawnActorScaleMethod",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UGameplayStatics",
    "name": "FindNearestActor",
    "description": "Returns an Actor nearest to Origin from ActorsToCheck array.",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToCheck",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UGameplayStatics",
    "name": "FindCollisionUV",
    "description": "Try and find the UV for a collision impact. Note this ONLY works if 'Support UV From Hit Results' is enabled in Physics Settings.",
    "parameters": [
      {
        "name": "Hit",
        "type": "FHitResult",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UV",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "EnableLiveStreaming",
    "description": "Toggle live DVR streaming.",
    "parameters": [
      {
        "name": "Enable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "DoesSaveGameExist",
    "description": "See if a save game exists with the specified name.",
    "parameters": [
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "DeprojectScreenToWorld",
    "description": "Transforms the given 2D screen space coordinate into a 3D world-space point and direction.",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "WorldDirection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "DeprojectSceneCaptureToWorld",
    "description": "Transforms the given 2D UV coordinate into a 3D world-space point and direction.",
    "parameters": [
      {
        "name": "SceneCapture2D",
        "type": "ASceneCapture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetUV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "WorldDirection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "DeprojectSceneCaptureComponentToWorld",
    "description": "Transforms the given 2D UV coordinate into a 3D world-space point and direction.",
    "parameters": [
      {
        "name": "SceneCaptureComponent2D",
        "type": "USceneCaptureComponent2D",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetUV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "WorldDirection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "DeleteGameInSlot",
    "description": "Delete a save game in a particular slot.",
    "parameters": [
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UserIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "DeactivateReverbEffect",
    "description": "Deactivates a Reverb Effect that was applied outside of an Audio Volume",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TagName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "CreateSound2D",
    "description": "This function allows users to create Audio Components in advance of playback with settings specifically for non-spatialized, non-distance-attenuated sounds. Audio Components created using this function by default will not have Spatialization applied. (by completing or stopping), or whether it can be reactivated",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Sound",
        "type": "USoundBase",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PitchMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConcurrencySettings",
        "type": "USoundConcurrency",
        "optional": true,
        "out": false
      },
      {
        "name": "bPersistAcrossLevelTransition",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAudioComponent"
  },
  {
    "class": "UGameplayStatics",
    "name": "CreateSaveGameObject",
    "description": "Create a new, empty SaveGame object to set data on and then pass to SaveGameToSlot.",
    "parameters": [
      {
        "name": "SaveGameClass",
        "type": "TSubclassOf_USaveGame_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USaveGame"
  },
  {
    "class": "UGameplayStatics",
    "name": "CreatePlayerFromPlatformUser",
    "description": "Create a new local player for this game, for cases like local multiplayer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      },
      {
        "name": "bSpawnPlayerController",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UGameplayStatics",
    "name": "CreatePlayer",
    "description": "Create a new local player for this game, for cases like local multiplayer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerId",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bSpawnPlayerController",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UGameplayStatics",
    "name": "ClearSoundMixModifiers",
    "description": "Clear all sound mix modifiers from the audio system",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "ClearSoundMixClassOverride",
    "description": "Clears any existing override of the Sound Class Adjuster in the given Sound Mix",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundMixModifier",
        "type": "USoundMix",
        "optional": false,
        "out": false
      },
      {
        "name": "InSoundClass",
        "type": "USoundClass",
        "optional": false,
        "out": false
      },
      {
        "name": "FadeOutTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "CancelAsyncLoading",
    "description": "Cancels all currently queued streaming packages",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "BreakHitResult",
    "description": "Extracts data from a HitResult.",
    "parameters": [
      {
        "name": "Hit",
        "type": "FHitResult",
        "optional": false,
        "out": false
      },
      {
        "name": "bBlockingHit",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bInitialOverlap",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "ImpactPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "ImpactNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "PhysMat",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": true
      },
      {
        "name": "HitActor",
        "type": "AActor",
        "optional": false,
        "out": true
      },
      {
        "name": "HitComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": true
      },
      {
        "name": "HitBoneName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "HitItem",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "ElementIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "FaceIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "TraceStart",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "TraceEnd",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "BlueprintSuggestProjectileVelocity",
    "description": "Calculates an launch velocity for a projectile to hit a specified point.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TossVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "StartLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LaunchSpeed",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideGravityZ",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceOption",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bFavorHighArc",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bDrawDebug",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bAcceptClosestOnNoSolutions",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "Blueprint_PredictProjectilePath_ByTraceChannel",
    "description": "Predict the arc of a virtual projectile affected by gravity with collision checks along the arc. Returns a list of positions of the simulated arc and the destination reached by the simulation. Returns true if it hit something (if tracing with collision).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPathPositions",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutLastTraceDestination",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "StartPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LaunchVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTracePath",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ProjectileRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SimFrequency",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxSimTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "OverrideGravityZ",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "Blueprint_PredictProjectilePath_ByObjectType",
    "description": "Predict the arc of a virtual projectile affected by gravity with collision checks along the arc. Returns a list of positions of the simulated arc and the destination reached by the simulation. Returns true if it hit something.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPathPositions",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutLastTraceDestination",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "StartPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LaunchVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTracePath",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ProjectileRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SimFrequency",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxSimTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "OverrideGravityZ",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "Blueprint_PredictProjectilePath_Advanced",
    "description": "Predict the arc of a virtual projectile affected by gravity with collision checks along the arc. Returns true if it hit something.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictParams",
        "type": "FPredictProjectilePathParams",
        "optional": false,
        "out": false
      },
      {
        "name": "PredictResult",
        "type": "FPredictProjectilePathResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "BeginSpawningActorFromBlueprint",
    "description": "Spawns an instance of a blueprint, but does not automatically run its construction script.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bNoCollisionFail",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UGameplayStatics",
    "name": "BeginDeferredActorSpawnFromClass",
    "description": "Spawns an instance of an actor class, but does not automatically run its construction script.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionHandlingOverride",
        "type": "ESpawnActorCollisionHandlingMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "Owner",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "TransformScaleMethod",
        "type": "ESpawnActorScaleMethod",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UGameplayStatics",
    "name": "AreSubtitlesEnabled",
    "description": "Returns whether or not subtitles are currently enabled.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "AreAnyListenersWithinRange",
    "description": "Determines if any audio listeners are within range of the specified location",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaximumRange",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "ApplyRadialDamageWithFalloff",
    "description": "Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseDamage",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinimumDamage",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageInnerRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageOuterRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageFalloff",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageTypeClass",
        "type": "TSubclassOf_UDamageType_",
        "optional": false,
        "out": false
      },
      {
        "name": "IgnoreActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageCauser",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "InstigatedByController",
        "type": "AController",
        "optional": true,
        "out": false
      },
      {
        "name": "DamagePreventionChannel",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "ApplyRadialDamage",
    "description": "Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseDamage",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageTypeClass",
        "type": "TSubclassOf_UDamageType_",
        "optional": false,
        "out": false
      },
      {
        "name": "IgnoreActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageCauser",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "InstigatedByController",
        "type": "AController",
        "optional": true,
        "out": false
      },
      {
        "name": "bDoFullDamage",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "DamagePreventionChannel",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayStatics",
    "name": "ApplyPointDamage",
    "description": "Hurts the specified actor with the specified impact.",
    "parameters": [
      {
        "name": "DamagedActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseDamage",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HitFromDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HitInfo",
        "type": "FHitResult",
        "optional": false,
        "out": false
      },
      {
        "name": "EventInstigator",
        "type": "AController",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageTypeClass",
        "type": "TSubclassOf_UDamageType_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "ApplyDamage",
    "description": "Hurts the specified actor with generic damage.",
    "parameters": [
      {
        "name": "DamagedActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseDamage",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EventInstigator",
        "type": "AController",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "DamageTypeClass",
        "type": "TSubclassOf_UDamageType_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameplayStatics",
    "name": "AnnounceAccessibleString",
    "description": "If accessibility is enabled, have the platform announce a string to the player. These announcements can be interrupted by system accessibiliity announcements or other accessibility announcement requests. This should be used judiciously as flooding a player with announcements can be overrwhelming and confusing. Try to make announcements concise and clear. NOTE: Currently only supported on Win10, Mac, iOS",
    "parameters": [
      {
        "name": "AnnouncementString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayStatics",
    "name": "ActivateReverbEffect",
    "description": "Activates a Reverb Effect without the need for an Audio Volume",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ReverbEffect",
        "type": "UReverbEffect",
        "optional": false,
        "out": false
      },
      {
        "name": "TagName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Volume",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FadeTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetSyncInterval",
    "description": "Stores user settings for a game (for example graphics and sound settings), with the ability to save and load to and from a file. Validates and resets bad user settings to default. Deletes stale user settings file if necessary. Whether the curently running system supports HDR display output Sets the user setting for vsync. See UGameUserSettings::bUseVSync. Sets the visual effects quality (0..4, higher is better) Sets the view distance quality (0..4, higher is better) Sets the texture quality (0..4, higher is better) Sets the shadow quality (0..4, higher is better) Sets the shading quality (0..4, higher is better) Sets the user setting for game screen resolution, in pixels. Sets the current resolution scale Sets the current resolution scale as a normalized 0..1 value between MinScaleValue and MaxScaleValue Sets the reflection quality (0..4, higher is better) Sets the post-processing quality (0..4, higher is better) Changes all scalability settings at once based on a single overall quality level Sets the global illumination quality (0..4, higher is better) Sets the user setting for the game window fullscreen mode. See UGameUserSettings::FullscreenMode. Sets the user's frame rate limit (0 will disable frame rate limiting) Sets the foliage quality (0..4, higher is better) Sets the user setting for dynamic resolution. See UGameUserSettings::bUseDynamicResolution. Set scalability settings to sensible fallback values, for use when the benchmark fails or potentially causes a crash Sets the user's audio quality level setting Sets the anti-aliasing quality (0..4, higher is better) Save the user settings to persistent storage (automatically happens as part of ApplySettings) Runs the hardware benchmark and populates ScalabilityQuality as well as the last benchmark results config members, but does not apply the settings it determines. Designed to be called in conjunction with ApplyHardwareBenchmarkResults Revert video mode (fullscreenmode/resolution) back to the last user confirmed values This function resets all settings to the current system settings Loads the user settings from persistent storage Returns the user setting for vsync. Checks if the vsync user setting is different from current system setting Checks if the Screen Resolution user setting is different from current Checks if the FullscreenMode user setting is different from current Returns the user setting for dynamic resolution. Checks if the dynamic resolution user setting is different from current system setting Checks if any user settings is different from current Returns the visual effects quality (0..4, higher is better) Returns the view distance quality (0..4, higher is better) Returns the texture quality (0..4, higher is better)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetGameUserSettings",
    "description": "Returns the shadow quality (0..4, higher is better) Returns the shading quality (0..4, higher is better) Returns the user setting for game screen resolution, in pixels. Gets the current resolution scale as a normalized 0..1 value between MinScaleValue and MaxScaleValue Returns the current resolution scale and the range Returns the reflection quality (0..4, higher is better) Gets the recommended resolution quality based on LastRecommendedScreenWidth/Height and the current screen resolution Returns the user setting for game window fullscreen mode. Returns the post-processing quality (0..4, higher is better) Returns the overall scalability level (can return -1 if the settings are custom) Returns the last confirmed user setting for game screen resolution, in pixels. Returns the last confirmed user setting for game window fullscreen mode. Returns the global illumination quality (0..4, higher is better) Returns the game local machine settings (resolution, windowing mode, scalability settings, etc...)",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetFramePace",
    "description": "Returns the user setting for game window fullscreen mode. Gets the user's frame rate limit (0 indiciates the frame rate limit is disabled) Gets the current frame pacing frame rate in fps, or 0 if none",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetDefaultWindowPosition",
    "description": "Returns the foliage quality (0..4, higher is better) Returns user's desktop resolution, in pixels. Returns the default window position when no position is set",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetDefaultWindowMode",
    "description": "Returns the default window mode when no mode is set",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UGameUserSettings",
    "name": "GetDefaultResolution",
    "description": "Gets the desired resolution quality based on DesiredScreenWidth/Height and the current screen resolution Returns the default resolution when no resolution is set",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UHealthSnapshotBlueprintLibrary",
    "name": "StopPerformanceSnapshots",
    "description": "Stops capturing FPS charts only if StartHealthSnapshotChart has first been called. Does nothing if FPS charts are not running. HealthSnapshots captured after this is called will not include performance stats.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UHealthSnapshotBlueprintLibrary",
    "name": "StartPerformanceSnapshots",
    "description": "Begins capturing FPS charts that can be used to include performance data in a HealthSnapshot. If snapshots are already running clears all accumulated performance data",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UHealthSnapshotBlueprintLibrary",
    "name": "LogPerformanceSnapshot",
    "description": "Writes a snapshot to the log. Captures memory stats by default. Also captures performance stats if called after StartHealthSnapshotChart and before SopHealthSnapshotChart.",
    "parameters": [
      {
        "name": "SnapshotTitle",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bResetStats",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "RandomSobolFloat",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Dimension",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Seed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "RandomSobolCell3D",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumCells",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Cell",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Seed",
        "type": "FVector",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "RandomSobolCell2D",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumCells",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Cell",
        "type": "FVector2D",
        "optional": true,
        "out": false
      },
      {
        "name": "Seed",
        "type": "FVector2D",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "NextSobolFloat",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Dimension",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "NextSobolCell3D",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumCells",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PreviousValue",
        "type": "FVector",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "NextSobolCell2D",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumCells",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PreviousValue",
        "type": "FVector2D",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "MakeImportanceTexture",
    "description": "Create an FImportanceTexture object for texture-driven importance sampling from a 2D RGBA8 texture",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "WeightingFunc",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FImportanceTexture"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "ImportanceSample",
    "description": "Distribute sample points proportional to Texture2D luminance.",
    "parameters": [
      {
        "name": "Texture",
        "type": "FImportanceTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Rand",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Samples",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Intensity",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SamplePosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "SampleColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "SampleIntensity",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SampleSize",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UImportanceSamplingLibrary",
    "name": "BreakImportanceTexture",
    "description": "Get texture used to create an ImportanceTexture object",
    "parameters": [
      {
        "name": "ImportanceTexture",
        "type": "FImportanceTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": true
      },
      {
        "name": "WeightingFunc",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "PlatformUserId_None",
    "description": "A static BP library that exposes Input Device data to blueprints Static invalid platform user",
    "parameters": [],
    "returnType": "FPlatformUserId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "NotEqual_PlatformUserId",
    "description": "Returns true if PlatformUserId A is not equal to PlatformUserId B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "NotEqual_InputDeviceId",
    "description": "Returns true if InputDeviceId A is not equal to InputDeviceId B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "IsValidPlatformId",
    "description": "Check if the given platform ID is valid",
    "parameters": [
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "IsValidInputDevice",
    "description": "Check if the given input device is valid",
    "parameters": [
      {
        "name": "DeviceId",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "IsUnpairedUserId",
    "description": "Returns true if the given Platform User Id is the user for unpaired input devices on this platform.",
    "parameters": [
      {
        "name": "PlatformId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "IsInputDeviceMappedToUnpairedUser",
    "description": "Returns true if the given input device is mapped to the unpaired platform user id.",
    "parameters": [
      {
        "name": "InputDevice",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "IsDevicePropertyHandleValid",
    "description": "Returns true if the given handle is valid",
    "parameters": [
      {
        "name": "InHandle",
        "type": "FInputDevicePropertyHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "InputDeviceId_None",
    "description": "Static invalid input device",
    "parameters": [],
    "returnType": "FInputDeviceId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetUserForUnpairedInputDevices",
    "description": "Returns the platform user id that is being used for unmapped input devices. Will be PLATFORMUSERID_NONE if platform does not support this (this is the default behavior)",
    "parameters": [],
    "returnType": "FPlatformUserId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetUserForInputDevice",
    "description": "Returns the platform user attached to this input device, or PLATFORMUSERID_NONE if invalid",
    "parameters": [
      {
        "name": "DeviceId",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPlatformUserId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetPrimaryPlatformUser",
    "description": "Returns the 'Primary' Platform user for this platform. This typically has an internal ID of '0' and is used as the default platform user to map devices such as the keyboard and mouse that don't get assigned unique ID's from their owning platform code.",
    "parameters": [],
    "returnType": "FPlatformUserId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetPrimaryInputDeviceForUser",
    "description": "Returns the primary input device used by a specific player, or INPUTDEVICEID_NONE if invalid",
    "parameters": [
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputDeviceId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetPlayerControllerFromPlatformUser",
    "description": "Get the player controller who has the given Platform User ID.",
    "parameters": [
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetPlayerControllerFromInputDevice",
    "description": "Get the player controller who owns the given input device id",
    "parameters": [
      {
        "name": "DeviceId",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetInputDeviceConnectionState",
    "description": "Gets the connection state of the given input device.",
    "parameters": [
      {
        "name": "DeviceId",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EInputDeviceConnectionState"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetDefaultInputDevice",
    "description": "Returns the default device id used for things like keyboard/mouse input",
    "parameters": [],
    "returnType": "FInputDeviceId"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetAllInputDevicesForUser",
    "description": "Populates the OutInputDevices array with any InputDeviceID's that are mapped to the given platform user",
    "parameters": [
      {
        "name": "UserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      },
      {
        "name": "OutInputDevices",
        "type": "TArray_FInputDeviceId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetAllInputDevices",
    "description": "Get all mapped input devices on this platform regardless of their connection state.",
    "parameters": [
      {
        "name": "OutInputDevices",
        "type": "TArray_FInputDeviceId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetAllConnectedInputDevices",
    "description": "Gather all currently connected input devices",
    "parameters": [
      {
        "name": "OutInputDevices",
        "type": "TArray_FInputDeviceId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "GetAllActiveUsers",
    "description": "Get all currently active platform ids, anyone who has a mapped input device",
    "parameters": [
      {
        "name": "OutUsers",
        "type": "TArray_FPlatformUserId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "EqualEqual_PlatformUserId",
    "description": "Returns true if PlatformUserId A is equal to PlatformUserId B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputDeviceLibrary",
    "name": "EqualEqual_InputDeviceId",
    "description": "Returns true if InputDeviceId A is equal to InputDeviceId B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInputPlatformSettings",
    "name": "GetAllHardwareDeviceNames",
    "description": "Per-Platform input options Returns an array of Hardware device names from every registered platform ini. For use in the editor so that you can get a list of all known input devices and make device-specific options. For example, you can map any data type to a specific input device UPROPERTY(EditAnywhere, BlueprintReadOnly, meta=(GetOptions=\"Engine.InputPlatformSettings.GetAllHardwareDeviceNames\")) TMap<FString, UFooData> DeviceSpecificMap; and the editor will make a nice drop down for you with all the current options that are in the settings.",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UInputSettings",
    "name": "GetInputSettings",
    "description": "Project wide settings for input handling Flush the current mapping values to the config file Programmatically remove an axis mapping to the project defaults Programmatically remove an action mapping to the project defaults Returns the game local input settings (action mappings, axis mappings, etc...)",
    "parameters": [],
    "returnType": "UInputSettings"
  },
  {
    "class": "UInputSettings",
    "name": "GetAllActionAndAxisNames",
    "description": "Populate a list of all defined axis names Retrieve all axis mappings by a certain name. Returns all known legacy action and axis names that is useful for properties that you want a drop down selection of the available names on a UPROPERTY i.e. meta=(GetOptions=\"Engine.InputSettings.GetAllActionAndAxisNames\")",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortStringArray",
    "description": "Sorts an array of strings alphabetically.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortNameArray",
    "description": "Sorts an array of FNames.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bLexicalSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortIntArray",
    "description": "Sorts an array of integers.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortInt64Array",
    "description": "Sorts an array of 64-bit integers.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortFloatArray",
    "description": "Sorts an array of doubles.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SortByteArray",
    "description": "Sorts an array of bytes.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "bStableSort",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SortOrder",
        "type": "EArraySortOrder",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "SetArrayPropertyByName",
    "description": "Not exposed to users. Supports setting an array property on an object by name.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "FilterArray",
    "description": "*Filter an array based on a Class derived from Actor. * *@@param        TargetArray             The array to filter from *@@param        FilterClass             The Actor sub-class type that acts as the filter, only objects derived from it will be returned. *@@return       An array containing only those objects which are derived from the class specified.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "FilteredArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Swap",
    "description": "*Swaps the elements at the specified positions in the specified array *If the specified positions are equal, invoking this method leaves the array unchanged * *@@param        TargetArray             The array to perform the operation on *@@param    FirstIndex      The index of one element to be swapped *@@param    SecondIndex     The index of the other element to be swapped",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "FirstIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SecondIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_ShuffleFromStream",
    "description": "Shuffle (randomize) the elements of an array from a specific stream of random data, useful for achieving determinism",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "RandomStream",
        "type": "FRandomStream",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Shuffle",
    "description": "Shuffle (randomize) the elements of an array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Set",
    "description": "*Given an array and an index, assigns the item to that array element * *@@param        TargetArray             The array to perform the operation on *@@param        Index                   The index to assign the item to *@@param        Item                    The item to assign to the index of the array *@@param        bSizeToFit              If true, the array will expand if Index is greater than the current size of the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Item",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Reverse",
    "description": "Reverse the elements of an array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Resize",
    "description": "*Resize Array to specified size. * *@@param        TargetArray             The array to resize *@@param        Size                    The new size of the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_RemoveItem",
    "description": "*Remove all instances of item from array. * *@@param        TargetArray             The array to remove from *@@param        Item                    The item to remove from the array *@@return       True if one or more items were removed",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Item",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Remove",
    "description": "*Remove item at the given index from the array. * *@@param        TargetArray             The array to remove from *@@param        IndexToRemove   The index into the array to remove from",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexToRemove",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_RandomFromStream",
    "description": "Gets a random item from specified array (using random stream)",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "RandomStream",
        "type": "FRandomStream",
        "optional": false,
        "out": true
      },
      {
        "name": "OutItem",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIndex",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Random",
    "description": "Gets a random item from specified array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutItem",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIndex",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Length",
    "description": "*Get the number of items in an array * *@@param        TargetArray             The array to get the length of *@@return       The length of the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_LastIndex",
    "description": "*Get the last valid index into an array * *@@param        TargetArray             The array to perform the operation on *@@return       The last valid index of the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_IsValidIndex",
    "description": "*Tests if IndexToTest is valid, i.e. greater than or equal to zero, and less than the number of elements in TargetArray. * *@@param        TargetArray             Array to use for the IsValidIndex test *@@param        IndexToTest             The Index, that we want to test for being valid *@@return       True if the Index is Valid, i.e. greater than or equal to zero, and less than the number of elements in TargetArray.",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexToTest",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_IsNotEmpty",
    "description": "*Check if the array has any elements * *@@param        TargetArray             The array to check *@@return       A boolean indicating if the array has any elements",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_IsEmpty",
    "description": "*Check if the array is empty * *@@param        TargetArray             The array to check *@@return       A boolean indicating if the array is empty",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Insert",
    "description": "*Insert item at the given index into the array. * *@@param        TargetArray             The array to insert into *@@param        NewItem                 The item to insert into the array *@@param        Index                   The index at which to insert the item into the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewItem",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Identical",
    "description": "Checks if two arrays are memberwise identical",
    "parameters": [
      {
        "name": "ArrayA",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayB",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Get",
    "description": "*Given an array and an index, returns a copy of the item found at that index * *@@param        TargetArray             The array to get an item from *@@param        Index                   The index in the array to get an item from *@@return       A copy of the item stored at the index",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Item",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Find",
    "description": "*Finds the index of the first instance of the item within the array * *@@param        TargetArray             The array to search for the item *@@param        ItemToFind              The item to look for *@@return       The index the item was found at, or -1 if not found",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ItemToFind",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Contains",
    "description": "*Returns true if the array contains the given item * *@@param        TargetArray             The array to search for the item *@@param        ItemToFind              The item to look for *@@return       True if the item was found within the array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ItemToFind",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Clear",
    "description": "*Clear an array, removes all content * *@@param        TargetArray             The array to clear",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Append",
    "description": "Append an array to another array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_AddUnique",
    "description": "Add item to array (unique)",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewItem",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetArrayLibrary",
    "name": "Array_Add",
    "description": "Add item to array",
    "parameters": [
      {
        "name": "TargetArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewItem",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "Parse_StringToGuid",
    "description": "Converts a String of format EGuidFormats to a Guid. Returns Guid OutGuid, Returns bool Success",
    "parameters": [
      {
        "name": "GuidString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutGuid",
        "type": "FGuid",
        "optional": false,
        "out": true
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "NotEqual_GuidGuid",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGuid",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "NewGuid",
    "description": "Returns a new unique GUID",
    "parameters": [],
    "returnType": "FGuid"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "IsValid_Guid",
    "description": "Checks whether the given GUID is valid",
    "parameters": [
      {
        "name": "InGuid",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "Invalidate_Guid",
    "description": "Invalidates the given GUID",
    "parameters": [
      {
        "name": "InGuid",
        "type": "FGuid",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "EqualEqual_GuidGuid",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGuid",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetGuidLibrary",
    "name": "Conv_GuidToString",
    "description": "Converts a GUID value to a string, in the form 'A-B-C-D'",
    "parameters": [
      {
        "name": "InGuid",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_IsTouchEvent",
    "description": "Returns true if this event a result from a touch (as opposed to a mouse)",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_IsMouseButtonDown",
    "description": "Mouse buttons that are currently pressed",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      },
      {
        "name": "MouseButton",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetWheelDelta",
    "description": "How much did the mouse wheel turn since the last mouse event",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetUserIndex",
    "description": "Returns the index of the user that caused the event",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetTouchpadIndex",
    "description": "Returns the index of the touch pad that generated this event (for platforms with multiple touch pads per user)",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetScreenSpacePosition",
    "description": "Returns The position of the cursor in screen space",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetPointerIndex",
    "description": "Returns the unique identifier of the pointer (e.g., finger index)",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetLastScreenSpacePosition",
    "description": "Returns the position of the cursor in screen space last time we handled an input event",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetGestureType",
    "description": "Returns the type of touch gesture",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ESlateGesture"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetGestureDelta",
    "description": "Returns the change in gesture value since the last gesture event of the same type.",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetEffectingButton",
    "description": "Mouse button that caused this event to be raised (possibly FKey::Invalid)",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FKey"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "PointerEvent_GetCursorDelta",
    "description": "Returns the distance the mouse traveled since the last event was handled.",
    "parameters": [
      {
        "name": "Input",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "ModifierKeysState_IsShiftDown",
    "description": "Returns true if either shift key was down when the key state was captured",
    "parameters": [
      {
        "name": "KeysState",
        "type": "FSlateModifierKeysState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "ModifierKeysState_IsControlDown",
    "description": "Returns true if either control key was down when the key state was captured",
    "parameters": [
      {
        "name": "KeysState",
        "type": "FSlateModifierKeysState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "ModifierKeysState_IsCommandDown",
    "description": "Returns true if either command key was down when the key state was captured",
    "parameters": [
      {
        "name": "KeysState",
        "type": "FSlateModifierKeysState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "ModifierKeysState_IsAltDown",
    "description": "Returns true if either alt key was down when the key state was captured",
    "parameters": [
      {
        "name": "KeysState",
        "type": "FSlateModifierKeysState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsVectorAxis",
    "description": "Returns true if the key is a vector axis",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsValid",
    "description": "Returns true if this is a valid key.",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsMouseButton",
    "description": "Returns true if the key is a mouse button",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsModifierKey",
    "description": "Returns true if the key is a modifier key: Ctrl, Command, Alt, Shift",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsKeyboardKey",
    "description": "Returns true if the key is a keyboard button",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsGamepadKey",
    "description": "Returns true if the key is a gamepad button",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsDigital",
    "description": "Returns true if the key is a digital button press",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsButtonAxis",
    "description": "Returns true if the key is a 1D axis emulating a digital button press.",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsAxis3D",
    "description": "Returns true if the key is a 3D (vector) axis",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsAxis2D",
    "description": "Returns true if the key is a 2D (vector) axis",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsAxis1D",
    "description": "Returns true if the key is a 1D (float) axis",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_IsAnalog",
    "description": "Returns true if the key is an analog axis",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_GetNavigationDirectionFromKey",
    "description": "Returns the navigation action corresponding to this key, or Invalid if not found",
    "parameters": [
      {
        "name": "InKeyEvent",
        "type": "FKeyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EUINavigation"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_GetNavigationDirectionFromAnalog",
    "description": "Returns the navigation action corresponding to this key, or Invalid if not found",
    "parameters": [
      {
        "name": "InAnalogEvent",
        "type": "FAnalogInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EUINavigation"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_GetNavigationActionFromKey",
    "description": "Returns the navigation action corresponding to this key, or Invalid if not found",
    "parameters": [
      {
        "name": "InKeyEvent",
        "type": "FKeyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EUINavigationAction"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_GetNavigationAction",
    "description": "",
    "parameters": [
      {
        "name": "InKey",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EUINavigationAction"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "Key_GetDisplayName",
    "description": "Returns the display name of the key.",
    "parameters": [
      {
        "name": "Key",
        "type": "FKey",
        "optional": false,
        "out": false
      },
      {
        "name": "bLongDisplayName",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsShiftDown",
    "description": "Returns true if either shift key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsRightShiftDown",
    "description": "Returns true if right shift key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsRightControlDown",
    "description": "Returns true if left control key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsRightCommandDown",
    "description": "Returns true if right command key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsRightAltDown",
    "description": "Returns true if right alt key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsRepeat",
    "description": "Returns whether or not this character is an auto-repeated keystroke",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsLeftShiftDown",
    "description": "Returns true if left shift key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsLeftControlDown",
    "description": "Returns true if left control key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsLeftCommandDown",
    "description": "Returns true if left command key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsLeftAltDown",
    "description": "Returns true if left alt key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsControlDown",
    "description": "Returns true if either control key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsCommandDown",
    "description": "Returns true if either command key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputEvent_IsAltDown",
    "description": "Returns true if either alt key was down when this event occurred",
    "parameters": [
      {
        "name": "Input",
        "type": "FInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "InputChord_GetDisplayName",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "FInputChord",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "GetUserIndex",
    "description": "",
    "parameters": [
      {
        "name": "Input",
        "type": "FKeyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "GetModifierKeysState",
    "description": "Returns a snapshot of the cached modifier-keys state for the application.",
    "parameters": [],
    "returnType": "FSlateModifierKeysState"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "GetKey",
    "description": "Returns the key for this event.",
    "parameters": [
      {
        "name": "Input",
        "type": "FKeyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FKey"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "GetAnalogValue",
    "description": "",
    "parameters": [
      {
        "name": "Input",
        "type": "FAnalogInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "EqualEqual_KeyKey",
    "description": "Test if the input key are equal (A == B) Returns true if the key are equal, false otherwise",
    "parameters": [
      {
        "name": "A",
        "type": "FKey",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "EqualEqual_InputChordInputChord",
    "description": "Test if the input chords are equal (A == B) Returns true if the chords are equal, false otherwise",
    "parameters": [
      {
        "name": "A",
        "type": "FInputChord",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FInputChord",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInputLibrary",
    "name": "CalibrateTilt",
    "description": "Calibrate the tilt for the input device",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "SetCurrentLocale",
    "description": "Set *only* the current locale (for internationalization).",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "SetCurrentLanguageAndLocale",
    "description": "Set the current language (for localization) and locale (for internationalization).",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "SetCurrentLanguage",
    "description": "Set *only* the current language (for localization).",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "SetCurrentCulture",
    "description": "Set the current culture.",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "SetCurrentAssetGroupCulture",
    "description": "Set the given asset group category culture from an IETF language tag (eg, \"zh-Hans-CN\").",
    "parameters": [
      {
        "name": "AssetGroup",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "IsCultureRightToLeft",
    "description": "Returns if the given culture reads left to right",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetSuitableCulture",
    "description": "Given a list of available cultures, try and find the most suitable culture from the list based on culture prioritization. eg) If your list was [en, fr, de] and the given culture was \"en-US\", this function would return \"en\". eg) If your list was [zh, ar, pl] and the given culture was \"en-US\", this function would return the fallback culture.",
    "parameters": [
      {
        "name": "AvailableCultures",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "CultureToMatch",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FallbackCulture",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetNativeCulture",
    "description": "Get the native culture for the given localization category.",
    "parameters": [
      {
        "name": "TextCategory",
        "type": "ELocalizedTextSourceCategory",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetLocalizedCultures",
    "description": "Get the list of cultures that have localization data available for them.",
    "parameters": [
      {
        "name": "IncludeGame",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IncludeEngine",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IncludeEditor",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IncludeAdditional",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetCurrentLocale",
    "description": "Get the current locale (for internationalization) as an IETF language tag: - A two-letter ISO 639-1 language code (eg, \"zh\"). - An optional four-letter ISO 15924 script code (eg, \"Hans\"). - An optional two-letter ISO 3166-1 country code (eg, \"CN\").",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetCurrentLanguage",
    "description": "Get the current language (for localization) as an IETF language tag: - A two-letter ISO 639-1 language code (eg, \"zh\"). - An optional four-letter ISO 15924 script code (eg, \"Hans\"). - An optional two-letter ISO 3166-1 country code (eg, \"CN\").",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetCurrentCulture",
    "description": "Get the current culture as an IETF language tag: - A two-letter ISO 639-1 language code (eg, \"zh\"). - An optional four-letter ISO 15924 script code (eg, \"Hans\"). - An optional two-letter ISO 3166-1 country code (eg, \"CN\").",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetCurrentAssetGroupCulture",
    "description": "Get the given asset group category culture.",
    "parameters": [
      {
        "name": "AssetGroup",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "GetCultureDisplayName",
    "description": "Get the display name of the given culture.",
    "parameters": [
      {
        "name": "Culture",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Localized",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetInternationalizationLibrary",
    "name": "ClearCurrentAssetGroupCulture",
    "description": "Clear the given asset group category culture.",
    "parameters": [
      {
        "name": "AssetGroup",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SaveToConfig",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMaterialLibrary",
    "name": "SetVectorParameterValue",
    "description": "Sets a vector parameter value on the material collection instance. Logs if ParameterName is invalid.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Collection",
        "type": "UMaterialParameterCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMaterialLibrary",
    "name": "SetScalarParameterValue",
    "description": "Sets a scalar parameter value on the material collection instance. Logs if ParameterName is invalid.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Collection",
        "type": "UMaterialParameterCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMaterialLibrary",
    "name": "GetVectorParameterValue",
    "description": "Gets a vector parameter value from the material collection instance. Logs if ParameterName is invalid.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Collection",
        "type": "UMaterialParameterCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMaterialLibrary",
    "name": "GetScalarParameterValue",
    "description": "Gets a scalar parameter value from the material collection instance. Logs if ParameterName is invalid.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Collection",
        "type": "UMaterialParameterCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMaterialLibrary",
    "name": "CreateDynamicMaterialInstance",
    "description": "Creates a Dynamic Material Instance which you can modify during gameplay.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Parent",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CreationFlags",
        "type": "EMIDCreationFlags",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UMaterialInstanceDynamic"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Xor_IntInt",
    "description": "Bitwise XOR (A ^ B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Xor_Int64Int64",
    "description": "Bitwise XOR (A ^ B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Wrap",
    "description": "Returns Value between A and B (inclusive) that wraps around",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "WeightedMovingAverage_FVector",
    "description": "Calculates the new value in a weighted moving average series using the previous value and the weight",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "WeightedMovingAverage_FRotator",
    "description": "Calculates the new value in a weighted moving average series using the previous value and the weight",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "WeightedMovingAverage_Float",
    "description": "Calculates the new value in a weighted moving average series using the previous value and the weight",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSizeXYSquared",
    "description": "Returns the squared length of the vector's XY components.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSizeXY",
    "description": "Returns the length of the vector's XY components.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSizeSquared",
    "description": "Returns the squared length of the vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSize2DSquared",
    "description": "Returns the squared length of a 2D Vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSize2D",
    "description": "Returns the length of a 2D Vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VSize",
    "description": "Returns the length of the vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VLerp",
    "description": "Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VInterpTo_Constant",
    "description": "Tries to reach Target at a constant rate.",
    "parameters": [
      {
        "name": "Current",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VInterpTo",
    "description": "Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.",
    "parameters": [
      {
        "name": "Current",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VectorSpringInterp",
    "description": "Uses a simple spring model to interpolate a vector from Current to Target.",
    "parameters": [
      {
        "name": "Current",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SpringState",
        "type": "FVectorSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "Stiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CriticalDampingFactor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Mass",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TargetVelocityAmount",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bClamp",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinValue",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxValue",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bInitializeFromTarget",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Zero",
    "description": "3D vector zero constant (0,0,0)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Up",
    "description": "3D vector Unreal up direction constant (0,0,1)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_UnwindEuler",
    "description": "When this vector contains Euler angles (degrees), ensure that angles are between +/-180",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_UnitCartesianToSpherical",
    "description": "Converts a Cartesian unit vector into spherical coordinates on the unit sphere.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ToRadians",
    "description": "Converts a vector containing degree values to a vector containing radian values.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ToDegrees",
    "description": "Converts a vector containing radian values to a vector containing degree values.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_SnappedToGrid",
    "description": "Gets a copy of this vector snapped to a grid.",
    "parameters": [
      {
        "name": "InVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InGridSize",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_SlerpVectorToDirection",
    "description": "Interpolate from a vector to the direction of another vector along a spherical path.",
    "parameters": [
      {
        "name": "Vector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_SlerpNormals",
    "description": "Interpolate from normalized vector A to normalized vector B along a spherical path.",
    "parameters": [
      {
        "name": "NormalA",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalB",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Set",
    "description": "Set the values of the vector directly.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Right",
    "description": "3D vector Unreal right direction constant (0,1,0)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Reciprocal",
    "description": "Gets the reciprocal of this vector, avoiding division by zero. Zero components are set to BIG_NUMBER.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ProjectOnToNormal",
    "description": "Gets a copy of this vector projected onto the input vector, which is assumed to be unit length.",
    "parameters": [
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_One",
    "description": "3D vector one constant (1,1,1)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_NormalUnsafe",
    "description": "Calculates normalized unit version of vector without checking for zero length.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Normalize",
    "description": "Normalize this vector in-place if it is large enough or set it to (0,0,0) otherwise.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Normal2D",
    "description": "Gets a normalized unit copy of the 2D components of the vector, ensuring it is safe to do so. Z is set to zero. Returns zero vector if vector length is too small to normalize.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_MirrorByPlane",
    "description": "Mirrors a vector about a plane.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InPlane",
        "type": "FPlane",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Left",
    "description": "3D vector Unreal left direction constant (0,-1,0)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsZero",
    "description": "Checks whether all components of the vector are exactly zero.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsUnit",
    "description": "Determines if vector is normalized / unit (length 1) within specified squared tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SquaredLenthTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsUniform",
    "description": "Checks whether all components of this vector are the same, within a tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsNormal",
    "description": "Determines if vector is normalized / unit (length 1).",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsNearlyZero",
    "description": "Checks whether vector is near to zero within a specified tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_IsNAN",
    "description": "Determines if any component is not a number (NAN)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_HeadingAngle",
    "description": "Convert a direction vector into a 'heading' angle.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_GetSignVector",
    "description": "Get a copy of the vector as sign only. Each component is set to +1 or -1, with the sign of zero treated as +1.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_GetProjection",
    "description": "Projects 2D components of vector based on Z.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_GetAbsMin",
    "description": "Find the minimum absolute element (abs(X), abs(Y) or abs(Z)) of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_GetAbsMax",
    "description": "Find the maximum absolute element (abs(X), abs(Y) or abs(Z)) of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_GetAbs",
    "description": "Get a copy of this vector with absolute value of each component.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Forward",
    "description": "3D vector Unreal forward direction constant (1,0,0)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Down",
    "description": "3D vector Unreal down direction constant (0,0,-1)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_DistanceSquared",
    "description": "Squared distance between two points.",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Distance2DSquared",
    "description": "Squared euclidean distance between two points in the XY plane (ignoring Z).",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Distance2D",
    "description": "Euclidean distance between two points in the XY plane (ignoring Z).",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Distance",
    "description": "Distance between two points.",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_CosineAngle2D",
    "description": "Returns the cosine of the angle between this vector and another projected onto the XY plane (no Z).",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ComponentMin",
    "description": "Find the minimum elements (X, Y and Z) between the two vector's components",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ComponentMax",
    "description": "Find the maximum elements (X, Y and Z) between the two vector's components",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ClampSizeMax2D",
    "description": "Create a copy of this vector, with the maximum 2D magnitude/size/length clamped to MaxSize. Z is unchanged.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ClampSizeMax",
    "description": "Create a copy of this vector, with its maximum magnitude/size/length clamped to MaxSize.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_ClampSize2D",
    "description": "Create a copy of this vector, with the 2D magnitude/size/length clamped between Min and Max. Z is unchanged.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_BoundedToCube",
    "description": "Get a copy of this vector, clamped inside of an axis aligned cube centered at the origin.",
    "parameters": [
      {
        "name": "InVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InRadius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_BoundedToBox",
    "description": "Get a copy of this vector, clamped inside of the specified axis aligned cube.",
    "parameters": [
      {
        "name": "InVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InBoxMin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InBoxMax",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Backward",
    "description": "3D vector Unreal backward direction constant (-1,0,0)",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_Assign",
    "description": "Assign the values of the supplied vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "InVector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector_AddBounded",
    "description": "Add a vector to this and clamp the result to an axis aligned cube centered at the origin.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "InAddVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InRadius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Zero",
    "description": "4D vector zero constant (0,0,0)",
    "parameters": [],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_SizeSquared3",
    "description": "Returns the squared length of the vector. The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_SizeSquared",
    "description": "Returns the squared length of the vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Size3",
    "description": "Returns the length of the vector. The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Size",
    "description": "Returns the length of the vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Set",
    "description": "Set the values of the vector directly.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": true
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_NormalUnsafe3",
    "description": "Calculates normalized unit version of vector without checking for zero length. The W element is ignored and the returned vector has W=0.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Normalize3",
    "description": "Normalize this vector in-place if it is large enough or set it to (0,0,0,0) otherwise. The W element is ignored and the returned vector has W=0.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": true
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Normal3",
    "description": "Gets a normalized unit copy of the vector, ensuring it is safe to do so based on the length. The W element is ignored and the returned vector has W=0. Returns zero vector if vector length is too small to safely normalize.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Negated",
    "description": "Gets a negated copy of the vector. Equivalent to -Vector for scripts.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_MirrorByVector3",
    "description": "Given a direction vector and a surface normal, returns the vector reflected across the surface normal. Produces a result like shining a laser at a mirror! The W element is ignored.",
    "parameters": [
      {
        "name": "Direction",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "SurfaceNormal",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_IsZero",
    "description": "Checks whether all components of the vector are exactly zero.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_IsUnit3",
    "description": "Determines if vector is normalized / unit (length 1) within specified squared tolerance. The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "SquaredLenthTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_IsNormal3",
    "description": "Determines if vector is normalized / unit (length 1). The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_IsNearlyZero3",
    "description": "Checks whether vector is near to zero within a specified tolerance. The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_IsNAN",
    "description": "Determines if any component is not a number (NAN)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_DotProduct3",
    "description": "Returns the dot product of two vectors - see http://mathworld.wolfram.com/DotProduct.html The W element is ignored.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_DotProduct",
    "description": "Returns the dot product of two vectors - see http://mathworld.wolfram.com/DotProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_CrossProduct3",
    "description": "Returns the cross product of two vectors - see  http://mathworld.wolfram.com/CrossProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector4_Assign",
    "description": "Assign the values of the supplied vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": true
      },
      {
        "name": "InVector",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector2DInterpTo_Constant",
    "description": "Tries to reach Target at a constant rate.",
    "parameters": [
      {
        "name": "Current",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector2DInterpTo",
    "description": "Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.",
    "parameters": [
      {
        "name": "Current",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector2D_Zero",
    "description": "2D zero vector constant (0,0)",
    "parameters": [],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector2D_Unit45Deg",
    "description": "2D unit vector constant along the 45 degree angle or symmetrical positive axes (sqrt(.5),sqrt(.5)) or (.707,.707). https://en.wikipedia.org/wiki/Unit_vector",
    "parameters": [],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Vector2D_One",
    "description": "2D one vector constant (1,1)",
    "parameters": [],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "VEase",
    "description": "Easing between A and B using a specified easing function",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EasingFunc",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendExp",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "UtcNow",
    "description": "Returns the UTC date and time on this computer",
    "parameters": [],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TransformVector4",
    "description": "Transform the input vector4 by a provided matrix4x4 and returns the resulting vector4.",
    "parameters": [
      {
        "name": "Matrix",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Vec4",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TransformRotation",
    "description": "Transform a rotator by the supplied transform. For example, if T was an object's transform, this would transform a rotation from local space to world space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TransformLocation",
    "description": "Transform a position by the supplied transform. For example, if T was an object's transform, this would transform a position from local space to world space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TransformDirection",
    "description": "Transform a direction vector by the supplied transform - will not change its length. For example, if T was an object's transform, this would transform a direction from local space to world space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Transform_Determinant",
    "description": "Calculates the determinant of the transform (converts to FMatrix internally)",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToUnixTimestampDouble",
    "description": "Returns this date as the number of seconds since the Unix Epoch (January 1st of 1970).",
    "parameters": [
      {
        "name": "Time",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToUnixTimestamp",
    "description": "Returns this date as the number of seconds since the Unix Epoch (January 1st of 1970).",
    "parameters": [
      {
        "name": "Time",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToSign2D",
    "description": "Get a copy of the vector as sign only. Each component is set to +1 or -1, with the sign of zero treated as +1.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToRounded2D",
    "description": "Get this vector as a vector where each component has been rounded to the nearest int.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToHex_LinearColor",
    "description": "Converts this color value to a hexadecimal string. The format of the string is RRGGBBAA.",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ToDirectionAndLength2D",
    "description": "Util to convert this vector into a unit direction vector and its original length.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "OutDir",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "OutLength",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Today",
    "description": "Returns the local date on this computer",
    "parameters": [],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TLerp",
    "description": "Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1).",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpMode",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TInterpTo",
    "description": "Tries to reach Target transform based on distance from Current position, giving a nice smooth feeling when tracking a position.",
    "parameters": [
      {
        "name": "Current",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TimespanZeroValue",
    "description": "Returns a zero time span value",
    "parameters": [],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TimespanRatio",
    "description": "Returns the ratio between two time spans (A / B), handles zero values",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TimespanMinValue",
    "description": "Returns the minimum time span value",
    "parameters": [],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TimespanMaxValue",
    "description": "Returns the maximum time span value",
    "parameters": [],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TimespanFromString",
    "description": "Converts a time span string to a Timespan object",
    "parameters": [
      {
        "name": "TimespanString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "FTimespan",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "TEase",
    "description": "Ease between A and B using a specified easing function.",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EasingFunc",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendExp",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Tan",
    "description": "Returns the tan of A (expects Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_VectorVector",
    "description": "Vector subtraction",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_VectorInt",
    "description": "Subtracts an integer from each component of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_VectorFloat",
    "description": "Subtracts a float from each component of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_Vector4Vector4",
    "description": "Returns subtraction of Vector B from Vector A (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_Vector2DVector2D",
    "description": "Returns subtraction of Vector B from Vector A (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_Vector2DFloat",
    "description": "Returns Vector A subtracted by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_TimespanTimespan",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_QuatQuat",
    "description": "Returns subtraction of Vector B from Vector A (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_LinearColorLinearColor",
    "description": "Element-wise subtraction of two linear colors (R-R, G-G, B-B, A-A)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_IntPointIntPoint",
    "description": "Returns IntPoint A subtracted by B",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_IntPointInt",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_IntInt",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_Int64Int64",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_DoubleDouble",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_DateTimeTimespan",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_DateTimeDateTime",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Subtract_ByteByte",
    "description": "Subtraction (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Square",
    "description": "Returns square of A (A*A)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Sqrt",
    "description": "Returns square root of A",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Spherical2DToUnitCartesian",
    "description": "Converts spherical coordinates on the unit sphere into a Cartesian unit length vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Sin",
    "description": "Returns the sine of A (expects Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SignOfInteger64",
    "description": "Sign (integer64, returns -1 if A < 0, 0 if A is zero, and +1 if A > 0)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SignOfInteger",
    "description": "Sign (integer, returns -1 if A < 0, 0 if A is zero, and +1 if A > 0)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SignOfFloat",
    "description": "Sign (float, returns -1 if A < 0, 0 if A is zero, and +1 if A > 0)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SetVectorSpringStateVelocity",
    "description": "Sets the state velocity of a vector spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FVectorSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "Velocity",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SetRandomStreamSeed",
    "description": "Set the seed of a random stream to a specific number",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": true
      },
      {
        "name": "NewSeed",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SetQuaternionSpringStateAngularVelocity",
    "description": "Sets the state angular velocity of a quaternion spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FQuaternionSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "AngularVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SetFloatSpringStateVelocity",
    "description": "Sets the state velocity of a float spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FFloatSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "Velocity",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Set2D",
    "description": "Set the values of the vector directly.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectVector",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectTransform",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectText",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectString",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectRotator",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectObject",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bSelectA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectName",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectInt",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectFloat",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectColor",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bPickA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SelectClass",
    "description": "If bPickA is true, A is returned, otherwise B is",
    "parameters": [
      {
        "name": "A",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSelectA",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SeedRandomStream",
    "description": "Create a new random seed for a random stream",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "SafeDivide",
    "description": "This functions returns 0 if B (the denominator) is zero",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Round64",
    "description": "Rounds A to the nearest integer (e.g., -1.6 becomes -2 and 1.6 becomes 2)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Round",
    "description": "Rounds A to the nearest integer (e.g., -1.6 becomes -2 and 1.6 becomes 2)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RotatorFromAxisAndAngle",
    "description": "Create a rotation from an axis and supplied angle (in degrees)",
    "parameters": [
      {
        "name": "Axis",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Angle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RotateAngleAxis",
    "description": "Returns result of vector A rotated by AngleDeg around Axis",
    "parameters": [
      {
        "name": "InVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "AngleDeg",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RLerp",
    "description": "Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bShortestPath",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RInterpTo_Constant",
    "description": "Tries to reach Target rotation at a constant rate.",
    "parameters": [
      {
        "name": "Current",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RInterpTo",
    "description": "Tries to reach Target rotation based on Current rotation, giving a nice smooth feeling when rotating to Target rotation.",
    "parameters": [
      {
        "name": "Current",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RGBToHSV_Vector",
    "description": "Converts a RGB linear color to HSV (where H is in R (0..360), S is in G (0..1), and V is in B (0..1))",
    "parameters": [
      {
        "name": "RGB",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "HSV",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RGBToHSV",
    "description": "Breaks apart a color into individual HSV components (as well as alpha) (Hue is [0..360) while Saturation and Value are 0..1)",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "H",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "S",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "V",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RGBLinearToHSV",
    "description": "Converts a RGB linear color to HSV (where H is in R, S is in G, and V is in B)",
    "parameters": [
      {
        "name": "RGB",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ResetVectorSpringState",
    "description": "Resets the state of a vector spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FVectorSpringState",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ResetRandomStream",
    "description": "Reset a random stream",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ResetQuaternionSpringState",
    "description": "Resets the state of a quaternion spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FQuaternionSpringState",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ResetFloatSpringState",
    "description": "Resets the state of a float spring",
    "parameters": [
      {
        "name": "SpringState",
        "type": "FFloatSpringState",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "REase",
    "description": "Easing between A and B using a specified easing function",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bShortestPath",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "EasingFunc",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendExp",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInEllipticalConeInRadiansFromStream",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution. The shape of the cone can be modified according to the yaw and pitch angles.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxYawInRadians",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPitchInRadians",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInEllipticalConeInRadians",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution. The shape of the cone can be modified according to the yaw and pitch angles.",
    "parameters": [
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxYawInRadians",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPitchInRadians",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInEllipticalConeInDegreesFromStream",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution. The shape of the cone can be modified according to the yaw and pitch angles.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxYawInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPitchInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInEllipticalConeInDegrees",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution. The shape of the cone can be modified according to the yaw and pitch angles.",
    "parameters": [
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxYawInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPitchInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInConeInRadiansFromStream",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeHalfAngleInRadians",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInConeInRadians",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution.",
    "parameters": [
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeHalfAngleInRadians",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInConeInDegreesFromStream",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeHalfAngleInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorInConeInDegrees",
    "description": "Returns a random vector with length of 1, within the specified cone, with uniform random distribution.",
    "parameters": [
      {
        "name": "ConeDir",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ConeHalfAngleInDegrees",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVectorFromStream",
    "description": "Returns a random vector with length of 1.0",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomUnitVector",
    "description": "Returns a random vector with length of 1",
    "parameters": [],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomRotatorFromStream",
    "description": "Create a random rotation",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "bRoll",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomRotator",
    "description": "Generates a random rotation, with optional random roll.",
    "parameters": [
      {
        "name": "bRoll",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomPointInBoundingBoxFromStream_Box",
    "description": "Returns a random point within the specified bounding box.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomPointInBoundingBoxFromStream",
    "description": "Returns a random point within the specified bounding box using the first vector as an origin and the second as the half size of the AABB.",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomPointInBoundingBox_Box",
    "description": "Returns a random point within the specified bounding box.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomPointInBoundingBox",
    "description": "Returns a random point within the specified bounding box using the first vector as an origin and the second as the box extents.",
    "parameters": [
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomIntegerInRangeFromStream",
    "description": "Return a random integer between Min and Max (>= Min and <= Max)",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomIntegerInRange",
    "description": "Return a random integer between Min and Max (>= Min and <= Max)",
    "parameters": [
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomIntegerFromStream",
    "description": "Returns a uniformly distributed random number between 0 and Max - 1",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomInteger64InRange",
    "description": "Return a random integer64 between Min and Max (>= Min and <= Max)",
    "parameters": [
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomInteger64",
    "description": "Returns a uniformly distributed random number between 0 and Max - 1",
    "parameters": [
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomInteger",
    "description": "Returns a uniformly distributed random number between 0 and Max - 1",
    "parameters": [
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomFloatInRangeFromStream",
    "description": "Generate a random number between Min and Max",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomFloatInRange",
    "description": "Generate a random number between Min and Max",
    "parameters": [
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomFloatFromStream",
    "description": "Returns a random float between 0 and 1",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomFloat",
    "description": "Returns a random float between 0 and 1",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomBoolWithWeightFromStream",
    "description": "Get a random chance with the specified weight. Range of weight is 0.0 - 1.0 E.g., Weight = .6 return value = True 60% of the time",
    "parameters": [
      {
        "name": "RandomStream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomBoolWithWeight",
    "description": "Get a random chance with the specified weight. Range of weight is 0.0 - 1.0 E.g., Weight = .6 return value = True 60% of the time",
    "parameters": [
      {
        "name": "Weight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomBoolFromStream",
    "description": "Returns a random bool",
    "parameters": [
      {
        "name": "Stream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RandomBool",
    "description": "Returns a uniformly distributed random bool",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "RadiansToDegrees",
    "description": "Returns degrees value based on the input radians",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "QuaternionSpringInterp",
    "description": "Uses a simple spring model to interpolate a quaternion from Current to Target.",
    "parameters": [
      {
        "name": "Current",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "SpringState",
        "type": "FQuaternionSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "Stiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CriticalDampingFactor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Mass",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TargetVelocityAmount",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bInitializeFromTarget",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_VectorUp",
    "description": "Get the up direction (Z axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_VectorRight",
    "description": "Get the right direction (Y axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_VectorForward",
    "description": "Get the forward direction (X axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_UnrotateVector",
    "description": "Rotate a vector by the inverse of this quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Slerp",
    "description": "Spherical interpolation between Quaternions. Result is normalized.",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_SizeSquared",
    "description": "Get the squared length of the quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Size",
    "description": "Get the length of the quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_SetFromEuler",
    "description": "Convert a vector of floating-point Euler angles (in degrees) into a Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": true
      },
      {
        "name": "Euler",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_SetComponents",
    "description": "Set X, Y, Z, W components of Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": true
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Rotator",
    "description": "Converts to Rotator representation of this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_RotateVector",
    "description": "Rotate a vector by this quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Normalized",
    "description": "Get a normalized copy of this quaternion. If it is too small, returns an identity quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Normalize",
    "description": "Normalize this quaternion if it is large enough as compared to the supplied tolerance. If it is too small then set it to the identity quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": true
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_MakeFromEuler",
    "description": "Convert a vector of floating-point Euler angles (in degrees) into a Quaternion.",
    "parameters": [
      {
        "name": "Euler",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Log",
    "description": "Quaternion with W=0 and V=theta*v. Used in combination with Exp().",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_IsNormalized",
    "description": "Return true if this quaternion is normalized",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_IsNonFinite",
    "description": "Determine if there are any non-finite values (NaN or Inf) in this Quat.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_IsIdentity",
    "description": "Checks whether this Quaternion is an Identity Quaternion. Assumes Quaternion tested is normalized.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_IsFinite",
    "description": "Determine if all the values  are finite (not NaN nor Inf) in this Quat.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Inversed",
    "description": "Return an inversed copy of this quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Identity",
    "description": "Identity quaternion constant",
    "parameters": [],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_GetRotationAxis",
    "description": "Get the axis of rotation of the Quaternion. This is the axis around which rotation occurs to transform the canonical coordinate system to the target orientation. For the identity Quaternion which has no such rotation, FVector(1,0,0) is returned.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_GetAxisZ",
    "description": "Get the up direction (Z axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_GetAxisY",
    "description": "Get the right direction (Y axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_GetAxisX",
    "description": "Get the forward direction (X axis) after it has been rotated by this Quaternion.",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_GetAngle",
    "description": "Get the angle of this quaternion",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_FindBetweenVectors",
    "description": "Generates the 'smallest' (geodesic) rotation around a sphere between two vectors of arbitrary length.",
    "parameters": [
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_FindBetweenNormals",
    "description": "Generates the 'smallest' (geodesic) rotation around a sphere between two normals (assumed to be unit length).",
    "parameters": [
      {
        "name": "StartNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Exp",
    "description": "Used in combination with Log(). Assumes a quaternion with W=0 and V=theta*v (where |v| = 1). Exp(q) = (sin(theta)*v, cos(theta))",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_Euler",
    "description": "Convert a Quaternion into floating-point Euler angles (in degrees).",
    "parameters": [
      {
        "name": "Q",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_EnforceShortestArcWith",
    "description": "Modify the quaternion to ensure that the delta between it and B represents the shortest possible rotation angle.",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": true
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Quat_AngularDistance",
    "description": "Find the angular distance/difference between two rotation quaternions.",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ProjectVectorOnToVector",
    "description": "Projects one vector (V) onto another (Target) and returns the projected vector. If Target is nearly zero in length, returns the zero vector.",
    "parameters": [
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ProjectVectorOnToPlane",
    "description": "Projects a vector onto a plane defined by a normalized vector (PlaneNormal).",
    "parameters": [
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ProjectPointOnToPlane",
    "description": "Projects/snaps a point onto a plane defined by a point on the plane and a plane normal.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneBase",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "PointsAreCoplanar",
    "description": "Determines whether a given set of points are coplanar, with a tolerance. Any three points or less are always coplanar.",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "PerlinNoise1D",
    "description": "Generates a 1D Perlin noise from the given value.  Returns a continuous random value between -1.0 and 1.0.",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Percent_IntInt",
    "description": "Modulo (A % B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Percent_Int64Int64",
    "description": "Modulo (A % B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Percent_FloatFloat",
    "description": "",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Percent_ByteByte",
    "description": "Modulo (A % B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Or_IntInt",
    "description": "Bitwise OR (A | B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Or_Int64Int64",
    "description": "Bitwise OR (A | B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Now",
    "description": "Returns the local date and time on this computer",
    "parameters": [],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqualExactly_VectorVector",
    "description": "Returns true if vector A is not equal to vector B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqualExactly_Vector4Vector4",
    "description": "Returns true if vector A is not equal to vector B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqualExactly_Vector2DVector2D",
    "description": "Returns true if vector2D A is not equal to vector2D B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_VectorVector",
    "description": "Returns true if vector A is not equal to vector B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_Vector4Vector4",
    "description": "Returns true if vector A is not equal to vector B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_Vector2DVector2D",
    "description": "Returns true if vector2D A is not equal to vector2D B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_TimespanTimespan",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_RotatorRotator",
    "description": "Returns true if rotator A is not equal to rotator B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_QuatQuat",
    "description": "Returns true if Quat A is not equal to Quat B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_ObjectObject",
    "description": "Returns true if A and B are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_NameName",
    "description": "Returns true if A and B are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_MatrixMatrix",
    "description": "Checks whether another Matrix is not equal to this, within specified tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_LinearColorLinearColor",
    "description": "Returns true if linear color A is not equal to linear color B (A != B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_IntPointIntPoint",
    "description": "Returns true if IntPoint A is NOT equal to IntPoint B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_IntInt",
    "description": "Returns true if A is not equal to B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_Int64Int64",
    "description": "Returns true if A is not equal to B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_DoubleDouble",
    "description": "Returns true if A does not equal B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_DateTimeDateTime",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_ClassClass",
    "description": "Returns true if A and B are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_ByteByte",
    "description": "Returns true if A is not equal to B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NotEqual_BoolBool",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Not_PreBool",
    "description": "Returns the logical complement of the Boolean value (NOT A)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Not_Int64",
    "description": "Bitwise NOT (~A)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Not_Int",
    "description": "Bitwise NOT (~A)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NormalSafe2D",
    "description": "Gets a normalized copy of the vector, checking it is safe to do so based on the length. Returns zero vector if vector length is too small to safely normalize.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NormalizeToRange",
    "description": "Returns Value normalized to the given range.  (e.g. 20 normalized to the range 10->50 would result in 0.25)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RangeMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NormalizedDeltaRotator",
    "description": "Normalized A-B",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NormalizeAxis",
    "description": "Clamps an angle to the range of [-180, 180].",
    "parameters": [
      {
        "name": "Angle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Normalize2D",
    "description": "Normalize this vector in-place if it is large enough, set it to (0,0) otherwise.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Normal2D",
    "description": "Returns a unit normal version of the 2D vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Normal",
    "description": "Gets a normalized unit copy of the vector, ensuring it is safe to do so based on the length. Returns zero vector if vector length is too small to safely normalize.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NegateVector",
    "description": "Negate a vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NegateRotator",
    "description": "Negate a rotator",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Negated2D",
    "description": "Gets a negated copy of the vector.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NearlyEqual_TransformTransform",
    "description": "Returns true if transform A is nearly equal to B",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationTolerance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RotationTolerance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Scale3DTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "NearlyEqual_FloatFloat",
    "description": "Returns true if A is nearly equal to B (|A - B| < ErrorTolerance)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MultiplyMultiply_FloatFloat",
    "description": "Power (Base to the Exp-th power)",
    "parameters": [
      {
        "name": "Base",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Exp",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MultiplyByPi",
    "description": "Multiplies the input value by pi.",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_VectorVector",
    "description": "Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y, A.z*B.z})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_VectorInt",
    "description": "Scales Vector A by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_VectorFloat",
    "description": "Scales Vector A by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_Vector4Vector4",
    "description": "Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y, A.z*B.z, A.w*B.w})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_Vector2DVector2D",
    "description": "Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_Vector2DFloat",
    "description": "Returns Vector A scaled by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_TimespanFloat",
    "description": "Scalar multiplication (A * s)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "Scalar",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_RotatorInt",
    "description": "Returns rotator representing rotator A scaled by B",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_RotatorFloat",
    "description": "Returns rotator representing rotator A scaled by B",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_QuatQuat",
    "description": "Gets the result of multiplying two quaternions (A * B). Order matters when composing quaternions: C = A * B will yield a quaternion C that logically first applies B then A to any subsequent transformation (right first, then left).",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_MatrixMatrix",
    "description": "Gets the result of multiplying a Matrix to this.",
    "parameters": [
      {
        "name": "A",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_MatrixFloat",
    "description": "Multiplies all values of the matrix by a float. If your Matrix represents a Transform that you wish to scale you should use Apply Scale instead",
    "parameters": [
      {
        "name": "A",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_LinearColorLinearColor",
    "description": "Element-wise multiplication of two linear colors (R*R, G*G, B*B, A*A)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_LinearColorFloat",
    "description": "Element-wise multiplication of a linear color by a float (F*R, F*G, F*B, F*A)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_IntPointIntPoint",
    "description": "Returns IntPoint A multiplied by B",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_IntPointInt",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_IntInt",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_IntFloat",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_Int64Int64",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_DoubleDouble",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Multiply_ByteByte",
    "description": "Multiplication (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MirrorVectorByNormal",
    "description": "Given a direction vector and a surface normal, returns the vector reflected across the surface normal. Produces a result like shining a laser at a mirror!",
    "parameters": [
      {
        "name": "InVect",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MinOfIntArray",
    "description": "Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "IntArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMinValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MinValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MinOfFloatArray",
    "description": "Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "FloatArray",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMinValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MinValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MinOfByteArray",
    "description": "Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "ByteArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMinValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MinValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MinInt64",
    "description": "Returns the minimum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MinAreaRectangle",
    "description": "Finds the minimum area rectangle that encloses a set of coplanar points. Uses the exhaustive search algorithm in http://www.geometrictools.com/Documentation/MinimumAreaRectangle.pdf",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "SampleSurfaceNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRectCenter",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutRectRotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "OutRectLengthX",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutRectLengthY",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "bDebugDraw",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Min",
    "description": "Returns the minimum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MedianOfIntArray",
    "description": "Returns median of all array entries. Returns value of 0 if the supplied array is empty.",
    "parameters": [
      {
        "name": "IntArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "MedianValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MaxOfIntArray",
    "description": "Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "IntArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMaxValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MaxValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MaxOfFloatArray",
    "description": "Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "FloatArray",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMaxValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MaxValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MaxOfByteArray",
    "description": "Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.",
    "parameters": [
      {
        "name": "ByteArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexOfMaxValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "MaxValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MaxInt64",
    "description": "Returns the maximum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Max",
    "description": "Returns the maximum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_TransformVector4",
    "description": "Transform a vector by the matrix. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_TransformVector",
    "description": "Transform a direction vector - will not take into account translation part of the FMatrix. If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_TransformPosition",
    "description": "Transform a location - will take into account translation part of the FMatrix. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_ToQuat",
    "description": "Transform a rotation matrix into a quaternion. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_SetOrigin",
    "description": "Set the origin of the coordinate system to the given vector (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "NewOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_SetColumn",
    "description": "",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "Column",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_SetAxis",
    "description": "set an axis of this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "Axis",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "AxisVector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_ScaleTranslation",
    "description": "Scale the translation part of the matrix by the supplied vector. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale3D",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_RemoveTranslation",
    "description": "Remove any translation from this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_RemoveScaling",
    "description": "Remove any scaling from this matrix (ie magnitude of each row is 1) with error Tolerance (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": true
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_Mirror",
    "description": "Utility for mirroring this transform across a certain plane, and flipping one of the axis as well. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "MirrorAxis",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "FlipAxis",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_InverseTransformVector",
    "description": "Transform a direction vector by the inverse of this matrix - will not take into account translation part. If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT with adjoint of matrix inverse. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_InverseTransformPosition",
    "description": "Inverts the matrix and then transforms V - correctly handles scaling in this matrix. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_Identity",
    "description": "Identity matrix",
    "parameters": [],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetUnitAxis",
    "description": "get unit length axis of this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetUnitAxes",
    "description": "get unit length axes of this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetTransposed",
    "description": "Transpose.",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetTransposeAdjoint",
    "description": "Get the Transose Adjoint of the Matrix.",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetScaleVector",
    "description": "return a 3D scale vector calculated from this matrix (where each component is the magnitude of a row vector) with error Tolerance. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetScaledAxis",
    "description": "get axis of this matrix scaled by the scale of the matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetScaledAxes",
    "description": "get axes of this matrix scaled by the scale of the matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetRotDeterminant",
    "description": "(Assumes Top Left 3x3 Submatrix represents a Rotation)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetRotator",
    "description": "Get the rotator representation of this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetOrigin",
    "description": "Get the origin of the co-ordinate system (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "InMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetMaximumAxisScale",
    "description": "(Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetMatrixWithoutScale",
    "description": "Returns matrix after RemoveScaling with error Tolerance (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetInverse",
    "description": "Get the inverse of the Matrix. Handles nil matrices.",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumTopPlane",
    "description": "Get the top plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumRightPlane",
    "description": "Get the right plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumNearPlane",
    "description": "Get the near plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumLeftPlane",
    "description": "Get the left plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumFarPlane",
    "description": "Get the far plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetFrustumBottomPlane",
    "description": "Get the bottom plane of the Frustum of this matrix (Assumes Matrix represents a View Projection Matrix)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPlane",
        "type": "FPlane",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetDeterminant",
    "description": "",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_GetColumn",
    "description": "get a column of this matrix",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Column",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_ContainsNaN",
    "description": "Returns true if any element of this matrix is NaN",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_ConcatenateTranslation",
    "description": "Returns a matrix with an additional translation concatenated. (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Translation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Matrix_ApplyScale",
    "description": "Apply Scale to this matrix (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "M",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MapRangeUnclamped",
    "description": "Returns Value mapped from one range into another.  (e.g. 20 normalized from the range 10->50 to 20->40 would result in 25)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeA",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeB",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeA",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeB",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MapRangeClamped",
    "description": "Returns Value mapped from one range into another where the Value is clamped to the Input Range.  (e.g. 0.5 normalized from the range 0->1 to 0->50 would result in 25)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeA",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeB",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeA",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutRangeB",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector_NetQuantizeNormal",
    "description": "",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector_NetQuantizeNormal"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector_NetQuantize100",
    "description": "",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector_NetQuantize100"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector_NetQuantize10",
    "description": "",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector_NetQuantize10"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector_NetQuantize",
    "description": "NetQuantized vector make/breaks",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector_NetQuantize"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector4",
    "description": "Makes a 4D vector {X, Y, Z, W}",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector2D",
    "description": "Makes a 2d vector {X, Y}",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeVector",
    "description": "Makes a vector {X, Y, Z}",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeTransform",
    "description": "Make a transform from location, rotation and scale",
    "parameters": [
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeTimespan2",
    "description": "Makes a Timespan struct",
    "parameters": [
      {
        "name": "Days",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hours",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Minutes",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Seconds",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "FractionNano",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeTimespan",
    "description": "Makes a Timespan struct",
    "parameters": [
      {
        "name": "Days",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hours",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Minutes",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Seconds",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Milliseconds",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromZY",
    "description": "Builds a matrix with given Z and Y axes. Z will remain fixed, Y may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromZX",
    "description": "Builds a matrix with given Z and X axes. Z will remain fixed, X may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromZ",
    "description": "Builds a rotation matrix given only a ZAxis. X and Y are unspecified but will be orthonormal. ZAxis need not be normalized.",
    "parameters": [
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromYZ",
    "description": "Builds a matrix with given Y and Z axes. Y will remain fixed, Z may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromYX",
    "description": "Builds a matrix with given Y and X axes. Y will remain fixed, X may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromY",
    "description": "Builds a rotation matrix given only a YAxis. X and Z are unspecified but will be orthonormal. YAxis need not be normalized.",
    "parameters": [
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromXZ",
    "description": "Builds a matrix with given X and Z axes. X will remain fixed, Z may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromXY",
    "description": "Builds a matrix with given X and Y axes. X will remain fixed, Y may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized.",
    "parameters": [
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotFromX",
    "description": "Builds a rotator given only a XAxis. Y and Z are unspecified but will be orthonormal. XAxis need not be normalized.",
    "parameters": [
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotator",
    "description": "Makes a rotator {Roll, Pitch, Yaw} from rotation values supplied in degrees",
    "parameters": [
      {
        "name": "Roll",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Pitch",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Yaw",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRotationFromAxes",
    "description": "Build a reference frame from three axes",
    "parameters": [
      {
        "name": "Forward",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Right",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Up",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRelativeTransform",
    "description": "Computes a relative transform of one transform compared to another. Example: ChildOffset = MakeRelativeTransform(Child.GetActorTransform(), Parent.GetActorTransform()) This computes the relative transform of the Child from the Parent.",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTo",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeRandomStream",
    "description": "Makes a SRand-based random number generator",
    "parameters": [
      {
        "name": "InitialSeed",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRandomStream"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeQuat",
    "description": "Makes a quat {X, Y, Z, W}",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeQualifiedFrameTime",
    "description": "Creates a FQualifiedFrameTime out of a frame number, frame rate, and optional 0-1 clamped subframe.",
    "parameters": [
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "FrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      },
      {
        "name": "SubFrame",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FQualifiedFrameTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakePulsatingValue",
    "description": "Simple function to create a pulsating scalar value",
    "parameters": [
      {
        "name": "InCurrentTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InPulsesPerSecond",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InPhase",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakePlaneFromPointAndNormal",
    "description": "Creates a plane with a facing direction of Normal at the given Point",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPlane"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeFrameRate",
    "description": "Creates a FFrameRate from a Numerator and a Denominator. Enforces that the Denominator is at least one.",
    "parameters": [
      {
        "name": "Numerator",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Denominator",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FFrameRate"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeDateTime",
    "description": "Makes a DateTime struct",
    "parameters": [
      {
        "name": "Year",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Month",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Day",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hour",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Minute",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Second",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Millisecond",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeColor",
    "description": "Make a color from individual color components (RGB space)",
    "parameters": [
      {
        "name": "R",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "G",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "A",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeBoxWithOrigin",
    "description": "Utility function to build an box from an Origin and Extent",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeBoxSphereBounds",
    "description": "Makes an FBoxSphereBounds given an origin, extent, and radius",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBoxSphereBounds"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeBox2D",
    "description": "Makes an FBox2D from Min and Max and sets IsValid to true",
    "parameters": [
      {
        "name": "Min",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "MakeBox",
    "description": "Makes an FBox from Min and Max and sets IsValid to true",
    "parameters": [
      {
        "name": "Min",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Loge",
    "description": "Returns natural log of A (if e^R == A, returns R)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Log",
    "description": "Returns log of A base B (if B^R == A, returns R)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Base",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinePlaneIntersection_OriginNormal",
    "description": "Computes the intersection point between a line and a plane.",
    "parameters": [
      {
        "name": "LineStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "T",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Intersection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinePlaneIntersection",
    "description": "Computes the intersection point between a line and a plane.",
    "parameters": [
      {
        "name": "LineStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "APlane",
        "type": "FPlane",
        "optional": false,
        "out": false
      },
      {
        "name": "T",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Intersection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColorLerpUsingHSV",
    "description": "Linearly interpolates between two colors by the specified Alpha amount (100% of A when Alpha=0 and 100% of B when Alpha=1).  The interpolation is performed in HSV color space taking the shortest path to the new color's hue.  This can give better results than a normal lerp, but is much more expensive.  The incoming colors are in RGB space, and the output color will be RGB.  The alpha value will also be interpolated.",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColorLerp",
    "description": "Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Yellow",
    "description": "Yellow linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_White",
    "description": "White linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Transparent",
    "description": "Transparent linear color - black with 0 opacity/alpha",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_ToRGBE",
    "description": "Converts from linear to 8-bit RGBE as outlined in Gregory Ward's Real Pixels article, Graphics Gems II, page 80.",
    "parameters": [
      {
        "name": "InLinearColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_ToNewOpacity",
    "description": "Returns a copy of this color using the specified opacity/alpha.",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "InOpacity",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetTemperature",
    "description": "Converts temperature in Kelvins of a black body radiator to RGB chromaticity.",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "InTemperature",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetRGBA",
    "description": "Assign individual linear RGBA components.",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "R",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "G",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "A",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetRandomHue",
    "description": "Sets to a random color. Choses a quite nice color based on a random hue.",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetFromSRGB",
    "description": "Assigns an FColor coming from an observed sRGB output, into a linear color.",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "InSRGB",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetFromPow22",
    "description": "Assigns an FColor coming from an observed Pow(1/2.2) output, into a linear color.",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "InColor",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_SetFromHSV",
    "description": "Assigns an HSV color to a linear space RGB color",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "H",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "S",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "A",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Set",
    "description": "Assign contents of InColor",
    "parameters": [
      {
        "name": "InOutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Red",
    "description": "Red linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_QuantizeRound",
    "description": "Quantizes the linear color with rounding and returns the result as an 8-bit color.  This bypasses the SRGB conversion.",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Quantize",
    "description": "Quantizes the linear color and returns the result as an 8-bit color.  This bypasses the SRGB conversion.",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_IsNearEqual",
    "description": "Returns true if linear color A is equal to linear color B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Green",
    "description": "Green linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Gray",
    "description": "Grey linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_GetMin",
    "description": "Returns the minimum color channel value in this color structure",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_GetMax",
    "description": "Returns the maximum color channel value in this color structure",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_GetLuminance",
    "description": "Returns the perceived brightness of a color on a display taking into account the impact on the human eye per color channel: green > red > blue.",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Distance",
    "description": "Euclidean distance between two color points.",
    "parameters": [
      {
        "name": "C1",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "C2",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Desaturated",
    "description": "Returns a desaturated color, with 0 meaning no desaturation and 1 == full desaturation",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "InDesaturation",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Blue",
    "description": "Blue linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LinearColor_Black",
    "description": "Black linear color",
    "parameters": [],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessLess_VectorRotator",
    "description": "Returns result of vector A rotated by the inverse of Rotator B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_TimespanTimespan",
    "description": "Returns true if A is less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_IntInt",
    "description": "Returns true if A is less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_Int64Int64",
    "description": "Returns true if A is less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_DoubleDouble",
    "description": "Returns true if A is Less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_DateTimeDateTime",
    "description": "Returns true if A is less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "LessEqual_ByteByte",
    "description": "Returns true if A is less than or equal to B (A <= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_TimespanTimespan",
    "description": "Returns true if A is less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_IntInt",
    "description": "Returns true if A is less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_Int64Int64",
    "description": "Returns true if A is less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_DoubleDouble",
    "description": "Returns true if A is Less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_DateTimeDateTime",
    "description": "Returns true if A is less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Less_ByteByte",
    "description": "Returns true if A is less than B (A < B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Lerp",
    "description": "Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsZero2D",
    "description": "Checks whether all components of the vector are exactly zero.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsPointInBoxWithTransform_Box",
    "description": "Determines whether a given point is in a box with a given transform. Includes points on the box.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxWorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxExtent",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsPointInBoxWithTransform",
    "description": "Determines whether a given point is in a box with a given transform. Includes points on the box.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxWorldTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsPointInBox_Box",
    "description": "Determines whether the given point is in a box. Includes points on the box.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsPointInBox",
    "description": "Determines whether the given point is in a box. Includes points on the box.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsNearlyZero2D",
    "description": "Checks whether vector is near to zero within a specified tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsMorning",
    "description": "Returns whether A's time is in the morning",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsLeapYear",
    "description": "Returns whether given year is a leap year",
    "parameters": [
      {
        "name": "Year",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IsAfternoon",
    "description": "Returns whether A's time is in the afternoon",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InvertTransform",
    "description": "Returns the inverse of the given transform T. Example: Given a LocalToWorld transform, WorldToLocal will be returned.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InverseTransformRotation",
    "description": "Transform a rotator by the inverse of the supplied transform. For example, if T was an object's transform, this would transform a rotation from world space to local space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InverseTransformLocation",
    "description": "Transform a position by the inverse of the supplied transform. For example, if T was an object's transform, this would transform a position from world space to local space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InverseTransformDirection",
    "description": "Transform a direction vector by the inverse of the supplied transform - will not change its length. For example, if T was an object's transform, this would transform a direction from world space to local space.",
    "parameters": [
      {
        "name": "T",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_Zero",
    "description": "Zero Int Point (0, 0)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_Up",
    "description": "Up Int Point (0, -1)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_Right",
    "description": "Right Int Point (1, 0)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_One",
    "description": "One Int Point (1, 1)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_Left",
    "description": "Left Int Point (-1, 0)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "IntPoint_Down",
    "description": "Down Int Point (0, 1)",
    "parameters": [],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InRange_IntInt",
    "description": "Returns true if value is between Min and Max (V >= Min && V <= Max) If InclusiveMin is true, value needs to be equal or larger than Min, else it needs to be larger If InclusiveMax is true, value needs to be smaller or equal than Max, else it needs to be smaller",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InclusiveMin",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InclusiveMax",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InRange_Int64Int64",
    "description": "Returns true if value is between Min and Max (V >= Min && V <= Max) If InclusiveMin is true, value needs to be equal or larger than Min, else it needs to be larger If InclusiveMax is true, value needs to be smaller or equal than Max, else it needs to be smaller",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InclusiveMin",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InclusiveMax",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "InRange_FloatFloat",
    "description": "Returns true if value is between Min and Max (V >= Min && V <= Max) If InclusiveMin is true, value needs to be equal or larger than Min, else it needs to be larger If InclusiveMax is true, value needs to be smaller or equal than Max, else it needs to be smaller",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InclusiveMin",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InclusiveMax",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Hypotenuse",
    "description": "Returns the hypotenuse of a right-angled triangle given the width and height.",
    "parameters": [
      {
        "name": "Width",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "HSVToRGBLinear",
    "description": "Converts a HSV linear color (where H is in R, S is in G, and V is in B) to linear RGB",
    "parameters": [
      {
        "name": "HSV",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "HSVToRGB_Vector",
    "description": "Converts a HSV linear color (where H is in R (0..360), S is in G (0..1), and V is in B (0..1)) to RGB",
    "parameters": [
      {
        "name": "HSV",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "RGB",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "HSVToRGB",
    "description": "Make a color from individual color components (HSV space; Hue is [0..360) while Saturation and Value are 0..1)",
    "parameters": [
      {
        "name": "H",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "S",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "A",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GridSnap_Float",
    "description": "Snaps a value to the nearest grid multiple. E.g., Location = 5.1, GridSize = 10.0 : return value = 10.0 If GridSize is 0 Location is returned if GridSize is very small precision issues may occur.",
    "parameters": [
      {
        "name": "Location",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "GridSize",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterGreater_VectorRotator",
    "description": "Returns result of vector A rotated by Rotator B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_TimespanTimespan",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_IntInt",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_Int64Int64",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_DoubleDouble",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_DateTimeDateTime",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GreaterEqual_ByteByte",
    "description": "Returns true if A is greater than or equal to B (A >= B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_TimespanTimespan",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_IntInt",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_Int64Int64",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_DoubleDouble",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_DateTimeDateTime",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Greater_ByteByte",
    "description": "Returns true if A is greater than B (A > B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetYear",
    "description": "Returns the year component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetYawPitchFromVector",
    "description": "Breaks a vector apart into Yaw, Pitch rotation values given in degrees. (non-clamped)",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Yaw",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Pitch",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetVectorArrayAverage",
    "description": "Find the average of an array of vectors",
    "parameters": [
      {
        "name": "Vectors",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetUpVector",
    "description": "Rotate the world up vector by the given rotation",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTotalSeconds",
    "description": "Returns the total number of seconds in A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTotalMinutes",
    "description": "Returns the total number of minutes in A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTotalMilliseconds",
    "description": "Returns the total number of milliseconds in A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTotalHours",
    "description": "Returns the total number of hours in A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTotalDays",
    "description": "Returns the total number of days in A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTimeOfDay",
    "description": "Returns the time elapsed since midnight of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetTAU",
    "description": "Returns the value of TAU (= 2 * PI)",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetSlopeDegreeAngles",
    "description": "Returns Slope Pitch and Roll angles in degrees based on the following information:",
    "parameters": [
      {
        "name": "MyRightYAxis",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "FloorNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "UpVector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSlopePitchDegreeAngle",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutSlopeRollDegreeAngle",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetSeconds",
    "description": "Returns the seconds component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetSecond",
    "description": "Returns the second component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetRuntimeFloatCurveValue",
    "description": "Evaluate this runtime float curve at the specified time",
    "parameters": [
      {
        "name": "Curve",
        "type": "FRuntimeFloatCurve",
        "optional": false,
        "out": false
      },
      {
        "name": "InTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDefaultValue",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetRotated2D",
    "description": "Rotates around axis (0,0,1)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "AngleDeg",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetRightVector",
    "description": "Rotate the world right vector by the given rotation",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetReflectionVector",
    "description": "Given a direction vector and a surface normal, returns the vector reflected across the surface normal. Produces a result like shining a laser at a mirror!",
    "parameters": [
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SurfaceNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetPointDistanceToSegment",
    "description": "Find the distance from a point to the closest point on a segment.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetPointDistanceToLine",
    "description": "Find the distance from a point to the closest point on an infinite line.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetPI",
    "description": "Returns the value of PI",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMonth",
    "description": "Returns the month component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMinutes",
    "description": "Returns the minutes component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMinute",
    "description": "Returns the minute component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMinElement",
    "description": "Find the minimum element (X, Y or Z) of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMin2D",
    "description": "Get the minimum value of the vector's components.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMilliseconds",
    "description": "Returns the milliseconds component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMillisecond",
    "description": "Returns the millisecond component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMaxElement",
    "description": "Find the maximum element (X, Y or Z) of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetMax2D",
    "description": "Get the maximum value of the vector's components.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetHours",
    "description": "Returns the hours component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetHour12",
    "description": "Returns the hour component of A (12h format)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetHour",
    "description": "Returns the hour component of A (24h format)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetForwardVector",
    "description": "Rotate the world forward vector by the given rotation",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDuration",
    "description": "Returns the absolute value of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDirectionUnitVector",
    "description": "Find the unit direction vector from one position to another or (0,0,0) if positions are the same.",
    "parameters": [
      {
        "name": "From",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "To",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDays",
    "description": "Returns the days component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDayOfYear",
    "description": "Returns the day of year of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDay",
    "description": "Returns the day component of A (1 to 31)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetDate",
    "description": "Returns the date component of A",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetBoxVolume",
    "description": "Gets the volume of this box.",
    "parameters": [
      {
        "name": "InBox",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetBoxSize",
    "description": "Gets the size of this box.",
    "parameters": [
      {
        "name": "InBox",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetBoxCenter",
    "description": "Gets the center point of this box.",
    "parameters": [
      {
        "name": "InBox",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetAzimuthAndElevation",
    "description": "Breaks a direction vector apart into Azimuth (Yaw) and Elevation (Pitch) rotation values given in degrees. (non-clamped) Relative to the provided reference frame (an Actor's WorldTransform for example)",
    "parameters": [
      {
        "name": "InDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ReferenceFrame",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Azimuth",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Elevation",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetAxes",
    "description": "Get the reference frame direction vectors (axes) described by this rotation",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetAbsMax2D",
    "description": "Get the maximum absolute value of the vector's components.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "GetAbs2D",
    "description": "Get a copy of this vector with absolute value of each component.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FWrap",
    "description": "Returns Value wrapped from A and B (inclusive)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FTruncVector",
    "description": "Rounds A to an integer with truncation towards zero for each element in a vector.  (e.g. -1.7 truncated to -1, 2.8 truncated to 2)",
    "parameters": [
      {
        "name": "InVector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FTrunc64",
    "description": "Rounds A towards zero, truncating the fractional part (e.g., -1.6 becomes -1 and 1.6 becomes 1)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FTrunc",
    "description": "Rounds A towards zero, truncating the fractional part (e.g., -1.6 becomes -1 and 1.6 becomes 1)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromUnixTimestamp",
    "description": "Returns the date from Unix time (seconds from midnight 1970-01-01)",
    "parameters": [
      {
        "name": "UnixTime",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromSeconds",
    "description": "Returns a time span that represents the specified number of seconds",
    "parameters": [
      {
        "name": "Seconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromMinutes",
    "description": "Returns a time span that represents the specified number of minutes",
    "parameters": [
      {
        "name": "Minutes",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromMilliseconds",
    "description": "Returns a time span that represents the specified number of milliseconds",
    "parameters": [
      {
        "name": "Milliseconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromHours",
    "description": "Returns a time span that represents the specified number of hours",
    "parameters": [
      {
        "name": "Hours",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FromDays",
    "description": "Returns a time span that represents the specified number of days",
    "parameters": [
      {
        "name": "Days",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Fraction",
    "description": "Returns the fractional part of a float.",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FMod64",
    "description": "Returns the number of times Divisor will go into Dividend (i.e., Dividend divided by Divisor), as well as the remainder",
    "parameters": [
      {
        "name": "Dividend",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Divisor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Remainder",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FMod",
    "description": "Returns the number of times Divisor will go into Dividend (i.e., Dividend divided by Divisor), as well as the remainder",
    "parameters": [
      {
        "name": "Dividend",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Divisor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Remainder",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FMin",
    "description": "Returns the minimum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FMax",
    "description": "Returns the maximum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FloatSpringInterp",
    "description": "Uses a simple spring model to interpolate a float from Current to Target.",
    "parameters": [
      {
        "name": "Current",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SpringState",
        "type": "FFloatSpringState",
        "optional": false,
        "out": true
      },
      {
        "name": "Stiffness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CriticalDampingFactor",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Mass",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TargetVelocityAmount",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bClamp",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinValue",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxValue",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bInitializeFromTarget",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FixedTurn",
    "description": "Returns a new rotation component value",
    "parameters": [
      {
        "name": "InCurrent",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDesired",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDeltaRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FInterpTo_Constant",
    "description": "Tries to reach Target at a constant rate.",
    "parameters": [
      {
        "name": "Current",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FInterpTo",
    "description": "Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.",
    "parameters": [
      {
        "name": "Current",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FInterpEaseInOut",
    "description": "Interpolate between A and B, applying an ease in/out function.  Exp controls the degree of the curve.",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Exponent",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FindRelativeLookAtRotation",
    "description": "Find a local rotation (range of [-180, 180]) for an object with StartTransform to point at TargetLocation. Useful for getting LookAt Azimuth or Pawn Aim Offset.",
    "parameters": [
      {
        "name": "StartTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FindNearestPointsOnLineSegments",
    "description": "Find closest points between 2 segments.",
    "parameters": [
      {
        "name": "Segment1Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Segment1End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Segment2Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Segment2End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Segment1Point",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Segment2Point",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FindLookAtRotation",
    "description": "Find a rotation for an object at Start location to point at Target location.",
    "parameters": [
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FindClosestPointOnSegment",
    "description": "Find the closest point on a segment to a given point.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FindClosestPointOnLine",
    "description": "Find the closest point on an infinite line to a given point.",
    "parameters": [
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FFloor64",
    "description": "Rounds A down towards negative infinity / down to the previous integer (e.g., -1.6 becomes -2 and 1.6 becomes 1)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FFloor",
    "description": "Rounds A down towards negative infinity / down to the previous integer (e.g., -1.6 becomes -2 and 1.6 becomes 1)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FClamp",
    "description": "Returns Value clamped between A and B (inclusive)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FCeil64",
    "description": "Rounds A up towards positive infinity / up to the next integer (e.g., -1.6 becomes -1 and 1.6 becomes 2)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "FCeil",
    "description": "Rounds A up towards positive infinity / up to the next integer (e.g., -1.6 becomes -1 and 1.6 becomes 2)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Exp",
    "description": "Returns exponential(e) to the power A (e^A)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualExactly_VectorVector",
    "description": "Returns true if vector A is equal to vector B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualExactly_Vector4Vector4",
    "description": "Returns true if vector A is equal to vector B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualExactly_Vector2DVector2D",
    "description": "Returns true if vector A is equal to vector B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_VectorVector",
    "description": "Returns true if vector A is equal to vector B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_Vector4Vector4",
    "description": "Returns true if vector A is equal to vector B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_Vector2DVector2D",
    "description": "Returns true if vector2D A is equal to vector2D B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_TransformTransform",
    "description": "Returns true if transform A is equal to transform B",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_TimespanTimespan",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_RotatorRotator",
    "description": "Returns true if rotator A is equal to rotator B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorTolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_QuatQuat",
    "description": "Returns true if Quaternion A is equal to Quaternion B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_ObjectObject",
    "description": "Returns true if A and B are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_NameName",
    "description": "Returns true if A and B are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_MatrixMatrix",
    "description": "Checks whether another Matrix is equal to this, within specified tolerance.",
    "parameters": [
      {
        "name": "A",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_LinearColorLinearColor",
    "description": "Returns true if linear color A is equal to linear color B (A == B) within a specified error tolerance",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_IntInt",
    "description": "Returns true if A is equal to B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_Int64Int64",
    "description": "Returns true if A is equal to B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_DoubleDouble",
    "description": "Returns true if A is exactly equal to B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_DateTimeDateTime",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_ClassClass",
    "description": "Returns true if A and B are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_ByteByte",
    "description": "Returns true if A is equal to B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "EqualEqual_BoolBool",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Equal_IntPointIntPoint",
    "description": "Returns true if IntPoint A is equal to IntPoint B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Ease",
    "description": "Easeing  between A and B using a specified easing function",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EasingFunc",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendExp",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DynamicWeightedMovingAverage_FVector",
    "description": "Calculates the new value in a weighted moving average series using the previous value and a weight range. The weight range is used to dynamically adjust based upon distance between the samples This allows you to smooth a value more aggressively for small noise and let large movements be smoothed less (or vice versa)",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinWeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxWeight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DynamicWeightedMovingAverage_FRotator",
    "description": "Calculates the new value in a weighted moving average series using the previous value and a weight range. The weight range is used to dynamically adjust based upon distance between the samples This allows you to smooth a value more aggressively for small noise and let large movements be smoothed less (or vice versa)",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinWeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxWeight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DynamicWeightedMovingAverage_Float",
    "description": "Calculates the new value in a weighted moving average series using the previous value and a weight range. The weight range is used to dynamically adjust based upon distance between the samples This allows you to smooth a value more aggressively for small noise and let large movements be smoothed less (or vice versa)",
    "parameters": [
      {
        "name": "CurrentSample",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviousSample",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinWeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxWeight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DotProduct2D",
    "description": "Returns the dot product of two 2d vectors - see http://mathworld.wolfram.com/DotProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Dot_VectorVector",
    "description": "Returns the dot product of two 3d vectors - see http://mathworld.wolfram.com/DotProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_VectorVector",
    "description": "Element-wise Vector division (Result = {A.x/B.x, A.y/B.y, A.z/B.z})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_VectorInt",
    "description": "Vector divide by an integer",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_VectorFloat",
    "description": "Vector divide by a float",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_Vector4Vector4",
    "description": "Element-wise Vector divide (Result = {A.x/B.x, A.y/B.y, A.z/B.z, A.w/B.w})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_Vector2DVector2D",
    "description": "Element-wise Vector divide (Result = {A.x/B.x, A.y/B.y})",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_Vector2DFloat",
    "description": "Returns Vector A divided by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_TimespanFloat",
    "description": "Scalar division (A / s)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "Scalar",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_LinearColorLinearColor",
    "description": "Element-wise multiplication of two linear colors (R/R, G/G, B/B, A/A)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_IntPointIntPoint",
    "description": "Returns IntPoint A divided by B",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_IntPointInt",
    "description": "Division (A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_IntInt",
    "description": "Division (A / B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_Int64Int64",
    "description": "Division (A / B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_DoubleDouble",
    "description": "Division (A / B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Divide_ByteByte",
    "description": "Division (A / B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DistanceSquared2D",
    "description": "Squared distance between two 2D points.",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Distance2D",
    "description": "Distance between two 2D points.",
    "parameters": [
      {
        "name": "V1",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "V2",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegTan",
    "description": "Returns the tan of A (expects Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegSin",
    "description": "Returns the sin of A (expects Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegreesToRadians",
    "description": "Returns radians value based on the input degrees",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegCos",
    "description": "Returns the cos of A (expects Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegAtan2",
    "description": "Returns the inverse tan (atan2) of A/B (result is in Degrees)",
    "parameters": [
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegAtan",
    "description": "Returns the inverse tan (atan) (result is in Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegAsin",
    "description": "Returns the inverse sin (arcsin) of A (result is in Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DegAcos",
    "description": "Returns the inverse cos (arccos) of A (result is in Degrees)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DaysInYear",
    "description": "Returns the number of days in the given year",
    "parameters": [
      {
        "name": "Year",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DaysInMonth",
    "description": "Returns the number of days in the given year and month",
    "parameters": [
      {
        "name": "Year",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Month",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DateTimeMinValue",
    "description": "Returns the minimum date and time value",
    "parameters": [],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DateTimeMaxValue",
    "description": "Returns the maximum date and time value",
    "parameters": [],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DateTimeFromString",
    "description": "Converts a date string to a DateTime object",
    "parameters": [
      {
        "name": "DateTimeString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "FDateTime",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "DateTimeFromIsoString",
    "description": "Converts a date string in ISO-8601 format to a DateTime object",
    "parameters": [
      {
        "name": "IsoString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "FDateTime",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "CrossProduct2D",
    "description": "Returns the cross product of two 2d vectors - see  http://mathworld.wolfram.com/CrossProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Cross_VectorVector",
    "description": "Returns the cross product of two 3d vectors - see http://mathworld.wolfram.com/CrossProduct.html",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "CreateVectorFromYawPitch",
    "description": "Creates a directional vector from rotation values {Pitch, Yaw} supplied in degrees with specified Length",
    "parameters": [
      {
        "name": "Yaw",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Pitch",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Length",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Cos",
    "description": "Returns the cosine of A (expects Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Convert3DTo1D",
    "description": "Maps a 3D array index to a 1D array index.",
    "parameters": [
      {
        "name": "Index3D",
        "type": "FIntVector",
        "optional": false,
        "out": false
      },
      {
        "name": "XSize",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "YSize",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Convert2DTo1D",
    "description": "Maps a 2D array index to a 1D array index.",
    "parameters": [
      {
        "name": "Index2D",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "XSize",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Convert1DTo3D",
    "description": "Maps a 1D array index to a 3D array index.",
    "parameters": [
      {
        "name": "Index1D",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "XSize",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "YSize",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Convert1DTo2D",
    "description": "Maps a 1D array index to a 2D array index.",
    "parameters": [
      {
        "name": "Index1D",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "XSize",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_VectorToVector2D",
    "description": "Converts a Vector to a Vector2D using the Vector's (X, Y) coordinates",
    "parameters": [
      {
        "name": "InVector",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_VectorToTransform",
    "description": "Converts a vector to a transform. Uses vector as location",
    "parameters": [
      {
        "name": "InLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_VectorToRotator",
    "description": "Return the FRotator orientation corresponding to the direction in which the vector points. Sets Yaw and Pitch to the proper numbers, and sets Roll to zero because the roll can't be determined from a vector.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_VectorToQuaternion",
    "description": "Return the Quaternion orientation corresponding to the direction in which the vector points. Similar to the FRotator version, returns a result without roll such that it preserves the up vector. 'FindBetweenVectors(ForwardVector, YourVector)' or 'FindBetweenNormals(...)' if you know the vector is of unit length.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_VectorToLinearColor",
    "description": "Converts a vector to LinearColor",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Vector4ToVector",
    "description": "Converts a Vector4 to a Vector (dropping the W element)",
    "parameters": [
      {
        "name": "InVector4",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Vector4ToRotator",
    "description": "Return the FRotator orientation corresponding to the direction in which the vector points. Sets Yaw and Pitch to the proper numbers, and sets Roll to zero because the roll can't be determined from a vector.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Vector4ToQuaternion",
    "description": "Return the Quaternion orientation corresponding to the direction in which the vector points. Similar to the FRotator version, returns a result without roll such that it preserves the up vector. 'FindBetweenVectors(ForwardVector, YourVector)' or 'FindBetweenNormals(...)' if you know the vector is of unit length.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Vector2DToVector",
    "description": "Converts a Vector2D to a Vector",
    "parameters": [
      {
        "name": "InVector2D",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Vector2DToIntPoint",
    "description": "Converts a Vector2D to an IntPoint",
    "parameters": [
      {
        "name": "InVector2D",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_TransformToMatrix",
    "description": "Converts a Transform to a Matrix with scale",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_RotatorToVector",
    "description": "Get the X direction vector after this rotation",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_RotatorToTransform",
    "description": "Converts Rotator to Transform",
    "parameters": [
      {
        "name": "InRotator",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_RotatorToQuaternion",
    "description": "Converts to Quaternion representation of this Rotator.",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_MatrixToTransform",
    "description": "Converts a Matrix to a Transform (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "InMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_MatrixToRotator",
    "description": "Converts a Matrix to a Rotator (Assumes Matrix represents a transform)",
    "parameters": [
      {
        "name": "InMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_LinearColorToVector",
    "description": "Converts a LinearColor to a vector",
    "parameters": [
      {
        "name": "InLinearColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_LinearColorToColor",
    "description": "Quantizes the linear color and returns the result as a FColor with optional sRGB conversion and quality as goal.",
    "parameters": [
      {
        "name": "InLinearColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "InUseSRGB",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntVectorToVector",
    "description": "Converts an IntVector to a vector",
    "parameters": [
      {
        "name": "InIntVector",
        "type": "FIntVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToVector",
    "description": "Converts an integer to a FVector",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToIntVector",
    "description": "Converts an integer to an IntVector",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToInt64",
    "description": "Converts an integer to a 64 bit integer",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToDouble",
    "description": "Converts an integer to a float",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToByte",
    "description": "Converts an integer to a byte (if the integer is too large, returns the low 8 bits)",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntToBool",
    "description": "Converts a int to a bool",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_IntPointToVector2D",
    "description": "Converts an IntPoint to a Vector2D",
    "parameters": [
      {
        "name": "InIntPoint",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Int64ToInt",
    "description": "Converts a 64 bit integer to a 32 bit integer (if the integer is too large, returns the low 32 bits)",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Int64ToDouble",
    "description": "Converts a 64 bit integer to a float",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_Int64ToByte",
    "description": "Converts a 64 bit integer to a byte (if the integer is too large, returns the low 8 bits)",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_FloatToDouble",
    "description": "Converts a 32 bit floating point to a 64 bit floating point",
    "parameters": [
      {
        "name": "InFloat",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_DoubleToVector2D",
    "description": "Convert a float into a vector, where each element is that float",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_DoubleToVector",
    "description": "Converts a double into a vector, where each element is that float",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_DoubleToLinearColor",
    "description": "Converts a float into a LinearColor, where each RGB element is that float",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_DoubleToInt64",
    "description": "Converts a float to a 64 bit integer",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_DoubleToFloat",
    "description": "Converts a 64 bit floating point to a 32 bit floating point (if the float is too large, returns the low 32 bits)",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_ColorToLinearColor",
    "description": "Converts a color to LinearColor",
    "parameters": [
      {
        "name": "InColor",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_ByteToInt64",
    "description": "Converts a byte to an integer",
    "parameters": [
      {
        "name": "InByte",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_ByteToInt",
    "description": "Converts a byte to an integer",
    "parameters": [
      {
        "name": "InByte",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_ByteToDouble",
    "description": "Converts a byte to a float",
    "parameters": [
      {
        "name": "InByte",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_BoolToInt",
    "description": "Converts a bool to an int",
    "parameters": [
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_BoolToDouble",
    "description": "Converts a bool to a float (0.0 or 1.0)",
    "parameters": [
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Conv_BoolToByte",
    "description": "Converts a bool to a byte",
    "parameters": [
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ComposeTransforms",
    "description": "Compose two transforms in order: A * B. Order matters when composing transforms: A * B will yield a transform that logically first applies A then B to any subsequent transformation. Example: LocalToWorld = ComposeTransforms(DeltaRotation, LocalToWorld) will change rotation in local space by DeltaRotation. Example: LocalToWorld = ComposeTransforms(LocalToWorld, DeltaRotation) will change rotation in world space by DeltaRotation.",
    "parameters": [
      {
        "name": "A",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ComposeRotators",
    "description": "Combine 2 rotations to give you the resulting rotation of first applying A, then B.",
    "parameters": [
      {
        "name": "A",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClassIsChildOf",
    "description": "Determine if a class is a child of another class. the value for either parameter is 'None'.",
    "parameters": [
      {
        "name": "TestClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClampVectorSize",
    "description": "Create a copy of this vector, with its magnitude/size/length clamped between Min and Max.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClampInt64",
    "description": "Returns Value clamped to be between A and B (inclusive)",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClampAxis",
    "description": "Clamps an angle to the range of [0, 360].",
    "parameters": [
      {
        "name": "Angle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClampAxes2D",
    "description": "Creates a copy of this vector with both axes clamped to the given range.",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "MinAxisVal",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxAxisVal",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "ClampAngle",
    "description": "Clamps an arbitrary angle to be between the given angles.  Will clamp to nearest boundary.",
    "parameters": [
      {
        "name": "AngleDegrees",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinAngleDegrees",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxAngleDegrees",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Clamp",
    "description": "Returns Value clamped to be between A and B (inclusive)",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Min",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Max",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "CInterpTo",
    "description": "Interpolate Linear Color from Current to Target. Scaled by distance to Target, so it has a strong start speed and ease out.",
    "parameters": [
      {
        "name": "Current",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Target",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InterpSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector_NetQuantizeNormal",
    "description": "",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector_NetQuantizeNormal",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector_NetQuantize100",
    "description": "",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector_NetQuantize100",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector_NetQuantize10",
    "description": "",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector_NetQuantize10",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector_NetQuantize",
    "description": "",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector_NetQuantize",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector4",
    "description": "Breaks a 4D vector apart into X, Y, Z, W.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector2D",
    "description": "Breaks a 2D vector apart into X, Y.",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakVector",
    "description": "Breaks a vector apart into X, Y, Z",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakTransform",
    "description": "Breaks apart a transform into location, rotation and scale",
    "parameters": [
      {
        "name": "InTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakTimespan2",
    "description": "Breaks a Timespan into its components",
    "parameters": [
      {
        "name": "InTimespan",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "Days",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Hours",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Minutes",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Seconds",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "FractionNano",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakTimespan",
    "description": "Breaks a Timespan into its components",
    "parameters": [
      {
        "name": "InTimespan",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "Days",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Hours",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Minutes",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Seconds",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Milliseconds",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakRotIntoAxes",
    "description": "Breaks apart a rotator into its component axes",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakRotator",
    "description": "Breaks apart a rotator into {Roll, Pitch, Yaw} angles in degrees",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Roll",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Pitch",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Yaw",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakRandomStream",
    "description": "Breaks apart a random number generator",
    "parameters": [
      {
        "name": "InRandomStream",
        "type": "FRandomStream",
        "optional": false,
        "out": false
      },
      {
        "name": "InitialSeed",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakQuat",
    "description": "Breaks a quat apart into X, Y, Z, W",
    "parameters": [
      {
        "name": "InQuat",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "W",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakQualifiedFrameTime",
    "description": "Breaks a FQualifiedFrameTime into its component parts again.",
    "parameters": [
      {
        "name": "InFrameTime",
        "type": "FQualifiedFrameTime",
        "optional": false,
        "out": false
      },
      {
        "name": "Frame",
        "type": "FFrameNumber",
        "optional": false,
        "out": true
      },
      {
        "name": "FrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": true
      },
      {
        "name": "SubFrame",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakFrameRate",
    "description": "Breaks a FFrameRate into a numerator and denominator.",
    "parameters": [
      {
        "name": "InFrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      },
      {
        "name": "Numerator",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Denominator",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakDateTime",
    "description": "Breaks a DateTime into its components",
    "parameters": [
      {
        "name": "InDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "Year",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Month",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Day",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Hour",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Minute",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Second",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Millisecond",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakColor",
    "description": "Breaks apart a color into individual RGB components (as well as alpha)",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "R",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "G",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BreakBoxSphereBounds",
    "description": "Breaks an FBoxSphereBounds into origin, extent, and radius",
    "parameters": [
      {
        "name": "InBoxSphereBounds",
        "type": "FBoxSphereBounds",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_Overlap",
    "description": "Returns the overlap TBox<T> of two boxes",
    "parameters": [
      {
        "name": "A",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_IsPointInside",
    "description": "Checks whether the given location is inside this box. Use IsPointInBox_Box to include borders in the test.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_IsInsideOrOn",
    "description": "Returns true if the InnerTest Box is is completely inside or on OuterTest Box",
    "parameters": [
      {
        "name": "InnerTest",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "OuterTest",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_IsInside",
    "description": "Returns true if the InnerTest Box is is completely inside of the OuterTest Box",
    "parameters": [
      {
        "name": "InnerTest",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "OuterTest",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_Intersects",
    "description": "Checks whether the given bounding box A intersects this bounding box B. coincident borders on any edge will overlap.",
    "parameters": [
      {
        "name": "A",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_GetClosestPointTo",
    "description": "Calculates the closest point on or inside the box to a given point in space.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Box_ExpandBy",
    "description": "Returns a box of increased size.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Negative",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Positive",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BooleanXOR",
    "description": "Returns the logical eXclusive OR of two values (A XOR B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BooleanOR",
    "description": "Returns the logical OR of two values (A OR B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BooleanNOR",
    "description": "Returns the logical Not OR of two values (A NOR B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BooleanNAND",
    "description": "Returns the logical NAND of two values (A AND B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BooleanAND",
    "description": "Returns the logical AND of two values (A AND B)",
    "parameters": [
      {
        "name": "A",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BMin",
    "description": "Returns the minimum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "BMax",
    "description": "Returns the maximum value of A and B",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "AverageOfIntArray",
    "description": "Returns average of all array entries. Returns value of 0 if the supplied array is empty.",
    "parameters": [
      {
        "name": "IntArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "AverageValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Atan2",
    "description": "Returns the inverse tan (atan2) of A/B (result is in Radians)",
    "parameters": [
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Atan",
    "description": "Returns the inverse tan (atan) (result is in Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Asin",
    "description": "Returns the inverse sine (arcsin) of A (result is in Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "And_IntInt",
    "description": "Bitwise AND (A & B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "And_Int64Int64",
    "description": "Bitwise AND (A & B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_VectorVector",
    "description": "Vector addition",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_VectorInt",
    "description": "Adds an integer to each component of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_VectorFloat",
    "description": "Adds a float to each component of a vector",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_Vector4Vector4",
    "description": "Returns addition of Vector A and Vector B (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_Vector2DVector2D",
    "description": "Returns addition of Vector A and Vector B (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_Vector2DFloat",
    "description": "Returns Vector A added by B",
    "parameters": [
      {
        "name": "A",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_TimespanTimespan",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimespan"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_QuatQuat",
    "description": "Returns addition of Vector A and Vector B (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_MatrixMatrix",
    "description": "Gets the result of adding a matrix to this.",
    "parameters": [
      {
        "name": "A",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_LinearColorLinearColor",
    "description": "Element-wise addition of two linear colors (R+R, G+G, B+B, A+A)",
    "parameters": [
      {
        "name": "A",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_IntPointIntPoint",
    "description": "Returns IntPoint A added by B",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_IntPointInt",
    "description": "Addition (A - B)",
    "parameters": [
      {
        "name": "A",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_IntInt",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_Int64Int64",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_DoubleDouble",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_DateTimeTimespan",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_DateTimeDateTime",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Add_ByteByte",
    "description": "Addition (A + B)",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Acos",
    "description": "Returns the inverse cosine (arccos) of A (result is in Radians)",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Abs_Int64",
    "description": "Returns the absolute (positive) value of A",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Abs_Int",
    "description": "Returns the absolute (positive) value of A",
    "parameters": [
      {
        "name": "A",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetMathLibrary",
    "name": "Abs",
    "description": "Returns the absolute (positive) value of A",
    "parameters": [
      {
        "name": "A",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "MarkBit",
    "description": "Sets the bit at index \"Index\" in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "HasUnmarkedBit",
    "description": "Returns whether there exists an unmarked bit in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumBits",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "HasMarkedBit",
    "description": "Returns whether there exists a marked bit in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumBits",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetValidValue",
    "description": "",
    "parameters": [
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": false,
        "out": false
      },
      {
        "name": "EnumeratorValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetUnmarkedBit",
    "description": "Gets an already unmarked bit and returns the bit index selected",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "StartIdx",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumBits",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRandom",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetRandomUnmarkedBit",
    "description": "Gets a random not already marked bit and returns the bit index selected",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "StartIdx",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumBits",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetFirstUnmarkedBit",
    "description": "Gets the first index not already marked starting from a specific index and returns the bit index selected",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "StartIdx",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumBits",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetEnumeratorValueFromIndex",
    "description": "",
    "parameters": [
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": false,
        "out": false
      },
      {
        "name": "EnumeratorIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetEnumeratorUserFriendlyName",
    "description": "Gets enumerator name as FString. Use DeisplayName when possible.",
    "parameters": [
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": false,
        "out": false
      },
      {
        "name": "EnumeratorValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "GetEnumeratorName",
    "description": "Gets enumerator name.",
    "parameters": [
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": false,
        "out": false
      },
      {
        "name": "EnumeratorValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "ClearBit",
    "description": "Clears the bit at index \"Index\" in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "ClearAllBits",
    "description": "Clears all of the bit in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetNodeHelperLibrary",
    "name": "BitIsMarked",
    "description": "Returns whether the bit at index \"Index\" is set or not in the data",
    "parameters": [
      {
        "name": "Data",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "SetCastInsetShadowForAllAttachments",
    "description": "Set the inset shadow casting state of the given component and all its child attachments. Also choose if all attachments should be grouped for the inset shadow rendering. If enabled, one depth target will be shared for all attachments.",
    "parameters": [
      {
        "name": "PrimitiveComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bCastInsetShadow",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bLightAttachmentsAsGroup",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ResizeRenderTarget2D",
    "description": "Changes the resolution of a render target. This is useful for when you need to resize the game viewport or change the in-game resolution during runtime and thus need to update the sizes of all the render targets in the game accordingly.",
    "parameters": [
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "RenderTargetCreateStaticVolumeTextureEditorOnly",
    "description": "Creates a new Static Volume Texture from a Render Target Volume. Only works in the editor",
    "parameters": [
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTargetVolume",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MipSettings",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UVolumeTexture"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "RenderTargetCreateStaticTextureCubeEditorOnly",
    "description": "Creates a new Static Texture Cube from a Render Target Cube. Only works in the editor",
    "parameters": [
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTargetCube",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MipSettings",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTextureCube"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "RenderTargetCreateStaticTexture2DEditorOnly",
    "description": "Creates a new Static Texture from a Render Target 2D. Only works in the editor",
    "parameters": [
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MipSettings",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "RenderTargetCreateStaticTexture2DArrayEditorOnly",
    "description": "Creates a new Static Texture 2D Array from a Render Target 2D Array. Only works in the editor",
    "parameters": [
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTarget2DArray",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CompressionSettings",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MipSettings",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTexture2DArray"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReleaseRenderTarget2D",
    "description": "Manually releases GPU resources of a render target. This is useful for blueprint creating a lot of render target that would normally be released too late by the garbage collector that can be problematic on platforms that have tight GPU memory constrains.",
    "parameters": [
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "RefreshPathTracingOutput",
    "description": "Forces the path tracer to restart sample accumulation. This can be used to force the path tracer to compute a new frame in situations where it can not detect a change in the scene automatically.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetUV",
    "description": "Incredibly inefficient and slow operation! Read a value as sRGB color from a render target using UV [0,1]x[0,1] coordinates. LDR render targets are assumed to be in sRGB space. HDR ones are assumed to be in linear space. Result is 8-bit per channel [0,255] BGRA in sRGB space.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "U",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetRawUVArea",
    "description": "Incredibly inefficient and slow operation! Read an area of values as-is from a render target using a rectangle defined by UV [0,1]x[0,1] coordinates.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Area",
        "type": "FBox2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FLinearColor_"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetRawUV",
    "description": "Incredibly inefficient and slow operation! Read a value as-is from a render target using UV [0,1]x[0,1] coordinates.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "U",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "V",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetRawPixelArea",
    "description": "Incredibly inefficient and slow operation! Read an area of values as-is from a render target using a rectangle defined by integer pixel coordinates.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "MinX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MinY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FLinearColor_"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetRawPixel",
    "description": "Incredibly inefficient and slow operation! Read a value as-is from a render target using integer pixel coordinates.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetRaw",
    "description": "Incredibly inefficient and slow operation! Read entire texture as-is from a render target.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "OutLinearSamples",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": true
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTargetPixel",
    "description": "Incredibly inefficient and slow operation! Read a value as sRGB color from a render target using integer pixel coordinates. LDR render targets are assumed to be in sRGB space. HDR ones are assumed to be in linear space. Result is 8-bit per channel [0,255] BGRA in sRGB space.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ReadRenderTarget",
    "description": "Incredibly inefficient and slow operation! Reads entire render target as sRGB color and returns a linear array of sRGB colors. LDR render targets are assumed to be in sRGB space. HDR ones are assumed to be in linear space. Result whether the operation succeeded.  If successful, OutSamples will an entry per pixel, where each is 8-bit per channel [0,255] BGRA in sRGB space.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSamples",
        "type": "TArray_FColor_",
        "optional": false,
        "out": true
      },
      {
        "name": "bNormalize",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "MakeSkinWeightInfo",
    "description": "Create FSkelMeshSkinWeightInfo",
    "parameters": [
      {
        "name": "Bone0",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight0",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Bone1",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight1",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Bone2",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight2",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Bone3",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Weight3",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSkelMeshSkinWeightInfo"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ImportFileAsTexture2D",
    "description": "Imports a texture file from disk and creates Texture2D from it.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ImportBufferAsTexture2D",
    "description": "Imports a texture from a buffer and creates Texture2D from it.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Buffer",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ExportTexture2D",
    "description": "Exports a Texture2D as a HDR image onto the disk.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "FilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ExportRenderTarget",
    "description": "Exports a render target as a HDR or PNG image onto the disk (depending on the format of the render target)",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "FilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "EndDrawCanvasToRenderTarget",
    "description": "Must be paired with a BeginDrawCanvasToRenderTarget to complete rendering to a render target.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FDrawToRenderTargetContext",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "EnablePathTracing",
    "description": "Enables or disables the path tracer for the current Game Viewport. This command is equivalent to setting ShowFlag.PathTracing, but is accessible even from shipping builds.",
    "parameters": [
      {
        "name": "bEnablePathTracer",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "DrawMaterialToRenderTarget",
    "description": "Renders a quad with the material applied to the specified render target. This sets the render target even if it is already set, which is an expensive operation. Use BeginDrawCanvasToRenderTarget / EndDrawCanvasToRenderTarget instead if rendering multiple primitives to the same render target.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "CreateRenderTargetVolume",
    "description": "Creates a new volume render target and initializes it to the specified dimensions",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Depth",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Format",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ClearColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoGenerateMipMaps",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bSupportUAVs",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTextureRenderTargetVolume"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "CreateRenderTarget2DArray",
    "description": "Creates a new render target array and initializes it to the specified dimensions",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Slices",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Format",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ClearColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoGenerateMipMaps",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bSupportUAVs",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTextureRenderTarget2DArray"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "CreateRenderTarget2D",
    "description": "Creates a new render target and initializes it to the specified dimensions",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Format",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ClearColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoGenerateMipMaps",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bSupportUAVs",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTextureRenderTarget2D"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ConvertRenderTargetToTextureVolumeEditorOnly",
    "description": "Copies the contents of a UTextureRenderTargetVolume to a UVolumeTexture Only works in the editor",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTargetVolume",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UVolumeTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ConvertRenderTargetToTextureCubeEditorOnly",
    "description": "Copies the contents of a UTextureRenderTargetCube to a UTextureCube Only works in the editor",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTargetCube",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTextureCube",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ConvertRenderTargetToTexture2DEditorOnly",
    "description": "Copies the contents of a UTextureRenderTarget2D to a UTexture2D Only works in the editor",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ConvertRenderTargetToTexture2DArrayEditorOnly",
    "description": "Copies the contents of a UTextureRenderTarget2DArray to a UTexture2DArray Only works in the editor",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RenderTarget",
        "type": "UTextureRenderTarget2DArray",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2DArray",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "ClearRenderTarget2D",
    "description": "Clears the specified render target with the given ClearColor.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ClearColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "CalculateProjectionMatrix",
    "description": "Calculates the projection matrix using this view info's aspect ratio (regardless of bConstrainAspectRatio)",
    "parameters": [
      {
        "name": "MinimalViewInfo",
        "type": "FMinimalViewInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "BreakSkinWeightInfo",
    "description": "Break FSkelMeshSkinWeightInfo",
    "parameters": [
      {
        "name": "InWeight",
        "type": "FSkelMeshSkinWeightInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "Bone0",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Weight0",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Bone1",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Weight1",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Bone2",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Weight2",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Bone3",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Weight3",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetRenderingLibrary",
    "name": "BeginDrawCanvasToRenderTarget",
    "description": "Returns a Canvas object that can be used to draw to the specified render target. Canvas has functions like DrawMaterial with size parameters that can be used to draw to a specific area of a render target. Be sure to call EndDrawCanvasToRenderTarget to complete the rendering!",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Canvas",
        "type": "UCanvas",
        "optional": false,
        "out": true
      },
      {
        "name": "Size",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "Context",
        "type": "FDrawToRenderTargetContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "TrimTrailing",
    "description": "Removes trailing whitespace characters",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Trim",
    "description": "Removes whitespace characters from the front of this string.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "ToUpper",
    "description": "Returns a string converted to Upper case",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "ToLower",
    "description": "Returns a string converted to Lower case",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "TimeSecondsToString",
    "description": "Convert a number of seconds into minutes:seconds.milliseconds format string (including leading zeroes)",
    "parameters": [
      {
        "name": "InSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "StartsWith",
    "description": "Test whether this string starts with given string.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InPrefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Split",
    "description": "Splits this string at given string position case sensitive.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InStr",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LeftS",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "RightS",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SearchDir",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "RightPad",
    "description": "* Pad the right of this string for a specified number of characters * @@param       SourceString    The string to pad * @@param       ChCount                 Amount of padding required * @@return      The padded string",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ChCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "RightChop",
    "description": "Returns the string to the right of the specified location, counting forward from the left (from the beginning of the word).",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Right",
    "description": "Returns the string to the right of the specified location, counting back from the right (end of the word).",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Reverse",
    "description": "Returns a copy of this string, with the characters in reverse order",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "ReplaceInline",
    "description": "Replace all occurrences of SearchText with ReplacementText in this string.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "SearchText",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ReplacementText",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Replace",
    "description": "Replace all occurrences of a substring in this string",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "From",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "To",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "ParseIntoArray",
    "description": "Gets an array of strings from a source string divided up by a separator and empty strings can optionally be culled.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Delimiter",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "CullEmptyStrings",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "NotEqual_StrStr",
    "description": "Test if the input string are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "NotEqual_StriStri",
    "description": "Test if the input string are not equal (A != B), ignoring case differences",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Mid",
    "description": "Returns the substring from Start position for Count characters.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "MatchesWildcard",
    "description": "Searches this string for a given wild card",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Wildcard",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Len",
    "description": "Returns the number of characters in the string",
    "parameters": [
      {
        "name": "S",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "LeftPad",
    "description": "* Pad the left of this string for a specified number of characters * @@param       SourceString    The string to pad * @@param       ChCount                 Amount of padding required * @@return      The padded string",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ChCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "LeftChop",
    "description": "Returns the left most characters from the string chopping the given number of characters from the end",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Left",
    "description": "Returns the left most given number of characters",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "JoinStringArray",
    "description": "Concatenates an array of strings into a single string.",
    "parameters": [
      {
        "name": "SourceArray",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "Separator",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "IsNumeric",
    "description": "* Checks if a string contains only numeric characters * @@param       SourceString    The string to check * @@return true if the string only contains numeric characters",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "IsEmpty",
    "description": "Returns true if the string is empty",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "GetSubstring",
    "description": "Returns a substring from the string starting at the specified position",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StartIndex",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Length",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "GetCharacterAsNumber",
    "description": "Gets a single character from the string (as an integer)",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "GetCharacterArrayFromString",
    "description": "Returns an array that contains one entry for each character in SourceString",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "FindSubstring",
    "description": "Finds the starting index of a substring in the a specified string",
    "parameters": [
      {
        "name": "SearchIn",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Substring",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseCase",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bSearchFromEnd",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "StartPosition",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "EqualEqual_StrStr",
    "description": "Test if the input strings are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "EqualEqual_StriStri",
    "description": "Test if the input strings are equal (A == B), ignoring case",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "EndsWith",
    "description": "Test whether this string ends with given string.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InSuffix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchCase",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "CullArray",
    "description": "Takes an array of strings and removes any zero length entries.",
    "parameters": [
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InArray",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_VectorToString",
    "description": "Converts a vector value to a string, in the form 'X= Y= Z='",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_Vector3fToString",
    "description": "Converts a float vector value to a string, in the form 'X= Y= Z='",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector3f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_Vector2dToString",
    "description": "Converts a vector2d value to a string, in the form 'X= Y='",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_TransformToString",
    "description": "Converts a transform value to a string, in the form 'Translation: X= Y= Z= Rotation: P= Y= R= Scale: X= Y= Z='",
    "parameters": [
      {
        "name": "InTrans",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToVector3f",
    "description": "Convert String Back To Float Vector. IsValid indicates whether or not the string could be successfully converted.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutConvertedVector",
        "type": "FVector3f",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToVector2D",
    "description": "Convert String Back To Vector2D. IsValid indicates whether or not the string could be successfully converted.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutConvertedVector2D",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToVector",
    "description": "Convert String Back To Vector. IsValid indicates whether or not the string could be successfully converted.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutConvertedVector",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToRotator",
    "description": "Convert String Back To Rotator. IsValid indicates whether or not the string could be successfully converted.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutConvertedRotator",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToName",
    "description": "Converts a string to a name value",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToInt64",
    "description": "Converts a string to a int value",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToInt",
    "description": "Converts a string to a int value",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToDouble",
    "description": "Converts a string to a double value",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_StringToColor",
    "description": "Convert String Back To Color. IsValid indicates whether or not the string could be successfully converted.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutConvertedColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "OutIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_RotatorToString",
    "description": "Converts a rotator value to a string, in the form 'P= Y= R='",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_PlatformUserIdToString",
    "description": "Converts a PlatformUserId value to a string",
    "parameters": [
      {
        "name": "InPlatformUserId",
        "type": "FPlatformUserId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_ObjectToString",
    "description": "Converts a UObject value to a string by calling the object's GetName method",
    "parameters": [
      {
        "name": "InObj",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_NameToString",
    "description": "Converts a name value to a string",
    "parameters": [
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_MatrixToString",
    "description": "Converts a name value to a string",
    "parameters": [
      {
        "name": "InMatrix",
        "type": "FMatrix",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_IntVectorToString",
    "description": "Converts an IntVector value to a string, in the form 'X= Y= Z='",
    "parameters": [
      {
        "name": "InIntVec",
        "type": "FIntVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_IntToString",
    "description": "Converts an integer value to a string",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_IntPointToString",
    "description": "Converts an IntPoint value to a string, in the form 'X= Y='",
    "parameters": [
      {
        "name": "InIntPoint",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_Int64ToString",
    "description": "Converts an 64-bit integer value to a string",
    "parameters": [
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_InputDeviceIdToString",
    "description": "Converts a InputDeviceId value to a string",
    "parameters": [
      {
        "name": "InDeviceId",
        "type": "FInputDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_DoubleToString",
    "description": "Converts a double value to a string",
    "parameters": [
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_ColorToString",
    "description": "Converts a linear color value to a string, in the form '(R=,G=,B=,A=)'",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_ByteToString",
    "description": "Converts a byte value to a string",
    "parameters": [
      {
        "name": "InByte",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_BoxToString",
    "description": "Converts a FBox value to a string",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_BoxCenterAndExtentsToString",
    "description": "Converts a FBox value to a string of its Center and Extents values.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Conv_BoolToString",
    "description": "Converts a boolean value to a string, either 'true' or 'false'",
    "parameters": [
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Contains",
    "description": "Returns whether this string contains the specified substring.",
    "parameters": [
      {
        "name": "SearchIn",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Substring",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseCase",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bSearchFromEnd",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "Concat_StrStr",
    "description": "Concatenates two strings together to make a new string",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Vector2d",
    "description": "Converts a vector2d->string, creating a new string in the form AppendTo+Prefix+InVector2d+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InVector2d",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Vector",
    "description": "Converts a vector->string, creating a new string in the form AppendTo+Prefix+InVector+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InVector",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Rotator",
    "description": "Converts a rotator->string, creating a new string in the form AppendTo+Prefix+InRot+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Object",
    "description": "Converts a object->string, creating a new string in the form AppendTo+Prefix+object name+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InObj",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Name",
    "description": "Converts a color->string, creating a new string in the form AppendTo+Prefix+InName+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_IntVector",
    "description": "Converts an IntVector->string, creating a new string in the form AppendTo+Prefix+InIntVector+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InIntVector",
        "type": "FIntVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Int",
    "description": "Converts a int->string, creating a new string in the form AppendTo+Prefix+InInt+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InInt",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Double",
    "description": "Converts a double->string, create a new string in the form AppendTo+Prefix+InDouble+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDouble",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Color",
    "description": "Converts a color->string, creating a new string in the form AppendTo+Prefix+InColor+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringLibrary",
    "name": "BuildString_Bool",
    "description": "Converts a boolean->string, creating a new string in the form AppendTo+Prefix+InBool+Suffix",
    "parameters": [
      {
        "name": "AppendTo",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "IsRegisteredTableId",
    "description": "Returns true if the given table ID corresponds to a registered string table.",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "IsRegisteredTableEntry",
    "description": "Returns true if the given table ID corresponds to a registered string table, and that table has.",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetTableNamespace",
    "description": "Returns the namespace of the given string table.",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetTableEntrySourceString",
    "description": "Returns the source string of the given string table entry (or an empty string).",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetTableEntryMetaData",
    "description": "Returns the specified meta-data of the given string table entry (or an empty string).",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaDataId",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetRegisteredStringTables",
    "description": "Returns an array of all registered string table IDs",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetMetaDataIdsFromStringTableEntry",
    "description": "Returns an array of all meta-data IDs within the given string table entry",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetStringTableLibrary",
    "name": "GetKeysFromStringTable",
    "description": "Returns an array of all keys within the given string table",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "UnregisterForRemoteNotifications",
    "description": "Requests Requests unregistering from receiving remote notifications to the user's device. (Android only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "UnloadPrimaryAssetList",
    "description": "Unloads a primary asset, which allows it to be garbage collected if nothing else is referencing it",
    "parameters": [
      {
        "name": "PrimaryAssetIdList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "UnloadPrimaryAsset",
    "description": "Unloads a primary asset, which allows it to be garbage collected if nothing else is referencing it",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "TransactObject",
    "description": "Notify the current transaction (if any) that this object is about to be modified and should be placed into the undo buffer.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "StackTrace",
    "description": "Prints a stack trace to the log, so you can see how a blueprint got to this node",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceSingleForObjects",
    "description": "Sweeps a sphere along the given line and returns the first hit encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceSingleByProfile",
    "description": "Sweep a sphere against the world and return the first blocking hit using a specific profile",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceSingle",
    "description": "Sweeps a sphere along the given line and returns the first blocking hit encountered. This trace finds the objects that RESPONDS to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceMultiForObjects",
    "description": "Sweeps a sphere along the given line and returns all hits encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceMultiByProfile",
    "description": "Sweep a sphere against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit Results are sorted, so a blocking hit (if found) will be the last element of the array Only the single closest blocking result will be generated, no tests will be done after that",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereTraceMulti",
    "description": "Sweeps a sphere along the given line and returns all hits encountered up to and including the first blocking hit. This trace finds the objects that RESPOND to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereOverlapComponents",
    "description": "Returns an array of components that overlap the given sphere.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SpherePos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutComponents",
        "type": "TArray_UPrimitiveComponent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SphereOverlapActors",
    "description": "Returns an array of actors that overlap the given sphere.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SpherePos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SnapshotObject",
    "description": "Notify the current transaction (if any) that this object is about to be modified and should be snapshot for intermediate update.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ShowPlatformSpecificLeaderboardScreen",
    "description": "Displays the built-in leaderboard GUI (iOS and Android only; this function may be renamed or moved in a future release)",
    "parameters": [
      {
        "name": "CategoryName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ShowPlatformSpecificAchievementsScreen",
    "description": "Displays the built-in achievements GUI (iOS and Android only; this function may be renamed or moved in a future release)",
    "parameters": [
      {
        "name": "SpecificPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ShowInterstitialAd",
    "description": "Shows the loaded interstitial ad (loaded with LoadInterstitialAd) (Android only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ShowAdBanner",
    "description": "Will show an ad banner (iAd on iOS, or AdMob on Android) on the top or bottom of screen, on top of the GL view (doesn't resize the view) (iOS and Android only)",
    "parameters": [
      {
        "name": "AdIdIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bShowOnBottomOfScreen",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetWindowTitle",
    "description": "Sets the game window title",
    "parameters": [
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetVolumeButtonsHandledBySystem",
    "description": "Allows or inhibits system default handling of volume up and volume down buttons (Android only)",
    "parameters": [
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetVectorPropertyByName",
    "description": "Set a VECTOR property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetVector3fPropertyByName",
    "description": "Set a VECTOR3F property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector3f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetUserActivity",
    "description": "Tells the engine what the user is doing for debug, analytics, etc.",
    "parameters": [
      {
        "name": "UserActivity",
        "type": "FUserActivity",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetTransformPropertyByName",
    "description": "Set a TRANSFORM property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetTextPropertyByName",
    "description": "Set a TEXT property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetSuppressViewportTransitionMessage",
    "description": "Sets the state of the transition message rendered by the viewport. (The blue text displayed when the game is paused and so forth.)",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bState",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetStructurePropertyByName",
    "description": "Set a custom structure property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGenericStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetStringPropertyByName",
    "description": "Set a STRING property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetSoftObjectPropertyByName",
    "description": "Set a SOFTOBJECT property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetSoftClassPropertyByName",
    "description": "Set a SOFTCLASS property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetRotatorPropertyByName",
    "description": "Set a ROTATOR property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetObjectPropertyByName",
    "description": "Set an OBJECT property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetNamePropertyByName",
    "description": "Set a NAME property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetLinearColorPropertyByName",
    "description": "Set a LINEAR COLOR property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetIntPropertyByName",
    "description": "Set an int32 property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetInterfacePropertyByName",
    "description": "Set an INTERFACE property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TScriptInterface_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetInt64PropertyByName",
    "description": "Set an int64 property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetGamepadsBlockDeviceFeedback",
    "description": "Sets whether attached gamepads will block feedback from the device itself (Mobile only).",
    "parameters": [
      {
        "name": "bBlock",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetFieldPathPropertyByName",
    "description": "Set a SOFTOBJECT property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "Unknown",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetEditorProperty",
    "description": "Attempts to set the value of a named property on the given object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ChangeNotifyMode",
        "type": "EPropertyAccessChangeNotifyMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetDoublePropertyByName",
    "description": "Set a double property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetColorPropertyByName",
    "description": "Set a COLOR property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetCollisionProfileNameProperty",
    "description": "Set a CollisionProfileName property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FCollisionProfileName",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetClassPropertyByName",
    "description": "Set a CLASS property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetBytePropertyByName",
    "description": "Set an uint8 or enum property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "SetBoolPropertyByName",
    "description": "Set a bool property by name",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "RetriggerableDelay",
    "description": "Perform a latent action with a retriggerable delay (specified in seconds).  Calling again while it is counting down will reset the countdown to Duration.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ResetGamepadAssignmentToController",
    "description": "* Resets the gamepad assignment to player controller id (Android and iOS only)",
    "parameters": [
      {
        "name": "ControllerId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ResetGamepadAssignments",
    "description": "Resets the gamepad to player controller id assignments (Android and iOS only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ResetEditorProperty",
    "description": "Attempts to reset the value of a named property on the given object so that it matches the value of the archetype.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ChangeNotifyMode",
        "type": "EPropertyAccessChangeNotifyMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "RegisterForRemoteNotifications",
    "description": "Requests permission to send remote notifications to the user's device. (Android and iOS only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "QuitGame",
    "description": "Exit the current game",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SpecificPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "QuitPreference",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnorePlatformRestrictions",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "QuitEditor",
    "description": "Exit the editor",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "PrintWarning",
    "description": "Prints a warning string to the log and the screen. Meant to be used as a way to inform the user that they misused the node. WARNING!! Don't change the signature of this function without fixing up all nodes using it in the compiler",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "PrintText",
    "description": "Prints text to the log, and optionally, to the screen If Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InText",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bPrintToScreen",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bPrintToLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TextColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "PrintString",
    "description": "Prints a string to the log, and optionally, to the screen If Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InString",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bPrintToScreen",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bPrintToLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TextColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ParseParamValue",
    "description": "Returns 'value' if -option=value is in the string",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InParam",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ParseParam",
    "description": "Returns true if the string has -param in it (do not specify the leading -)",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InParam",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ParseCommandLine",
    "description": "* Parses the given string into loose tokens, switches (arguments that begin with - or /) and parameters (-mySwitch=myVar) * * @@param        InCmdLine                       The the string to parse (ie '-foo -bar=/game/baz testtoken' ) * @@param        OutTokens[out]          Filled with all loose tokens found in the string (ie: testToken in above example) * @@param        OutSwitches[out]        Filled with all switches found in the string (ie -foo) * @@param        OutParams[out]          Filled with all switches found in the string with the format key = value (ie: -bar, /game/baz)",
    "parameters": [
      {
        "name": "InCmdLine",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTokens",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutSwitches",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "OutParams",
        "type": "TMap_string__string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "NotEqual_SoftObjectReference",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "NotEqual_SoftClassReference",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "NotEqual_PrimaryAssetType",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "NotEqual_PrimaryAssetId",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "NormalizeFilename",
    "description": "Convert all / and \\ to TEXT(\"/\")",
    "parameters": [
      {
        "name": "InFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MoveComponentTo",
    "description": "* Interpolate a component to the specified relative location and rotation over the course of OverTime seconds. * @@param Component                                             Component to interpolate * @@param TargetRelativeLocation                Relative target location * @@param TargetRelativeRotation                Relative target rotation * @@param bEaseOut                                              if true we will ease out (ie end slowly) during interpolation * @@param bEaseIn                                               if true we will ease in (ie start slowly) during interpolation * @@param OverTime                                              duration of interpolation * @@param bForceShortestRotationPath    if true we will always use the shortest path for rotation * @@param MoveAction                                    required movement behavior @@see EMoveComponentAction * @@param LatentInfo                                    The latent action",
    "parameters": [
      {
        "name": "Component",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetRelativeLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetRelativeRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bEaseOut",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bEaseIn",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OverTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceShortestRotationPath",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "MoveAction",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeTopLevelAssetPath",
    "description": "Builds a TopLevelAssetPath struct from single Path string or from PackageName and AssetName string.",
    "parameters": [
      {
        "name": "PackageName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTopLevelAssetPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeSoftObjectPath",
    "description": "Builds a Soft Object Path struct from a string that contains a full /folder/packagename.object path",
    "parameters": [
      {
        "name": "PathString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeSoftClassPath",
    "description": "Builds a Soft Class Path struct from a string that contains a full /folder/packagename.class path. For blueprint classes, this needs to point to the actual class (often with _C) and not the blueprint editor asset",
    "parameters": [
      {
        "name": "PathString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftClassPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralText",
    "description": "Creates a literal FText",
    "parameters": [
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralString",
    "description": "Creates a literal string",
    "parameters": [
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralName",
    "description": "Creates a literal name",
    "parameters": [
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralInt64",
    "description": "Creates a literal 64-bit integer",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralInt",
    "description": "Creates a literal integer",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralDouble",
    "description": "Creates a literal float (double-precision)",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralByte",
    "description": "Creates a literal byte",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeLiteralBool",
    "description": "Creates a literal bool",
    "parameters": [
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "MakeARFilter",
    "description": "Builds an ARFilter struct. You should be using ClassPaths and RecursiveClassPathsExclusionSet, ClassNames and RecursiveClassesExclusionSet are deprecated.",
    "parameters": [
      {
        "name": "PackageNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "PackagePaths",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "SoftObjectPaths",
        "type": "TArray_FSoftObjectPath_",
        "optional": false,
        "out": false
      },
      {
        "name": "ClassPaths",
        "type": "TArray_FTopLevelAssetPath_",
        "optional": false,
        "out": false
      },
      {
        "name": "RecursiveClassPathsExclusionSet",
        "type": "TSet_FTopLevelAssetPath_",
        "optional": false,
        "out": false
      },
      {
        "name": "ClassNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "RecursiveClassesExclusionSet",
        "type": "TSet_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursivePaths",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bRecursiveClasses",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bIncludeOnlyOnDiskAssets",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FARFilter"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LogString",
    "description": "Prints a string to the log If Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bPrintToLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LoadInterstitialAd",
    "description": "Will load a fullscreen interstitial AdMob ad. Call this before using ShowInterstitialAd (Android only)",
    "parameters": [
      {
        "name": "AdIdIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LoadClassAsset_Blocking",
    "description": "Resolves or loads a Soft Class Reference immediately, this will cause hitches and Async Load Class Asset should be used if possible",
    "parameters": [
      {
        "name": "AssetClass",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LoadAssetClass",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetClass",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "OnLoaded",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LoadAsset_Blocking",
    "description": "Resolves or loads a Soft Object Reference immediately, this will cause hitches and Async Load Asset should be used if possible",
    "parameters": [
      {
        "name": "Asset",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LoadAsset",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Asset",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "OnLoaded",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceSingleForObjects",
    "description": "Does a collision trace along the given line and returns the first hit encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceSingleByProfile",
    "description": "Trace a ray against the world using a specific profile and return the first blocking hit",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceSingle",
    "description": "Does a collision trace along the given line and returns the first blocking hit encountered. This trace finds the objects that RESPONDS to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceMultiForObjects",
    "description": "Does a collision trace along the given line and returns all hits encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceMultiByProfile",
    "description": "Trace a ray against the world using a specific profile and return overlapping hits and then first blocking hit Results are sorted, so a blocking hit (if found) will be the last element of the array Only the single closest blocking result will be generated, no tests will be done after that",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LineTraceMulti",
    "description": "Does a collision trace along the given line and returns all hits encountered up to and including the first blocking hit. This trace finds the objects that RESPOND to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LaunchURL",
    "description": "Opens the specified URL in the platform's web browser of choice",
    "parameters": [
      {
        "name": "URL",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "LaunchExternalUrl",
    "description": "Opens an external URL in the platform's web browser of choice if it meets the allowlist of passed in domains",
    "parameters": [
      {
        "name": "InDomainStrings",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "URL",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_UnPauseTimerHandle",
    "description": "Resumes a paused timer from its current elapsed time.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_UnPauseTimerDelegate",
    "description": "Resumes a paused timer from its current elapsed time.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_UnPauseTimer",
    "description": "Resumes a paused timer from its current elapsed time.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_TimerExistsHandle",
    "description": "Returns true is a timer for the given handle exists, false otherwise.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_TimerExistsDelegate",
    "description": "Returns true is a timer for the given delegate exists, false otherwise.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_TimerExists",
    "description": "Returns true is a timer for the given delegate exists, false otherwise.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_SetTimerForNextTickDelegate",
    "description": "Set a timer to execute a delegate next tick.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimerHandle"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_SetTimerForNextTick",
    "description": "Set a timer to execute a delegate on the next tick.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimerHandle"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_SetTimerDelegate",
    "description": "Set a timer to execute delegate. Setting an existing timer will reset that timer with updated parameters.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bLooping",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bMaxOncePerFrame",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InitialStartDelay",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InitialStartDelayVariance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTimerHandle"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_SetTimer",
    "description": "Set a timer to execute delegate. Setting an existing timer will reset that timer with updated parameters.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bLooping",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bMaxOncePerFrame",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InitialStartDelay",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InitialStartDelayVariance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTimerHandle"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_PauseTimerHandle",
    "description": "Pauses a set timer at its current elapsed time.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_PauseTimerDelegate",
    "description": "Pauses a set timer at its current elapsed time.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_PauseTimer",
    "description": "Pauses a set timer at its current elapsed time.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsValidTimerHandle",
    "description": "Returns whether the timer handle is valid. This does not indicate that there is an active timer that this handle references, but rather that it once referenced a valid timer.",
    "parameters": [
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerPausedHandle",
    "description": "Returns true if a timer exists and is paused for the given handle, false otherwise.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerPausedDelegate",
    "description": "Returns true if a timer exists and is paused for the given delegate, false otherwise.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerPaused",
    "description": "Returns true if a timer exists and is paused for the given delegate, false otherwise.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerActiveHandle",
    "description": "Returns true if a timer exists and is active for the given handle, false otherwise.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerActiveDelegate",
    "description": "Returns true if a timer exists and is active for the given delegate, false otherwise.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_IsTimerActive",
    "description": "Returns true if a timer exists and is active for the given delegate, false otherwise.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_InvalidateTimerHandle",
    "description": "Invalidate the supplied TimerHandle and return it.",
    "parameters": [
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FTimerHandle"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerRemainingTimeHandle",
    "description": "Returns time until the timer will next execute its handle.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerRemainingTimeDelegate",
    "description": "Returns time until the timer will next execute its delegate.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerRemainingTime",
    "description": "Returns time until the timer will next execute its delegate.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerElapsedTimeHandle",
    "description": "Returns elapsed time for the given handle (time since current countdown iteration began).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerElapsedTimeDelegate",
    "description": "Returns elapsed time for the given delegate (time since current countdown iteration began).",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_GetTimerElapsedTime",
    "description": "Returns elapsed time for the given delegate (time since current countdown iteration began).",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_ClearTimerHandle",
    "description": "Clears a set timer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_ClearTimerDelegate",
    "description": "Clears a set timer.",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_ClearTimer",
    "description": "Clears a set timer.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "K2_ClearAndInvalidateTimerHandle",
    "description": "Clears a set timer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FTimerHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidSoftObjectReference",
    "description": "Returns true if the Soft Object Reference is not null",
    "parameters": [
      {
        "name": "SoftObjectReference",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidSoftClassReference",
    "description": "Returns true if the Soft Class Reference is not null",
    "parameters": [
      {
        "name": "SoftClassReference",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidPrimaryAssetType",
    "description": "Returns list of Primary Asset Ids for a PrimaryAssetType",
    "parameters": [
      {
        "name": "PrimaryAssetType",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidPrimaryAssetId",
    "description": "Returns true if the Primary Asset Id is valid",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidInterface",
    "description": "Checks if the interface instance has a valid object for blueprint interface functions. This will return true for both natively implemented and blueprint implemented interfaces.",
    "parameters": [
      {
        "name": "Interface",
        "type": "TScriptInterface_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValidClass",
    "description": "Return true if the class is usable : non-null and not pending kill",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsValid",
    "description": "Return true if the object is usable : non-null and not pending kill",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsUnattended",
    "description": "Returns true if running unattended (-unattended is on the command line)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsStandalone",
    "description": "Returns whether this game instance is stand alone (no networking).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsSplitScreen",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsServer",
    "description": "Returns whether the world this object is in is the host or not",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsScreensaverEnabled",
    "description": "Returns true if screen saver is enabled.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsPackagedForDistribution",
    "description": "Returns whether this is a build that is packaged for distribution",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsObjectOfSoftClass",
    "description": "Returns true if Object is of type SoftClass - either an instance of the class or child class, or implements the interface. Alternative to Cast - slower but without adding a hard reference.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SoftClass",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsLoggedIn",
    "description": "Returns whether the player is logged in to the currently active online subsystem.",
    "parameters": [
      {
        "name": "SpecificPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsInterstitialAdRequested",
    "description": "Returns true if the requested interstitial ad has been successfully requested (false if load request fails) (Android only)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsInterstitialAdAvailable",
    "description": "Returns true if the requested interstitial ad is loaded and ready (Android only)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsEditorPropertyOverridden",
    "description": "Attempts to query whether the value of a named property on the given object overrides the value of its archetype (ie, would ResetEditorProperty do anything?).",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EEditorPropertyValueState"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsDedicatedServer",
    "description": "Returns whether this is running on a dedicated server",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "IsControllerAssignedToGamepad",
    "description": "Returns true if controller id assigned to a gamepad (Android and iOS only)",
    "parameters": [
      {
        "name": "ControllerId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "HideAdBanner",
    "description": "Hides the ad banner (iAd on iOS, or AdMob on Android). Will force close the ad if it's open (iOS and Android only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "HasMultipleLocalPlayers",
    "description": "Returns whether there are currently multiple local players in the given world",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetVolumeButtonsHandledBySystem",
    "description": "Returns true if system default handling of volume up and volume down buttons enabled (Android only)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetUniqueDeviceId",
    "description": "Returns the platform specific unique device id",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSystemPath",
    "description": "Returns the full file system path to a UObject If given a non-asset UObject, it will return an empty string",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSupportedFullscreenResolutions",
    "description": "Gets the list of support fullscreen resolutions.",
    "parameters": [
      {
        "name": "Resolutions",
        "type": "TArray_FIntPoint_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetStructTopLevelAssetPath",
    "description": "Returns the full path to the specified struct as a Top Level Asset Path used by asset utilities",
    "parameters": [
      {
        "name": "Struct",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTopLevelAssetPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSoftObjectReferenceFromPrimaryAssetId",
    "description": "Returns the Object Id associated with a Primary Asset Id, this works even if the asset is not loaded",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSoftObjectPath",
    "description": "Returns the full path to the specified object as a Soft Object Path",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSoftClassTopLevelAssetPath",
    "description": "Converts a Soft Class Reference to a Top Level Asset Path used by asset utilities",
    "parameters": [
      {
        "name": "SoftClassReference",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTopLevelAssetPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSoftClassReferenceFromPrimaryAssetId",
    "description": "Returns the Blueprint Class Id associated with a Primary Asset Id, this works even if the asset is not loaded",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftClassPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetSoftClassPath",
    "description": "Returns the full path to the specified class as a Soft Class Path (that can be used as a Soft Object Path)",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftClassPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetRenderingMaterialQualityLevel",
    "description": "Get the clamped state of r.MaterialQualityLevel, see console variable help (allows for scalability, cannot be used in construction scripts) 0: low 1: high 2: medium",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetRenderingDetailMode",
    "description": "Get the clamped state of r.DetailMode, see console variable help (allows for scalability, cannot be used in construction scripts) 0: low, show objects with DetailMode low 1: medium, show objects with DetailMode medium or below 2: high, show objects with DetailMode high or below 3: epic, show all objects",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetProjectSavedDirectory",
    "description": "Get the saved directory of the current project",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetProjectDirectory",
    "description": "Get the directory of the current project",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetProjectContentDirectory",
    "description": "Get the content directory of the current project",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetsWithBundleState",
    "description": "Returns the list of assets that are in a given bundle state. Required Bundles must be specified If ExcludedBundles is not empty, it will not return any assets in those bundle states If ValidTypes is not empty, it will only return assets of those types If ForceCurrentState is true it will use the current state even if a load is in process",
    "parameters": [
      {
        "name": "RequiredBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExcludedBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "ValidTypes",
        "type": "TArray_FPrimaryAssetType_",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceCurrentState",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPrimaryAssetIdList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetIdList",
    "description": "Returns list of PrimaryAssetIds for a PrimaryAssetType",
    "parameters": [
      {
        "name": "PrimaryAssetType",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPrimaryAssetIdList",
        "type": "TArray_FPrimaryAssetId_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetIdFromSoftObjectReference",
    "description": "Returns the Primary Asset Id for a Soft Object Reference, this can return an invalid one if not registered",
    "parameters": [
      {
        "name": "SoftObjectReference",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPrimaryAssetId"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetIdFromSoftClassReference",
    "description": "Returns the Primary Asset Id for a Soft Class Reference, this can return an invalid one if not registered",
    "parameters": [
      {
        "name": "SoftClassReference",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPrimaryAssetId"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetIdFromObject",
    "description": "Returns the Primary Asset Id for an Object, this can return an invalid one if not registered",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPrimaryAssetId"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPrimaryAssetIdFromClass",
    "description": "Returns the Primary Asset Id for a Class, this can return an invalid one if not registered",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPrimaryAssetId"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPreferredLanguages",
    "description": "Returns an array of the user's preferred languages in order of preference",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPlatformUserName",
    "description": "Get the current user name from the OS",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPlatformUserDir",
    "description": "Get the current user dir from the OS",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPlatformTime_Seconds",
    "description": "Returns the current platform time in seconds. Not coupled to any gameplay or other containerization logic - this function is useful for timing execution time or timestamping data. Marked as callable rather than pure because implicit evaluation may be confusing, both for blueprint authors and blueprint readers. For implicit execution simply wrap it in a blueprint pure function.",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetPathName",
    "description": "Returns the full path to the specified object as a string",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetOuterObject",
    "description": "Returns the outer object of an object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetObjectName",
    "description": "Returns the actual object name.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetObjectFromPrimaryAssetId",
    "description": "Returns the Object associated with a Primary Asset Id, this will only return a valid object if it is in memory, it will not load it",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetMinYResolutionForUI",
    "description": "Gets the smallest Y resolution we want to support in the UI, clamped within reasons",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetMinYResolutionFor3DView",
    "description": "Gets the smallest Y resolution we want to support in the 3D view, clamped within reasons",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetLocalCurrencySymbol",
    "description": "Returns the currency symbol associated with the device's locale",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetLocalCurrencyCode",
    "description": "Returns the currency code associated with the device's locale",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetGameTimeInSeconds",
    "description": "Get the current game time, in seconds. This stops when the game is paused and is affected by slomo.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetGamepadControllerName",
    "description": "Returns name of controller if assigned to a gamepad (or None if not assigned) (Android and iOS only)",
    "parameters": [
      {
        "name": "ControllerId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetGamepadButtonGlyph",
    "description": "Returns glyph assigned to a gamepad button (or a null ptr if not assigned) (iOS and tvOS only)",
    "parameters": [
      {
        "name": "ButtonKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetGameName",
    "description": "Get the name of the current game",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetGameBundleId",
    "description": "Retrieves the game's platform-specific bundle identifier or package name of the game",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetFrameCount",
    "description": "Returns the value of GFrameCounter, a running count of the number of frames that have occurred.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetEnumTopLevelAssetPath",
    "description": "Returns the full path to the specified enum as a Top Level Asset Path used by asset utilities",
    "parameters": [
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTopLevelAssetPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetEngineVersion",
    "description": "Engine build number, for displaying to end users.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetEditorProperty",
    "description": "Attempts to retrieve the value of a named property from the given object.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetDisplayName",
    "description": "Returns the display name (or actor label), for displaying as a debugging aid. Note: In editor builds, this is the actor label.  In non-editor builds, this is the actual object name.  This function should not be used to uniquely identify actors! It is not localized and should not be used for display to an end user of a game.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetDeviceId",
    "description": "Returns the platform specific unique device id",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetDefaultLocale",
    "description": "Get the default locale (for internationalization) used by this platform - A two-letter ISO 639-1 language code (eg, \"zh\") - An optional four-letter ISO 15924 script code (eg, \"Hans\") - An optional two-letter ISO 3166-1 country code (eg, \"CN\")",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetDefaultLanguage",
    "description": "Get the default language (for localization) used by this platform - A two-letter ISO 639-1 language code (eg, \"zh\") - An optional four-letter ISO 15924 script code (eg, \"Hans\") - An optional two-letter ISO 3166-1 country code (eg, \"CN\")",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetCurrentBundleState",
    "description": "Returns the list of loaded bundles for a given Primary Asset. This will return false if the asset is not loaded at all. If ForceCurrentState is true it will return the current state even if a load is in process",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceCurrentState",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBundles",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetConvenientWindowedResolutions",
    "description": "Gets the list of windowed resolutions which are convenient for the current primary display size.",
    "parameters": [
      {
        "name": "Resolutions",
        "type": "TArray_FIntPoint_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetConsoleVariableStringValue",
    "description": "Attempts to retrieve the value of the specified string console variable, if it exists.",
    "parameters": [
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetConsoleVariableIntValue",
    "description": "Attempts to retrieve the value of the specified integer console variable, if it exists.",
    "parameters": [
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetConsoleVariableFloatValue",
    "description": "Attempts to retrieve the value of the specified float console variable, if it exists.",
    "parameters": [
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetConsoleVariableBoolValue",
    "description": "Evaluates, if it exists, whether the specified integer console variable has a non-zero value (true) or not (false).",
    "parameters": [
      {
        "name": "VariableName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetComponentBounds",
    "description": "Get bounds",
    "parameters": [
      {
        "name": "Component",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetCommandLine",
    "description": "Returns the command line that the process was launched with.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetCollisionProfileNames",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetClassTopLevelAssetPath",
    "description": "Returns the full path to the specified class as a Top Level Asset Path used by asset utilities",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTopLevelAssetPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetClassFromPrimaryAssetId",
    "description": "Returns the Blueprint Class associated with a Primary Asset Id, this will only return a valid object if it is in memory, it will not load it",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetClassDisplayName",
    "description": "Returns the display name of a class",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetBuildVersion",
    "description": "Build version, for displaying to end users in diagnostics.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetBuildConfiguration",
    "description": "Build configuration, for displaying to end users in diagnostics.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetAdIDCount",
    "description": "Retrieves the total number of Ad IDs that can be selected between",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetActorListFromComponentList",
    "description": "Returns an array of unique actors represented by the given list of components.",
    "parameters": [
      {
        "name": "ComponentList",
        "type": "TArray_UPrimitiveComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActorList",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "GetActorBounds",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ForceCloseAdBanner",
    "description": "Forces closed any displayed ad. Can lead to loss of revenue (iOS and Android only)",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "FlushPersistentDebugLines",
    "description": "Flush all persistent debug lines and shapes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "FlushDebugStrings",
    "description": "Removes all debug strings.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ExecuteConsoleCommand",
    "description": "Executes a console command, optionally on a specific controller",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Command",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SpecificPlayer",
        "type": "APlayerController",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "EqualEqual_SoftObjectReference",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "EqualEqual_SoftClassReference",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "EqualEqual_PrimaryAssetType",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "EqualEqual_PrimaryAssetId",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "EndTransaction",
    "description": "Attempt to end the current undo transaction. Only successful if the transaction's action counter is 1.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugString",
    "description": "Draw a debug string at a 3d world location.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TextLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TestBaseActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "TextColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugSphere",
    "description": "Draw a debug sphere",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Segments",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugPoint",
    "description": "Draw a debug point",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PointColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugPlane",
    "description": "Draws a debug plane.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneCoordinates",
        "type": "FPlane",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugLine",
    "description": "Draw a debug line",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LineStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugFrustum",
    "description": "Draws a debug frustum.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FrustumTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "FrustumColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugFloatHistoryTransform",
    "description": "Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawTransform for the position in the world.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FloatHistory",
        "type": "FDebugFloatHistory",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawSize",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugFloatHistoryLocation",
    "description": "Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawLocation for the location in the world, rotation will face camera of first player.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FloatHistory",
        "type": "FDebugFloatHistory",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawSize",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCylinder",
    "description": "Draw a debug cylinder",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Segments",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCoordinateSystem",
    "description": "Draw a debug coordinate system.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AxisLoc",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "AxisRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugConeInDegrees",
    "description": "Draw a debug cone Angles are specified in degrees",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Length",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AngleWidth",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AngleHeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumSides",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCone",
    "description": "Draw a debug cone",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Length",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "AngleWidth",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "AngleHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NumSides",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCircle",
    "description": "Draw a debug circle!",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NumSegments",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "YAxis",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "ZAxis",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bDrawAxis",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCapsule",
    "description": "Draw a debug capsule",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugCamera",
    "description": "Draw a debug camera shape.",
    "parameters": [
      {
        "name": "CameraActor",
        "type": "ACameraActor",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugBox",
    "description": "Draw a debug box",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DrawDebugArrow",
    "description": "Draw directional arrow, pointing from LineStart to LineEnd.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LineStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrowSize",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "LineColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DoesImplementInterface",
    "description": "Checks if the given object implements a specific interface, works for both native and blueprint interfacse",
    "parameters": [
      {
        "name": "TestObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Interface",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DoesClassImplementInterface",
    "description": "Checks if the given class implements a specific interface, works for both native and blueprint interfacse",
    "parameters": [
      {
        "name": "TestClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Interface",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "DelayUntilNextTick",
    "description": "Perform a latent action with a delay of one tick.  Calling again while it is counting down will be ignored.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Delay",
    "description": "Perform a latent action with a delay (specified in seconds).  Calling again while it is counting down will be ignored.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CreateCopyForUndoBuffer",
    "description": "Mark as modified.",
    "parameters": [
      {
        "name": "ObjectToModify",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ConvertToRelativePath",
    "description": "Converts passed in filename to use a relative path",
    "parameters": [
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ConvertToAbsolutePath",
    "description": "Converts passed in filename to use a absolute path",
    "parameters": [
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftObjRefToSoftObjPath",
    "description": "Converts a Soft Object Reference into a Soft Object Path",
    "parameters": [
      {
        "name": "SoftObjectReference",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftObjRefToSoftClassPath",
    "description": "Converts a Soft Class Reference into a Soft Class Path (which can be used like a Soft Object Path)",
    "parameters": [
      {
        "name": "SoftClassReference",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftClassPath"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftObjPathToSoftObjRef",
    "description": "Converts a Soft Object Path into a base Soft Object Reference, this is not guaranteed to be resolvable",
    "parameters": [
      {
        "name": "SoftObjectPath",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftObjectReferenceToString",
    "description": "Converts a Soft Object Reference to a path string",
    "parameters": [
      {
        "name": "SoftObjectReference",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftObjectReferenceToObject",
    "description": "Internal functions used by K2Node_LoadAsset and K2Node_ConvertAsset",
    "parameters": [
      {
        "name": "SoftObject",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftClassReferenceToString",
    "description": "Converts a Soft Class Reference to a path string",
    "parameters": [
      {
        "name": "SoftClassReference",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftClassReferenceToClass",
    "description": "",
    "parameters": [
      {
        "name": "SoftClass",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_SoftClassPathToSoftClassRef",
    "description": "Converts a Soft Class Path into a base Soft Class Reference, this is not guaranteed to be resolvable",
    "parameters": [
      {
        "name": "SoftClassPath",
        "type": "FSoftClassPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftClassPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_PrimaryAssetTypeToString",
    "description": "Converts a Primary Asset Type to a string. The other direction is not provided because it cannot be validated",
    "parameters": [
      {
        "name": "PrimaryAssetType",
        "type": "FPrimaryAssetType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_PrimaryAssetIdToString",
    "description": "Converts a Primary Asset Id to a string. The other direction is not provided because it cannot be validated",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_ObjectToSoftObjectReference",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_ObjectToClass",
    "description": "Casts from an object to a class, this will only work if the object is already a class",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_InterfaceToObject",
    "description": "Converts an interface instance into an object",
    "parameters": [
      {
        "name": "Interface",
        "type": "TScriptInterface_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_ComponentReferenceToSoftComponentReference",
    "description": "",
    "parameters": [
      {
        "name": "ComponentReference",
        "type": "FComponentReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftComponentReference"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "Conv_ClassToSoftClassReference",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftClassPtr_UObject_"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ControlScreensaver",
    "description": "Allows or inhibits screensaver",
    "parameters": [
      {
        "name": "bAllowScreenSaver",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ComponentOverlapComponents",
    "description": "Returns an array of components that overlap the given component.",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutComponents",
        "type": "TArray_UPrimitiveComponent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "ComponentOverlapActors",
    "description": "Returns an array of actors that overlap the given component.",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CollectGarbage",
    "description": "Deletes all unreferenced objects, keeping only referenced objects (this command will be queued and happen at the end of the frame) Note: This can be a slow operation, and should only be performed where a hitch would be acceptable",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceSingleForObjects",
    "description": "Sweeps a capsule along the given line and returns the first hit encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceSingleByProfile",
    "description": "Sweep a capsule against the world and return the first blocking hit using a specific profile",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceSingle",
    "description": "Sweeps a capsule along the given line and returns the first blocking hit encountered. This trace finds the objects that RESPOND to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceMultiForObjects",
    "description": "Sweeps a capsule along the given line and returns all hits encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceMultiByProfile",
    "description": "Sweep a capsule against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit Results are sorted, so a blocking hit (if found) will be the last element of the array Only the single closest blocking result will be generated, no tests will be done after that",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleTraceMulti",
    "description": "Sweeps a capsule along the given line and returns all hits encountered up to and including the first blocking hit. This trace finds the objects that RESPOND to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleOverlapComponents",
    "description": "Returns an array of components that overlap the given capsule.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CapsulePos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutComponents",
        "type": "TArray_UPrimitiveComponent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CapsuleOverlapActors",
    "description": "Returns an array of actors that overlap the given capsule.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CapsulePos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CanLaunchURL",
    "description": "",
    "parameters": [
      {
        "name": "URL",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "CancelTransaction",
    "description": "Cancel the current transaction, and no longer capture actions to be placed in the undo buffer.",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BreakTopLevelAssetPath",
    "description": "Gets the path string out of a TopLevelAssetPath",
    "parameters": [
      {
        "name": "TopLevelAssetPath",
        "type": "FTopLevelAssetPath",
        "optional": false,
        "out": false
      },
      {
        "name": "PathString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BreakSoftObjectPath",
    "description": "Gets the path string out of a Soft Object Path",
    "parameters": [
      {
        "name": "InSoftObjectPath",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      },
      {
        "name": "PathString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BreakSoftClassPath",
    "description": "Gets the path string out of a Soft Class Path",
    "parameters": [
      {
        "name": "InSoftClassPath",
        "type": "FSoftClassPath",
        "optional": false,
        "out": false
      },
      {
        "name": "PathString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BreakARFilter",
    "description": "Breaks an ARFilter struct into its component pieces. You should be using ClassPaths and RecursiveClassPathsExclusionSet from this node, ClassNames and RecursiveClassesExclusionSet are deprecated.",
    "parameters": [
      {
        "name": "InARFilter",
        "type": "FARFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "PackageNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "PackagePaths",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "SoftObjectPaths",
        "type": "TArray_FSoftObjectPath_",
        "optional": false,
        "out": true
      },
      {
        "name": "ClassPaths",
        "type": "TArray_FTopLevelAssetPath_",
        "optional": false,
        "out": true
      },
      {
        "name": "RecursiveClassPathsExclusionSet",
        "type": "TSet_FTopLevelAssetPath_",
        "optional": false,
        "out": true
      },
      {
        "name": "ClassNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "RecursiveClassesExclusionSet",
        "type": "TSet_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "bRecursivePaths",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bRecursiveClasses",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bIncludeOnlyOnDiskAssets",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceSingleForObjects",
    "description": "Sweeps a box along the given line and returns the first hit encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceSingleByProfile",
    "description": "Sweep a box against the world and return the first blocking hit using a specific profile",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceSingle",
    "description": "Sweeps a box along the given line and returns the first blocking hit encountered. This trace finds the objects that RESPONDS to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceMultiForObjects",
    "description": "Sweeps a box along the given line and returns all hits encountered. This only finds objects that are of a type specified by ObjectTypes.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceMultiByProfile",
    "description": "Sweep a box against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit Results are sorted, so a blocking hit (if found) will be the last element of the array Only the single closest blocking result will be generated, no tests will be done after that",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxTraceMulti",
    "description": "Sweeps a box along the given line and returns all hits encountered. This trace finds the objects that RESPONDS to the given TraceChannel",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHits",
        "type": "TArray_FHitResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxOverlapComponents",
    "description": "Returns an array of components that overlap the given axis-aligned box.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extent",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutComponents",
        "type": "TArray_UPrimitiveComponent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BoxOverlapActors",
    "description": "Returns an array of actors that overlap the given axis-aligned box.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxPos",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxExtent",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClassFilter",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "BeginTransaction",
    "description": "Begin a new undo transaction. An undo transaction is defined as all actions which take place when the user selects \"undo\" a single time.",
    "parameters": [
      {
        "name": "Context",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Description",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimaryObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UKismetSystemLibrary",
    "name": "AddFloatHistorySample",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "FloatHistory",
        "type": "FDebugFloatHistory",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDebugFloatHistory"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextTrimTrailing",
    "description": "Removes trailing whitespace characters.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextTrimPrecedingAndTrailing",
    "description": "Removes whitespace characters from the front and end of the text.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextTrimPreceding",
    "description": "Removes whitespace characters from the front of the text.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextToUpper",
    "description": "Transforms the text to uppercase in a culture correct way.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextToLower",
    "description": "Transforms the text to lowercase in a culture correct way.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextIsTransient",
    "description": "Returns true if text is transient.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextIsFromStringTable",
    "description": "Returns true if the given text is referencing a string table.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextIsEmpty",
    "description": "Returns true if text is empty.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextIsCultureInvariant",
    "description": "Returns true if text is culture invariant.",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "TextFromStringTable",
    "description": "Attempts to create a text instance from a string table ID and key.",
    "parameters": [
      {
        "name": "TableId",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "StringTableIdAndKeyFromText",
    "description": "Attempts to get the String Table ID and key used by the given text.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTableId",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "PolyglotDataToText",
    "description": "Get the text instance created from this polyglot data.",
    "parameters": [
      {
        "name": "PolyglotData",
        "type": "FPolyglotTextData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "NotEqual_TextText",
    "description": "Returns true if A and B are linguistically not equal (A != B).",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "NotEqual_IgnoreCase_TextText",
    "description": "Returns true if A and B are linguistically not equal (A != B), ignoring case.",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "MakeInvariantText",
    "description": "Converts string to culture invariant text. Use 'Make Literal Text' to create localizable text, or 'Format' if concatenating localized text",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "IsPolyglotDataValid",
    "description": "Check whether the given polyglot data is valid.",
    "parameters": [
      {
        "name": "PolyglotData",
        "type": "FPolyglotTextData",
        "optional": false,
        "out": false
      },
      {
        "name": "IsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ErrorMessage",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "GetTextSourceString",
    "description": "Get the (non-localized) source string of the given text.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "GetTextId",
    "description": "Attempts to get the ID (namespace and key) used by the given text.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutNamespace",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "GetEmptyText",
    "description": "Returns an empty piece of text.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Format",
    "description": "Used for formatting text using the FText::Format function and utilized by the UK2Node_FormatText",
    "parameters": [
      {
        "name": "InPattern",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InArgs",
        "type": "TArray_FFormatArgumentData_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "FindTextInLocalizationTable",
    "description": "=== !! This is an ADVANCED function. USE WITH CAUTION !! === Attempt to dynamically reference an EXISTING Text via its active display string in the live table. Note: This can ONLY find text that is currently localized (gathered, translated, and has an active display string in TextLocalizationManager). If you need to find a localizable but untranslated text, see 'Make Literal Text'. Note: Direct dynamic references to Text are EXTREMELY FRAGILE, and you may want to use a string table instead!",
    "parameters": [
      {
        "name": "Namespace",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutText",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "EqualEqual_TextText",
    "description": "Returns true if A and B are linguistically equal (A == B).",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "EqualEqual_IgnoreCase_TextText",
    "description": "Returns true if A and B are linguistically equal (A == B), ignoring case.",
    "parameters": [
      {
        "name": "A",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "EditTextSourceString",
    "description": "Edit the source string of the given text property, akin to what happens when editing a text property in a details panel. This will attempt to preserve the existing ID of the text property being edited, or failing that will attempt to build a deterministic ID based on the object and property info.",
    "parameters": [
      {
        "name": "TextOwner",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "SourceString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_VectorToText",
    "description": "Converts a vector value to localized formatted text, in the form 'X= Y= Z='",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_Vector2dToText",
    "description": "Converts a vector2d value to localized formatted text, in the form 'X= Y='",
    "parameters": [
      {
        "name": "InVec",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_TransformToText",
    "description": "Converts a transform value to localized formatted text, in the form 'Translation: X= Y= Z= Rotation: P= Y= R= Scale: X= Y= Z='",
    "parameters": [
      {
        "name": "InTrans",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_TextToString",
    "description": "Converts localizable text to the string",
    "parameters": [
      {
        "name": "InText",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_StringToText",
    "description": "Converts string to culture invariant text. Use 'Make Literal Text' to create localizable text, or 'Format' if concatenating localized text",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_RotatorToText",
    "description": "Converts a rotator value to localized formatted text, in the form 'P= Y= R='",
    "parameters": [
      {
        "name": "InRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_ObjectToText",
    "description": "Converts a UObject value to culture invariant text by calling the object's GetName method",
    "parameters": [
      {
        "name": "InObj",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_NumericPropertyToText",
    "description": "Converts a generic value to localized formatted text using the user culture.",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_NameToText",
    "description": "Converts Name to culture invariant text",
    "parameters": [
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_IntToText",
    "description": "Converts a passed in integer to text based on formatting options",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_Int64ToText",
    "description": "Converts a passed in integer to text based on formatting options",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_DoubleToText",
    "description": "Converts a passed in double to text based on formatting options",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RoundingMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_ColorToText",
    "description": "Converts a linear color value to localized formatted text, in the form '(R=,G=,B=,A=)'",
    "parameters": [
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_ByteToText",
    "description": "Converts a byte value to formatted text",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "Conv_BoolToText",
    "description": "Converts a boolean value to formatted text, either 'true' or 'false'",
    "parameters": [
      {
        "name": "InBool",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsTimeZoneTime_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a time using the given timezone (default is the local timezone). This will convert the given date & time from UTC to the given timezone (taking into account DST).",
    "parameters": [
      {
        "name": "InDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InTimeZone",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InTimeStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsTimeZoneDateTime_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a date & time using the given timezone (default is the local timezone). This will convert the given date & time from UTC to the given timezone (taking into account DST).",
    "parameters": [
      {
        "name": "InDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InTimeZone",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDateStyle",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InTimeStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsTimeZoneDate_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a date using the given timezone (default is the local timezone). This will convert the given date & time from UTC to the given timezone (taking into account DST).",
    "parameters": [
      {
        "name": "InDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InTimeZone",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDateStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsTimespan_Timespan",
    "description": "Converts a passed in time span to a text, formatted as a time span",
    "parameters": [
      {
        "name": "InTimespan",
        "type": "FTimespan",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsTime_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a time using an invariant timezone. This will use the given date & time as-is, so it's assumed to already be in the correct timezone.",
    "parameters": [
      {
        "name": "In",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InTimeStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsPercent_Float",
    "description": "Converts a passed in float to a text, formatted as a percent",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RoundingMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsMemory",
    "description": "Generate an FText that represents the passed number as a memory size in the current culture",
    "parameters": [
      {
        "name": "NumBytes",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UnitStandard",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsDateTime_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a date & time using an invariant timezone. This will use the given date & time as-is, so it's assumed to already be in the correct timezone.",
    "parameters": [
      {
        "name": "In",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InDateStyle",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InTimeStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsDate_DateTime",
    "description": "Converts a passed in date & time to a text, formatted as a date using an invariant timezone. This will use the given date & time as-is, so it's assumed to already be in the correct timezone.",
    "parameters": [
      {
        "name": "InDateTime",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "InDateStyle",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsCurrencyBase",
    "description": "Generate an FText that represents the passed number as currency in the current culture. BaseVal is specified in the smallest fractional value of the currency and will be converted for formatting according to the selected culture. Keep in mind the CurrencyCode is completely independent of the culture it's displayed in (and they do not imply one another). For example: FText::AsCurrencyBase(650, TEXT(\"EUR\")); would return an FText of \"<EUR>6.50\" in most English cultures (en_US/en_UK) and \"6,50<EUR>\" in Spanish (es_ES) (where <EUR> is U+20AC)",
    "parameters": [
      {
        "name": "BaseValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CurrencyCode",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsCurrency_Integer",
    "description": "Converts a passed in integer to a text formatted as a currency",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "RoundingMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "CurrencyCode",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UKismetTextLibrary",
    "name": "AsCurrency_Float",
    "description": "Converts a passed in float to a text formatted as a currency",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RoundingMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAlwaysSign",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseGrouping",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumIntegralDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinimumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaximumFractionalDigits",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "CurrencyCode",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULevelStreamingDynamic",
    "name": "LoadLevelInstanceBySoftObjectPtr",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Level",
        "type": "TSoftObjectPtr_UWorld_",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OptionalLevelNameOverride",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalLevelStreamingClass",
        "type": "TSubclassOf_ULevelStreamingDynamic_",
        "optional": true,
        "out": false
      },
      {
        "name": "bLoadAsTempPackage",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "ULevelStreamingDynamic"
  },
  {
    "class": "ULevelStreamingDynamic",
    "name": "LoadLevelInstance",
    "description": "Stream in a level with a specific location and rotation. You can create multiple instances of the same level! The level to be loaded does not have to be in the persistent map's Levels list, however to ensure that the .umap does get packaged, please be sure to include the .umap in your Packaging Settings: Project Settings -> Packaging -> List of Maps to Include in a Packaged Build (you may have to show advanced or type in filter)",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OptionalLevelNameOverride",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalLevelStreamingClass",
        "type": "TSubclassOf_ULevelStreamingDynamic_",
        "optional": true,
        "out": false
      },
      {
        "name": "bLoadAsTempPackage",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "ULevelStreamingDynamic"
  },
  {
    "class": "ULightWeightInstanceBlueprintFunctionLibrary",
    "name": "CreateNewLightWeightInstance",
    "description": "Returns a handle to a new light weight instance that represents an object of type ActorClass",
    "parameters": [
      {
        "name": "ActorClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Layer",
        "type": "UDataLayerInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FActorInstanceHandle"
  },
  {
    "class": "ULightWeightInstanceBlueprintFunctionLibrary",
    "name": "ConvertActorToLightWeightInstance",
    "description": "Returns a handle to the light weight representation and destroys Actor if successful; Returns a handle to Actor otherwise",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FActorInstanceHandle"
  },
  {
    "class": "ULocalLightComponent",
    "name": "GetUnitsConversionFactor",
    "description": "A light component which emits light from a single point equally in all directions. Set the units used for the intensity of the light",
    "parameters": [
      {
        "name": "SrcUnits",
        "type": "ELightUnits",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetUnits",
        "type": "ELightUnits",
        "optional": false,
        "out": false
      },
      {
        "name": "CosHalfConeAngle",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "ULocalPlayerSaveGame",
    "name": "LoadOrCreateSaveGameForLocalPlayer",
    "description": "Abstract subclass of USaveGame that provides utility functions that let you associate a Save Game object with a specific local player. These objects can also be loaded using the functions on GameplayStatics, but you would need to call functions like InitializeSaveGame manually. For simple games, it is fine to blueprint this class directly and add parameters and override functions in blueprint, but for complicated games you will want to subclass this in native code and set up proper versioning. Returns true if a save was ever requested, may still be in progress Returns true if this was loaded from an existing save Returns true if it has been saved at least once and the last save was successful Synchronously save using the slot and user index, stalling the main thread until it completes. This will return true if the save was requested, and errors should be handled by the HandlePostSave function that will be called immediately. Resets all saved data to default values, called when the load fails or manually Blueprint event called to reset all saved data to default, called when the load fails or manually Blueprint event called before saving, do any game-specific fixup here Blueprint event called after saving finishes with success/failure result Blueprint event called after loading, is not called for newly created saves Synchronously loads a save game object in the specified slot for the local player, stalling the main thread until it completes. This will return null for invalid parameters, but will create a new instance if the parameters are valid but loading fails.",
    "parameters": [
      {
        "name": "SaveGameClass",
        "type": "TSubclassOf_ULocalPlayerSaveGame_",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalPlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULocalPlayerSaveGame",
    "name": "AsyncLoadOrCreateSaveGameForLocalPlayer",
    "description": "Returns true if a save is in progress Returns the save slot name to use Returns the game-specific version number this was last saved/loaded as Returns the user index to save to, based on Local Player by default Returns the platform user to save to, based on Local Player by default Returns the local player controller this is associated with, this will be valid if it is ready to save Returns the latest save data version, this is used when the new data is saved Returns the invalid save data version, which means it has never been saved/loaded Asynchronously save to the slot and user index. This will return true if the save was requested, and errors should be handled by the HandlePostSave function after the save succeeds or fails Asynchronously loads a save game object in the specified slot for the local player, if this returns true the delegate will get called later. False means the load was never scheduled, otherwise it will create and initialize a new instance before calling the delegate if loading failed.",
    "parameters": [
      {
        "name": "SaveGameClass",
        "type": "TSubclassOf_ULocalPlayerSaveGame_",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalPlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMeshVertexPainterKismetLibrary",
    "name": "RemovePaintedVertices",
    "description": "Removes vertex colors on a mesh component",
    "parameters": [
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMeshVertexPainterKismetLibrary",
    "name": "PaintVerticesSingleColor",
    "description": "Paints vertex colors on a mesh component in a specified color.",
    "parameters": [
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "FillColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bConvertToSRGB",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMeshVertexPainterKismetLibrary",
    "name": "PaintVerticesLerpAlongAxis",
    "description": "Paints vertex colors on a mesh component lerping from the start to the end color along the specified axis.",
    "parameters": [
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "StartColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "EndColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EVertexPaintAxis",
        "optional": false,
        "out": false
      },
      {
        "name": "bConvertToSRGB",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNetPushModelHelpers",
    "name": "MarkPropertyDirtyFromRepIndex",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RepIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNetPushModelHelpers",
    "name": "MarkPropertyDirty",
    "description": "Mark replicated property as dirty with the Push Model networking system",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPhysicsFieldStatics",
    "name": "EvalPhysicsVectorField",
    "description": "Static function with world field evaluation Evaluate the world physics vector field from BP",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPhysicsFieldStatics",
    "name": "EvalPhysicsScalarField",
    "description": "Evaluate the world physics scalar field from BP",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPhysicsFieldStatics",
    "name": "EvalPhysicsIntegerField",
    "description": "Evaluate the world physics integer field from BP",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "IntegerType",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPhysicsObjectBlueprintLibrary",
    "name": "GetPhysicsObjectWorldTransform",
    "description": "",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPhysicsObjectBlueprintLibrary",
    "name": "GetClosestPhysicsObjectFromWorldLocation",
    "description": "",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FClosestPhysicsObjectResult"
  },
  {
    "class": "UPhysicsObjectBlueprintLibrary",
    "name": "ExtractClosestPhysicsObjectResults",
    "description": "",
    "parameters": [
      {
        "name": "Result",
        "type": "FClosestPhysicsObjectResult",
        "optional": false,
        "out": false
      },
      {
        "name": "OutName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPhysicsObjectBlueprintLibrary",
    "name": "ApplyRadialImpulse",
    "description": "Apply a physics radial impulse with an optional strain on a specific component Effect is applied within a sphere. When using linear falloff the effect will be minimum at the outer edge of the sphere and maximum at its center",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Strength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Falloff",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyStrain",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Strain",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bVelChange",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinValue",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxValue",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPhysicsThreadLibrary",
    "name": "AddForce",
    "description": "Add a force to a single rigid body. This is like a 'thruster'. Good for adding a burst over some (non zero) time. Should be called every frame for the duration of the force.",
    "parameters": [
      {
        "name": "Handle",
        "type": "FBodyInstanceAsyncPhysicsTickHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Force",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bAccelChange",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "IsPluginMounted",
    "description": "A function library of utilities for querying information about plugins. Determine whether a plugin is mounted.",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginVersionName",
    "description": "Get the version name of a plugin. name was stored in OutVersionName, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutVersionName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginVersion",
    "description": "Get the version number of a plugin. number was stored in OutVersion, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutVersion",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginNameForObjectPath",
    "description": "Get the name of the plugin containing an object. name was stored in OutPluginName, or false otherwise",
    "parameters": [
      {
        "name": "ObjectPath",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPluginName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginMountedAssetPath",
    "description": "Get the virtual root path for assets in a plugin. root path was stored in OutAssetPath, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutAssetPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginEditorCustomVirtualPath",
    "description": "Get the editor custom virtual path of a plugin. custom virtual path was stored in OutVirtualPath, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutVirtualPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginDescriptorFilePath",
    "description": "Get the filesystem path to a plugin's descriptor. filesystem path was stored in OutFilePath, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFilePath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginDescription",
    "description": "Get the description of a plugin. was stored in OutDescription, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutDescription",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginContentDir",
    "description": "Get the filesystem path to a plugin's content directory. directory filesystem path was stored in OutContentDir, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutContentDir",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetPluginBaseDir",
    "description": "Get the filesystem path to a plugin's base directory. filesystem path was stored in OutBaseDir, or false otherwise",
    "parameters": [
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBaseDir",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetEnabledPluginNames",
    "description": "Get the names of all enabled plugins.",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetAdditionalProjectPluginSearchPaths",
    "description": "Get the list of extra directories added by the project that are recursively searched for plugins.",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UPluginBlueprintLibrary",
    "name": "GetAdditionalPluginSearchPaths",
    "description": "Get the list of extra directories that are recursively searched for plugins (aside from the engine and project plugin directories).",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "URawAnimSequenceTrackExtensions",
    "name": "GetScaleKeys",
    "description": "Returns the scale keys contained by the FRawAnimSequenceTrack",
    "parameters": [
      {
        "name": "Track",
        "type": "FRawAnimSequenceTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "URawAnimSequenceTrackExtensions",
    "name": "GetRotationalKeys",
    "description": "Returns the rotational keys contained by the FRawAnimSequenceTrack",
    "parameters": [
      {
        "name": "Track",
        "type": "FRawAnimSequenceTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FQuat_"
  },
  {
    "class": "URawAnimSequenceTrackExtensions",
    "name": "GetPositionalKeys",
    "description": "Returns the positional keys contained by the FRawAnimSequenceTrack",
    "parameters": [
      {
        "name": "Track",
        "type": "FRawAnimSequenceTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UStaticMesh",
    "name": "CreateStaticMeshDescription",
    "description": "A StaticMesh is a piece of geometry that consists of a static set of polygons. Static Meshes can be translated, rotated, and scaled, but they cannot have their vertices animated in any way. As such, they are more efficient to render than other types of geometry such as USkeletalMesh, and they are often the basic building block of levels created in the engine. Allow to override min lod quality levels on a staticMesh and it Default value (-1 value for Default dont override its value). Sets a Material given a Material Index Remove a socket object in this StaticMesh by providing it's pointer. Use FindSocket() if needed. Return a new StaticMeshDescription referencing the MeshDescription of the given LOD Returns a list of sockets with the provided tag. Returns the number of triangles in the render data for the specified LOD. Returns number of Sections that this StaticMesh has, in the supplied LOD (LOD 0 is the highest) Returns the number of LODs used by the mesh. Gets a Material index given a slot name Gets a Material given a Material Index and an LOD number Returns the number of bounds of the mesh. Returns the bounding box, in local space including bounds extension(s), of the StaticMesh asset Find a socket object in this StaticMesh by name. Entering NAME_None will return NULL. If there are multiple sockets with the same name, will return the first one. Create an empty StaticMeshDescription object, to describe a static mesh at runtime",
    "parameters": [
      {
        "name": "Outer",
        "type": "UObject",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetWorldSubsystem",
    "description": "Get a World Subsystem from the World associated with the provided context",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_UWorldSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWorldSubsystem"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetLocalPlayerSubSystemFromPlayerController",
    "description": "Get a Local Player Subsystem from the LocalPlayer associated with the provided context If the player controller isn't associated to a LocalPlayer nullptr is returned",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_ULocalPlayerSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULocalPlayerSubsystem"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetLocalPlayerSubsystem",
    "description": "Get a Local Player Subsystem from the Local Player associated with the provided context",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_ULocalPlayerSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULocalPlayerSubsystem"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetGameInstanceSubsystem",
    "description": "Get a Game Instance Subsystem from the Game Instance associated with the provided context",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_UGameInstanceSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGameInstanceSubsystem"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetEngineSubsystem",
    "description": "Get a Game Instance Subsystem from the Game Instance associated with the provided context",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UEngineSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEngineSubsystem"
  },
  {
    "class": "USubsystemBlueprintLibrary",
    "name": "GetAudioEngineSubsystem",
    "description": "Get an AudioEngine Subsystem from the AudioDevice associated with the provided context",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_UAudioEngineSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAudioEngineSubsystem"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "UniversalObjectLocatorFromString",
    "description": "Function library containing methods that should be hoisted onto FUniversalObjectLocators for scripting Construct a new universal object locator from a string",
    "parameters": [
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FUniversalObjectLocator"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "ToString",
    "description": "Convert the specified locator to its string representation",
    "parameters": [
      {
        "name": "Locator",
        "type": "FUniversalObjectLocator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "SyncUnload",
    "description": "Attempt to resolve the object locator by unloading the object if possible.",
    "parameters": [
      {
        "name": "Locator",
        "type": "FUniversalObjectLocator",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "UObject",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "SyncLoad",
    "description": "Attempt to resolve the object locator by finding or loading the object.",
    "parameters": [
      {
        "name": "Locator",
        "type": "FUniversalObjectLocator",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "UObject",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "SyncFind",
    "description": "Attempt to resolve the object locator by finding the object. If it is not currently loaded or created,",
    "parameters": [
      {
        "name": "Locator",
        "type": "FUniversalObjectLocator",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "UObject",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "MakeUniversalObjectLocator",
    "description": "Construct a new universal object locator",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FUniversalObjectLocator"
  },
  {
    "class": "UUniversalObjectLocatorScriptingExtensions",
    "name": "IsEmpty",
    "description": "Check whether the specified locator is empty; not equivalent to Resolve() != None. An empty locator will never resolve to a valid object.",
    "parameters": [
      {
        "name": "Locator",
        "type": "FUniversalObjectLocator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UUserInterfaceSettings",
    "name": "ShouldDisplayDistanceFieldFontSettings",
    "description": "User Interface settings that control Slate and UMG.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "RedirectVislog",
    "description": "Makes SourceOwner log to DestinationOwner's vislog",
    "parameters": [
      {
        "name": "SourceOwner",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationOwner",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogText",
    "description": "Logs simple text string with Visual Logger - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogSphere",
    "description": "Logs sphere shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogSegment",
    "description": "Logs segment - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "CategoryName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogOrientedBox",
    "description": "Logs oriented box shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxShape",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogLocation",
    "description": "Logs location as sphere with given radius - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogCylinder",
    "description": "Logs cylinder shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogCone",
    "description": "Logs cone shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Length",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Angle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogCircle",
    "description": "Logs circle - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "UpAxis",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "CategoryName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogCapsule",
    "description": "Logs capsule shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Base",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogBox",
    "description": "Logs box shape - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxShape",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "LogCategory",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWireframe",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "LogArrow",
    "description": "Logs arrow - recording for Visual Logs has to be enabled to record this data",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegmentEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "CategoryName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bAddToMessageLog",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVisualLoggerKismetLibrary",
    "name": "EnableRecording",
    "description": "",
    "parameters": [
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVOIPStatics",
    "name": "SetMicThreshold",
    "description": "This function sets the Mic threshold for VOIP chat.",
    "parameters": [
      {
        "name": "InThreshold",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVOIPTalker",
    "name": "CreateTalkerForPlayer",
    "description": "This function sets up this talker with a specific player. It is necessary to use this to properly control a specific player's voice and receive events. Get the current level of how loud this player is speaking. Will return 0.0 if player is not talking. function for creating and registering a UVOIPTalker.",
    "parameters": [
      {
        "name": "OwningState",
        "type": "APlayerState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "UnpinActors",
    "description": "Unpin actors",
    "parameters": [
      {
        "name": "InActorsToUnpin",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "UnloadActors",
    "description": "Unload actors",
    "parameters": [
      {
        "name": "InActorsToUnload",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "PinActors",
    "description": "Pin actors",
    "parameters": [
      {
        "name": "InActorsToPin",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "LoadActors",
    "description": "Load actors",
    "parameters": [
      {
        "name": "InActorsToLoad",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetRuntimeWorldBounds",
    "description": "Gets the runtime world bounds, which only includes actor descriptors that aren't editor only.",
    "parameters": [],
    "returnType": "FBox"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetIntersectingActorDescs",
    "description": "Gets all the actor descriptors intersecting the provided box into the provided array, recursing into actor containers.",
    "parameters": [
      {
        "name": "InBox",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActorDescs",
        "type": "TArray_FActorDesc_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetEditorWorldBounds",
    "description": "Gets the editor world bounds, which includes all actor descriptors.",
    "parameters": [],
    "returnType": "FBox"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetDataLayerManager",
    "description": "Returns the Data Layer Manager for this object.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UDataLayerManager"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetActorDescsForActors",
    "description": "Gets all the actor descriptors from the provided actor pointers, which represents descriptors on disk, e.g. will not reflect properties of unsaved actors.",
    "parameters": [
      {
        "name": "InActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActorDescs",
        "type": "TArray_FActorDesc_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWorldPartitionBlueprintLibrary",
    "name": "GetActorDescs",
    "description": "Gets all the actor descriptors into the provided array, recursing into actor containers.",
    "parameters": [
      {
        "name": "OutActorDescs",
        "type": "TArray_FActorDesc_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWorldPartitionDestructibleInHLODSupportLibrary",
    "name": "DestroyInHLOD",
    "description": "",
    "parameters": [
      {
        "name": "DestructibleInHLOD",
        "type": "TScriptInterface_UWorldPartitionDestructibleInHLODInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWorldPartitionDestructibleInHLODSupportLibrary",
    "name": "DamageInHLOD",
    "description": "",
    "parameters": [
      {
        "name": "DestructibleInHLOD",
        "type": "TScriptInterface_UWorldPartitionDestructibleInHLODInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "DamagePercent",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraAnimationCameraModifier",
    "name": "GetCameraAnimationCameraModifierFromPlayerController",
    "description": "A camera modifier that plays camera animation sequences. Stops the given camera animation instance. Stop playing all instances of the given camera animation sequence. Stop all camera animation instances. Play a new camera animation sequence. Returns whether the given camera animation is playing.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FCameraAnimationHandle"
  },
  {
    "class": "UCameraAnimationCameraModifier",
    "name": "GetCameraAnimationCameraModifierFromID",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerID",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCameraAnimationCameraModifier"
  },
  {
    "class": "UCameraAnimationCameraModifier",
    "name": "GetCameraAnimationCameraModifier",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCameraAnimationCameraModifier"
  },
  {
    "class": "UEngineCameraAnimationFunctionLibrary",
    "name": "Conv_CameraShakePlaySpace",
    "description": "Blueprint function library for autocasting a player camera manager into the camera animation camera modifier. This prevents breaking Blueprints now that APlayerCameraManager::StartCameraShake returns the base class.",
    "parameters": [
      {
        "name": "CameraAnimationPlaySpace",
        "type": "ECameraAnimationPlaySpace",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ECameraShakePlaySpace"
  },
  {
    "class": "UEngineCameraAnimationFunctionLibrary",
    "name": "Conv_CameraAnimationPlaySpace",
    "description": "",
    "parameters": [
      {
        "name": "CameraShakePlaySpace",
        "type": "ECameraShakePlaySpace",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ECameraAnimationPlaySpace"
  },
  {
    "class": "UEngineCameraAnimationFunctionLibrary",
    "name": "Conv_CameraAnimationCameraModifier",
    "description": "",
    "parameters": [
      {
        "name": "PlayerCameraManager",
        "type": "APlayerCameraManager",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCameraAnimationCameraModifier"
  },
  {
    "class": "ULegacyCameraShake",
    "name": "StartLegacyCameraShakeFromSource",
    "description": "Legacy camera shake which can do either oscillation or run camera anims. Backwards compatible method used by core BP redirectors. This is needed because the return value is specifically a legacy camera shake, which some BP logic often uses directly to set oscillator/anim properties.",
    "parameters": [
      {
        "name": "PlayerCameraManager",
        "type": "APlayerCameraManager",
        "optional": false,
        "out": false
      },
      {
        "name": "ShakeClass",
        "type": "TSubclassOf_ULegacyCameraShake_",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceComponent",
        "type": "UCameraShakeSourceComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PlaySpace",
        "type": "ECameraShakePlaySpace",
        "optional": true,
        "out": false
      },
      {
        "name": "UserPlaySpaceRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULegacyCameraShake"
  },
  {
    "class": "ULegacyCameraShake",
    "name": "StartLegacyCameraShake",
    "description": "Backwards compatible method used by core BP redirectors. This is needed because the return value is specifically a legacy camera shake, which some BP logic often uses directly to set oscillator/anim properties.",
    "parameters": [
      {
        "name": "PlayerCameraManager",
        "type": "APlayerCameraManager",
        "optional": false,
        "out": false
      },
      {
        "name": "ShakeClass",
        "type": "TSubclassOf_ULegacyCameraShake_",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PlaySpace",
        "type": "ECameraShakePlaySpace",
        "optional": true,
        "out": false
      },
      {
        "name": "UserPlaySpaceRot",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULegacyCameraShake"
  },
  {
    "class": "ULegacyCameraShakeFunctionLibrary",
    "name": "Conv_LegacyCameraShake",
    "description": "Blueprint function library for autocasting from a base camera shake to a legacy camera shake. This prevents breaking Blueprints now that APlayerCameraManager::StartCameraShake returns the base class.",
    "parameters": [
      {
        "name": "CameraShake",
        "type": "UCameraShakeBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULegacyCameraShake"
  },
  {
    "class": "UGameMapsSettings",
    "name": "GetGameMapsSettings",
    "description": "Modify \"Skip Assigning Gamepad to Player 1\" GameMapsSettings option Returns the game local maps settings",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "RequestRebuildControlMappingsUsingContext",
    "description": "Flag all enhanced input subsystems making use of the mapping context for reapplication of all control mappings at the end of this frame.",
    "parameters": [
      {
        "name": "Context",
        "type": "UInputMappingContext",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceImmediately",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "MakeInputActionValueOfType",
    "description": "Builds an ActionValue from X, Y, Z. Inherits type from an existing ActionValue. Ignores axis values unused by the provided value type.",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ValueType",
        "type": "EInputActionValueType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputActionValue"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "MakeInputActionValue",
    "description": "",
    "parameters": [
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchValueType",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputActionValue"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "IsActionKeyMappingPlayerMappable",
    "description": "Returns true if this Action Key Mapping either holds a Player Mappable Key Settings or is set bIsPlayerMappable.",
    "parameters": [
      {
        "name": "ActionKeyMapping",
        "type": "FEnhancedActionKeyMapping",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetThirdPlayerMappableKeySlot",
    "description": "",
    "parameters": [],
    "returnType": "FPlayerMappableKeySlot"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetSecondPlayerMappableKeySlot",
    "description": "",
    "parameters": [],
    "returnType": "FPlayerMappableKeySlot"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetPlayerMappableKeySettings",
    "description": "Returns the Player Mappable Key Settings owned by the Action Key Mapping or by the referenced Input Action, or nothing based of the Setting Behavior.",
    "parameters": [
      {
        "name": "ActionKeyMapping",
        "type": "FEnhancedActionKeyMapping",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPlayerMappableKeySettings"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetMappingName",
    "description": "Returns the name of the mapping based on setting behavior used. If no name is found in the Mappable Key Settings it will return the name set in Player Mappable Options if bIsPlayerMappable is true.",
    "parameters": [
      {
        "name": "ActionKeyMapping",
        "type": "FEnhancedActionKeyMapping",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetFourthPlayerMappableKeySlot",
    "description": "",
    "parameters": [],
    "returnType": "FPlayerMappableKeySlot"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetFirstPlayerMappableKeySlot",
    "description": "",
    "parameters": [],
    "returnType": "FPlayerMappableKeySlot"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "GetBoundActionValue",
    "description": "GetInputActionvalue internal accessor function for actions that have been bound to from a UEnhancedInputComponent",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Action",
        "type": "UInputAction",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputActionValue"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "FlushPlayerInput",
    "description": "Flushes the player controller's pressed keys",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_TriggerEventValueToString",
    "description": "Converts an ETriggerEvent to a string",
    "parameters": [
      {
        "name": "TriggerEvent",
        "type": "ETriggerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_InputActionValueToString",
    "description": "Converts a FInputActionValue to a string",
    "parameters": [
      {
        "name": "ActionValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_InputActionValueToBool",
    "description": "Interpret an InputActionValue as a boolean input",
    "parameters": [
      {
        "name": "InValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_InputActionValueToAxis3D",
    "description": "Interpret an InputActionValue as a 3D axis (Vector) input",
    "parameters": [
      {
        "name": "ActionValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_InputActionValueToAxis2D",
    "description": "Interpret an InputActionValue as a 2D axis (Vector2D) input",
    "parameters": [
      {
        "name": "InValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "Conv_InputActionValueToAxis1D",
    "description": "Interpret an InputActionValue as a 1D axis (double) input",
    "parameters": [
      {
        "name": "InValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UEnhancedInputLibrary",
    "name": "BreakInputActionValue",
    "description": "Breaks an ActionValue into X, Y, Z. Axes not supported by value type will be 0.",
    "parameters": [
      {
        "name": "InActionValue",
        "type": "FInputActionValue",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Y",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Z",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Type",
        "type": "EInputActionValueType",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPlayerMappableKeySettings",
    "name": "GetKnownMappingNames",
    "description": "Hold setting information of an Action Input or a Action Key Mapping for setting screen and save purposes. Get the known mapping names that are current in use. This is a helper function if you want to use a \"GetOptions\" metadata on a UPROPERTY. For example, the following will display a little drop down menu to select from all current mapping names: UPROPERTY(EditAnywhere, BlueprintReadOnly, meta=(GetOptions=\"EnhancedInput.PlayerMappableKeySettings.GetKnownMappingNames\")) FName MappingName;",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UFabBrowserApi",
    "name": "GetApiVersion",
    "description": "",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "AInstancedFoliageActor",
    "name": "RemoveAllInstances",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InFoliageType",
        "type": "UFoliageType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "AInstancedFoliageActor",
    "name": "AddInstances",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InFoliageType",
        "type": "UFoliageType",
        "optional": false,
        "out": false
      },
      {
        "name": "InTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UFoliageStatistics",
    "name": "FoliageOverlappingSphereCount",
    "description": "Counts how many foliage instances overlap a given sphere return number of foliage instances with their mesh set to Mesh that overlap the sphere",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CenterPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UFoliageStatistics",
    "name": "FoliageOverlappingBoxTransforms",
    "description": "Get the transform of every instance overlapping the provided FBox @@param StaticMesh Mesh to get instances of @@param Box Box to use for overlap @@param OutTransforms Array to populate with transforms",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UFoliageStatistics",
    "name": "FoliageOverlappingBoxCount",
    "description": "Gets the number of instances overlapping a provided box",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UProceduralFoliageEditorLibrary",
    "name": "ResimulateProceduralFoliageVolumes",
    "description": "",
    "parameters": [
      {
        "name": "ProceduralFoliageVolumes",
        "type": "TArray_AProceduralFoliageVolume_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UProceduralFoliageEditorLibrary",
    "name": "ResimulateProceduralFoliageComponents",
    "description": "",
    "parameters": [
      {
        "name": "ProceduralFoliageComponents",
        "type": "TArray_UProceduralFoliageComponent_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UProceduralFoliageEditorLibrary",
    "name": "ClearProceduralFoliageVolumes",
    "description": "",
    "parameters": [
      {
        "name": "ProceduralFoliageVolumes",
        "type": "TArray_AProceduralFoliageVolume_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UProceduralFoliageEditorLibrary",
    "name": "ClearProceduralFoliageComponents",
    "description": "",
    "parameters": [
      {
        "name": "ProceduralFoliageComponents",
        "type": "TArray_UProceduralFoliageComponent_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "TakeHighResScreenshot",
    "description": "take high res screenshot in editor.",
    "parameters": [
      {
        "name": "ResX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ResY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Camera",
        "type": "ACameraActor",
        "optional": true,
        "out": false
      },
      {
        "name": "bMaskEnabled",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCaptureHDR",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ComparisonTolerance",
        "type": "EComparisonTolerance",
        "optional": true,
        "out": false
      },
      {
        "name": "ComparisonNotes",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Delay",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bForceGameView",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAutomationEditorTask"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "TakeAutomationScreenshotOfUI",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FAutomationScreenshotOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "TakeAutomationScreenshotAtCamera",
    "description": "Takes a screenshot of the game's viewport, from a particular camera actors POV.  Does not capture any UI.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Camera",
        "type": "ACameraActor",
        "optional": false,
        "out": false
      },
      {
        "name": "NameOverride",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Notes",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FAutomationScreenshotOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "TakeAutomationScreenshot",
    "description": "Takes a screenshot of the game's viewport.  Does not capture any UI.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Notes",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FAutomationScreenshotOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetTestTelemetryStorage",
    "description": "Set Telemetry data storage name of currently running automated test.",
    "parameters": [
      {
        "name": "StorageName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetScalabilityQualityToLow",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetScalabilityQualityToEpic",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetScalabilityQualityLevelRelativeToMax",
    "description": "Sets all other settings based on an overall value",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetEditorViewportVisualizeBuffer",
    "description": "Sets all viewports of the first found level editor to have the VisualizeBuffer ViewMode and also display a given buffer (BaseColor/Metallic/Roughness/etc.) *",
    "parameters": [
      {
        "name": "BufferName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "SetEditorViewportViewMode",
    "description": "Sets all viewports of the first found level editor to have the given ViewMode (Lit/Unlit/etc.) *",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetStatIncMax",
    "description": "",
    "parameters": [
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetStatIncAverage",
    "description": "",
    "parameters": [
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetStatExcMax",
    "description": "",
    "parameters": [
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetStatExcAverage",
    "description": "",
    "parameters": [
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetStatCallCount",
    "description": "",
    "parameters": [
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetDefaultScreenshotOptionsForRendering",
    "description": "",
    "parameters": [
      {
        "name": "Tolerance",
        "type": "EComparisonTolerance",
        "optional": true,
        "out": false
      },
      {
        "name": "Delay",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FAutomationScreenshotOptions"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "GetDefaultScreenshotOptionsForGameplay",
    "description": "",
    "parameters": [
      {
        "name": "Tolerance",
        "type": "EComparisonTolerance",
        "optional": true,
        "out": false
      },
      {
        "name": "Delay",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FAutomationScreenshotOptions"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "EnableStatGroup",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "DisableStatGroup",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "CompareImageAgainstReference",
    "description": "request image comparison.",
    "parameters": [
      {
        "name": "ImageFilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonTolerance",
        "type": "EComparisonTolerance",
        "optional": true,
        "out": false
      },
      {
        "name": "ComparisonNotes",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AutomationWaitForLoading",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FAutomationWaitForLoadingOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AreAutomatedTestsRunning",
    "description": "Lets you know if any automated tests are running, or are about to run and the automation system is spinning up tests.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddTestWarning",
    "description": "Add warning to currently running automated test.",
    "parameters": [
      {
        "name": "InLogItem",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddTestTelemetryData",
    "description": "Add Telemetry data to currently running automated test.",
    "parameters": [
      {
        "name": "DataPoint",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Measurement",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddTestInfo",
    "description": "Add info to currently running automated test.",
    "parameters": [
      {
        "name": "InLogItem",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddTestError",
    "description": "Add error to currently running automated test.",
    "parameters": [
      {
        "name": "InLogItem",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddExpectedPlainLogMessage",
    "description": "Expect a specific log message to match a plain string during an automated test regardless of its verbosity",
    "parameters": [
      {
        "name": "ExpectedString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Occurrences",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ExactMatch",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddExpectedPlainLogError",
    "description": "Mute the report of log error and warning matching a plain string during an automated test",
    "parameters": [
      {
        "name": "ExpectedString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Occurrences",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ExactMatch",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddExpectedLogMessage",
    "description": "Expect a specific log message to match a pattern during an automated test regardless of its verbosity. Treat the pattern as regex by default.",
    "parameters": [
      {
        "name": "ExpectedPatternString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Occurrences",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ExactMatch",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IsRegex",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAutomationBlueprintFunctionLibrary",
    "name": "AddExpectedLogError",
    "description": "Mute the report of log error and warning matching a pattern during an automated test. Treat the pattern as regex by default.",
    "parameters": [
      {
        "name": "ExpectedPatternString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Occurrences",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ExactMatch",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "IsRegex",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UFunctionalTestingManager",
    "name": "RunAllFunctionalTests",
    "description": "Triggers in sequence all functional tests found on the level.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bNewLog",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bRunLooped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "FailedTestsReproString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UFunctionalTestUtilityLibrary",
    "name": "TraceChannelTestUtil",
    "description": "Used to expose C++ functions to tests that we don't want to make BP accessible in the engine itself. Helper function to trace and permute many options at once",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "BatchOptions",
        "type": "FTraceChannelTestBatchOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereCapsuleRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CapsuleHalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxHalfSize",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectTypes",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "ProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTraceQueryTestResults"
  },
  {
    "class": "UGameFeatureData",
    "name": "GetPluginName",
    "description": "Data related to a game feature, a collection of code and content that adds a separable discrete feature to the game",
    "parameters": [
      {
        "name": "GFD",
        "type": "UGameFeatureData",
        "optional": false,
        "out": false
      },
      {
        "name": "PluginName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilityAsync_WaitAttributeChanged",
    "name": "WaitForAttributeChanged",
    "description": "Wait until the specified gameplay attribute is changed on a target ability system component It will keep listening as long as OnlyTriggerOnce = false If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitForAttributeChange instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitAttributeChanged"
  },
  {
    "class": "UAbilityAsync_WaitGameplayEffectApplied",
    "name": "WaitGameplayEffectAppliedToActor",
    "description": "This action listens for specific gameplay effect applications based off specified tags. Effects themselves are not replicated; rather the tags they grant, the attributes they change, and the gameplay cues they emit are replicated. This will only listen for local server or predicted client effects. Wait until a GameplayEffect is applied to a target actor If TriggerOnce is true, this action will only activate one time. Otherwise it will return every time a GE is applied that meets the requirements over the life of the ability If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayEffectApplied instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilter",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ListenForPeriodicEffect",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayEffectApplied"
  },
  {
    "class": "UAbilityAsync_WaitGameplayEvent",
    "name": "WaitGameplayEventToActor",
    "description": "Wait until the specified gameplay tag event is triggered on a target ability system component It will keep listening as long as OnlyTriggerOnce = false If OnlyMatchExact = false it will trigger for nested tags If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayEvent instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EventTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyMatchExact",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayEvent"
  },
  {
    "class": "UAbilityAsync_WaitGameplayTagAdded",
    "name": "WaitGameplayTagAddToActor",
    "description": "Wait until the specified gameplay tag is Added to Target Actor's ability component If the tag is already present when this task is started, it will immediately broadcast the Added event. It will keep listening as long as OnlyTriggerOnce = false. If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayTagAdd instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayTagAdded"
  },
  {
    "class": "UAbilityAsync_WaitGameplayTagCountChanged",
    "name": "WaitGameplayTagCountChangedOnActor",
    "description": "Wait until the specified gameplay tag count changes on Target Actor's ability component If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayTagCountChange instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayTagCountChanged"
  },
  {
    "class": "UAbilityAsync_WaitGameplayTagQuery",
    "name": "WaitGameplayTagQueryOnActor",
    "description": "This class defines an async node to wait on a gameplay tag query. Wait until the given gameplay tag query has become true or false, based on TriggerCondition, looking at the target actors ASC. If the the tag query already satisfies the TriggerCondition when this task is started, it will immediately broadcast the Triggered event. It will keep listening as long as bOnlyTriggerOnce = false. If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayTagQuery instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerCondition",
        "type": "EWaitGameplayTagQueryTriggerCondition",
        "optional": true,
        "out": false
      },
      {
        "name": "bOnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayTagQuery"
  },
  {
    "class": "UAbilityAsync_WaitGameplayTagRemoved",
    "name": "WaitGameplayTagRemoveFromActor",
    "description": "Wait until the specified gameplay tag is Removed from Target Actor's ability component If the tag is not present when this task is started, it will immediately broadcast the Removed event. It will keep listening as long as OnlyTriggerOnce = false. If used in an ability graph, this async action will wait even after activation ends. It's recommended to use WaitGameplayTagRemove instead.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityAsync_WaitGameplayTagRemoved"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "TargetDataHasOrigin",
    "description": "Blueprint library for ability system. Many of these functions are useful to call from native as well Returns true if the target data has an origin",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "TargetDataHasHitResult",
    "description": "Returns true if the target data has a hit result",
    "parameters": [
      {
        "name": "HitResult",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "TargetDataHasEndPoint",
    "description": "Returns true if the target data has an end point",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "TargetDataHasActor",
    "description": "Returns true if the given TargetData has at least 1 actor targeted",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "SetStackCountToMax",
    "description": "Sets the GameplayEffectSpec's StackCount to the max stack count defined in the GameplayEffect definition",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "SetStackCount",
    "description": "Sets the GameplayEffectSpec's StackCount to the specified amount (prior to applying)",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "StackCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "SetDuration",
    "description": "Manually sets the duration on a specific effect",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "SendGameplayEventToActor",
    "description": "This function can be used to trigger an ability on the actor in question with useful payload data.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EventTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Payload",
        "type": "FGameplayEventData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "RemoveLooseGameplayTags",
    "description": "Manually removes a set of tags from a given actor, with optional replication.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldReplicate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "NotEqual_GameplayAttributeGameplayAttribute",
    "description": "Simple inequality operator for gameplay attributes",
    "parameters": [
      {
        "name": "AttributeA",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeB",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "NotEqual_GameplayAbilitySpecHandle",
    "description": "Inequality operator for two Gameplay Ability Spec Handles",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayAbilitySpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayAbilitySpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "NotEqual_ActiveGameplayEffectHandle",
    "description": "Inequality operator for two Active Gameplay Effect Handles",
    "parameters": [
      {
        "name": "A",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "MakeSpecHandleByClass",
    "description": "Create a spec handle, filling out all fields",
    "parameters": [
      {
        "name": "GameplayEffect",
        "type": "TSubclassOf_UGameplayEffect_",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EffectCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Level",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "MakeSpecHandle",
    "description": "",
    "parameters": [
      {
        "name": "InGameplayEffect",
        "type": "UGameplayEffect",
        "optional": false,
        "out": false
      },
      {
        "name": "InInstigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InEffectCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InLevel",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "MakeGameplayCueParameters",
    "description": "Native make, to avoid having to deal with quantized vector types",
    "parameters": [
      {
        "name": "NormalizedMagnitude",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RawMagnitude",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchedTagName",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OriginalTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "AggregatedSourceTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "AggregatedTargetTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EffectCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysicalMaterial",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayEffectLevel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "AbilityLevel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetAttachComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bReplicateLocationWhenUsingMinimalRepProxy",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayCueParameters"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "MakeFilterHandle",
    "description": "Create a handle for filtering target data, filling out all fields",
    "parameters": [
      {
        "name": "Filter",
        "type": "FGameplayTargetDataFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterActor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTargetDataFilterHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "IsValid",
    "description": "Returns true if the attribute actually exists",
    "parameters": [
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "IsInstigatorLocallyControlledPlayer",
    "description": "Returns true if the ability system component that spawned this cue is locally controlled and a player",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "IsInstigatorLocallyControlled",
    "description": "Returns true if the ability system component that spawned this cue is locally controlled",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "IsGameplayAbilityActive",
    "description": "Returns true if the passed-in Gameplay Ability instance is active (activated and not yet ended).",
    "parameters": [
      {
        "name": "GameplayAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "HasHitResult",
    "description": "Checks if the effect context has a hit reslt stored inside",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetTargetDataOrigin",
    "description": "Returns the origin for a given index if it exists",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetTargetDataEndPointTransform",
    "description": "Returns the end point transform for a given index if it exists",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetTargetDataEndPoint",
    "description": "Returns the end point for a given index if it exists",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetOrigin",
    "description": "Gets instigating world location",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetModifiedAttributeMagnitude",
    "description": "Gets the magnitude of change for an attribute on an APPLIED GameplayEffectSpec.",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetInstigatorTransform",
    "description": "Gets instigating world location",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetInstigatorActor",
    "description": "Gets the instigating actor (that holds the ability system component) of the GameplayCue",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetHitResultFromTargetData",
    "description": "Returns the hit result for a given index if it exists",
    "parameters": [
      {
        "name": "HitResult",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FHitResult"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetHitResult",
    "description": "Returns a hit result stored in the effect context if valid",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FHitResult"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayEffectUIData",
    "description": "Returns the UI data for a gameplay effect class (if any)",
    "parameters": [
      {
        "name": "EffectClass",
        "type": "TSubclassOf_UGameplayEffect_",
        "optional": false,
        "out": false
      },
      {
        "name": "DataType",
        "type": "TSubclassOf_UGameplayEffectUIData_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGameplayEffectUIData"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayEffectGrantedTags",
    "description": "Returns all tags that the Gameplay Effect grants to the target Actor",
    "parameters": [
      {
        "name": "EffectClass",
        "type": "TSubclassOf_UGameplayEffect_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayEffectFromActiveEffectHandle",
    "description": "Returns the Gameplay Effect CDO from an active handle. This reference should be considered read only, but you can use it to read additional Gameplay Effect info, such as icon, description, etc.",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGameplayEffect"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayEffectAssetTags",
    "description": "Returns all tags that the Gameplay Effect *has* (that denote the GE Asset itself) and *does not* grant to any Actor.",
    "parameters": [
      {
        "name": "EffectClass",
        "type": "TSubclassOf_UGameplayEffect_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayCueEndLocationAndNormal",
    "description": "Gets the best end location and normal for this gameplay cue. If there is hit result data, it will return this. Otherwise it will return the target actor's location/rotation. If none of this is available, it will return false.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayCueDirection",
    "description": "Gets the best normalized effect direction for this gameplay cue. This is useful for effects that require the direction of an enemy attack. Returns true if a valid direction could be calculated.",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetGameplayAbilityFromSpecHandle",
    "description": "Provides the Gameplay Ability object associated with an Ability Spec Handle This can be either an instanced ability, or in the case of shared abilities, the Class Default Object",
    "parameters": [
      {
        "name": "AbilitySystem",
        "type": "UAbilitySystemComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AbilitySpecHandle",
        "type": "FGameplayAbilitySpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsInstance",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UGameplayAbility"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetFloatAttributeFromAbilitySystemComponent",
    "description": "Returns the value of Attribute from the ability system component AbilitySystem.",
    "parameters": [
      {
        "name": "AbilitySystem",
        "type": "UAbilitySystemComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccessfullyFoundAttribute",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetFloatAttributeBaseFromAbilitySystemComponent",
    "description": "Returns the base value of Attribute from the ability system component AbilitySystemComponent.",
    "parameters": [
      {
        "name": "AbilitySystemComponent",
        "type": "UAbilitySystemComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccessfullyFoundAttribute",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetFloatAttributeBase",
    "description": "Returns the base value of Attribute from the ability system component belonging to Actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccessfullyFoundAttribute",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetFloatAttribute",
    "description": "Returns the value of Attribute from the ability system component belonging to Actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccessfullyFoundAttribute",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetEffectContext",
    "description": "Gets the GameplayEffectSpec's effect context handle",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectContextHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetDebugStringFromGameplayAttribute",
    "description": "Returns FString representation of a gameplay attribute's set class and name, in the form of AttrSetName.AttrName (or just AttrName if not part of a set).",
    "parameters": [
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetDataCountFromTargetData",
    "description": "Returns number of target data objects, not necessarily number of distinct targets",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetAllLinkedGameplayEffectSpecHandles",
    "description": "",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FGameplayEffectSpecHandle_"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetAllActorsFromTargetData",
    "description": "Returns all actors targeted",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActorsFromTargetData",
    "description": "Returns all actors targeted, for a given index",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActorCount",
    "description": "Returns number of actors stored in the Effect Context used by this cue",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActorByIndex",
    "description": "Returns actor stored in the Effect Context used by this cue",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectTotalDuration",
    "description": "Returns the total duration for a given GameplayEffect",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectStartTime",
    "description": "Returns the start time (time which the GE was added) for a given GameplayEffect",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectStackLimitCount",
    "description": "Returns stack limit count of an active Gameplay Effect. Will return 0 if the GameplayEffect is no longer valid.",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectStackCount",
    "description": "Returns current stack count of an active Gameplay Effect. Will return 0 if the GameplayEffect is no longer valid.",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectRemainingDuration",
    "description": "Returns the total duration for a given GameplayEffect, basically ExpectedEndTime - Current Time",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectExpectedEndTime",
    "description": "Returns the expected end time (when we think the GE will expire) for a given GameplayEffect (note someone could remove or change it before that happens!)",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetActiveGameplayEffectDebugString",
    "description": "Returns a debug string for display",
    "parameters": [
      {
        "name": "ActiveHandle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "GetAbilitySystemComponent",
    "description": "Tries to find an ability system component on the actor, will use AbilitySystemInterface or fall back to a component search",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilitySystemComponent"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "ForwardGameplayCueToTarget",
    "description": "Forwards the gameplay cue to another gameplay cue interface object",
    "parameters": [
      {
        "name": "TargetCueInterface",
        "type": "TScriptInterface_UGameplayCueInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "EventType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "FilterTargetData",
    "description": "Create a new target data handle with filtration performed on the data",
    "parameters": [
      {
        "name": "TargetDataHandle",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorFilterClass",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EvaluateAttributeValueWithTagsAndBase",
    "description": "Returns the value of Attribute from the ability system component AbilitySystem after evaluating it with source and target tags using the passed in base value instead of the real base value. bSuccess indicates the success or failure of this operation.",
    "parameters": [
      {
        "name": "AbilitySystem",
        "type": "UAbilitySystemComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EvaluateAttributeValueWithTags",
    "description": "Returns the value of Attribute from the ability system component AbilitySystem after evaluating it with source and target tags. bSuccess indicates the success or failure of this operation.",
    "parameters": [
      {
        "name": "AbilitySystem",
        "type": "UAbilitySystemComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EqualEqual_GameplayAttributeGameplayAttribute",
    "description": "Simple equality operator for gameplay attributes",
    "parameters": [
      {
        "name": "AttributeA",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeB",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EqualEqual_GameplayAbilitySpecHandle",
    "description": "Equality operator for two Gameplay Ability Spec Handles",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayAbilitySpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayAbilitySpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EqualEqual_ActiveGameplayEffectHandle",
    "description": "Equality operator for two Active Gameplay Effect Handles",
    "parameters": [
      {
        "name": "A",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextSetOrigin",
    "description": "Sets the location the effect originated from",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextIsValid",
    "description": "Returns true if this context has ever been initialized",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextIsInstigatorLocallyControlled",
    "description": "Returns true if the ability system component that instigated this is locally controlled",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextHasHitResult",
    "description": "Returns true if there is a valid hit result inside the effect context",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetSourceObject",
    "description": "Gets the source object of the effect.",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetOriginalInstigatorActor",
    "description": "Gets the original instigator actor that started the chain of events to cause this effect",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetOrigin",
    "description": "Gets the location the effect originated from",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetInstigatorActor",
    "description": "Gets the instigating actor (that holds the ability system component) of the EffectContext",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetHitResult",
    "description": "Extracts a hit result from the effect context if it is set",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FHitResult"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextGetEffectCauser",
    "description": "Gets the physical actor that caused the effect, possibly a projectile or weapon",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "EffectContextAddHitResult",
    "description": "Adds a hit result to the effect context",
    "parameters": [
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "HitResult",
        "type": "FHitResult",
        "optional": false,
        "out": false
      },
      {
        "name": "bReset",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "DoesTargetDataContainActor",
    "description": "Returns true if the given TargetData has the actor passed in targeted",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "DoesGameplayCueMeetTagRequirements",
    "description": "Returns true if the aggregated source and target tags from the effect spec meets the tag requirements",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagReqs",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagReqs",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "CloneSpecHandle",
    "description": "Create a spec handle, cloning another",
    "parameters": [
      {
        "name": "InNewInstigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InEffectCauser",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayEffectSpecHandle_Clone",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "BreakGameplayCueParameters",
    "description": "Native break, to avoid having to deal with quantized vector types",
    "parameters": [
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalizedMagnitude",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RawMagnitude",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "EffectContext",
        "type": "FGameplayEffectContextHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "MatchedTagName",
        "type": "FGameplayTag",
        "optional": false,
        "out": true
      },
      {
        "name": "OriginalTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": true
      },
      {
        "name": "AggregatedSourceTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": true
      },
      {
        "name": "AggregatedTargetTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": true
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": true
      },
      {
        "name": "EffectCauser",
        "type": "AActor",
        "optional": false,
        "out": true
      },
      {
        "name": "SourceObject",
        "type": "UObject",
        "optional": false,
        "out": true
      },
      {
        "name": "PhysicalMaterial",
        "type": "UPhysicalMaterial",
        "optional": false,
        "out": true
      },
      {
        "name": "GameplayEffectLevel",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "AbilityLevel",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "TargetAttachComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": true
      },
      {
        "name": "bReplicateLocationWhenUsingMinimalRepProxy",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AssignTagSetByCallerMagnitude",
    "description": "Sets a gameplay tag Set By Caller magnitude value",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "DataTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Magnitude",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AssignSetByCallerMagnitude",
    "description": "Sets a raw name Set By Caller magnitude value, the tag version should normally be used",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "DataName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Magnitude",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AppendTargetDataHandle",
    "description": "Copies targets from HandleToAdd to TargetHandle",
    "parameters": [
      {
        "name": "TargetHandle",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "HandleToAdd",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddLooseGameplayTags",
    "description": "Manually adds a set of tags to a given actor, and optionally replicates them.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldReplicate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddLinkedGameplayEffectSpec",
    "description": "",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "LinkedGameplayEffectSpec",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddLinkedGameplayEffect",
    "description": "",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "LinkedGameplayEffect",
        "type": "TSubclassOf_UGameplayEffect_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddGrantedTags",
    "description": "This instance of the effect will now grant NewGameplayTags to the object that this effect is applied to",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "NewGameplayTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddGrantedTag",
    "description": "This instance of the effect will now grant NewGameplayTag to the object that this effect is applied to",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "NewGameplayTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddAssetTags",
    "description": "Adds NewGameplayTags to this instance of the effect",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "NewGameplayTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AddAssetTag",
    "description": "Adds NewGameplayTag to this instance of the effect",
    "parameters": [
      {
        "name": "SpecHandle",
        "type": "FGameplayEffectSpecHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "NewGameplayTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayEffectSpecHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AbilityTargetDataFromLocations",
    "description": "Creates a target data with a source and destination location",
    "parameters": [
      {
        "name": "SourceLocation",
        "type": "FGameplayAbilityTargetingLocationInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocation",
        "type": "FGameplayAbilityTargetingLocationInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AbilityTargetDataFromHitResult",
    "description": "Creates a target data with a single hit result",
    "parameters": [
      {
        "name": "HitResult",
        "type": "FHitResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AbilityTargetDataFromActorArray",
    "description": "Creates actor array target data",
    "parameters": [
      {
        "name": "ActorArray",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OneTargetPerHandle",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilitySystemBlueprintLibrary",
    "name": "AbilityTargetDataFromActor",
    "description": "Creates single actor target data",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayAbilityTargetDataHandle"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionConstantForce",
    "name": "ApplyRootMotionConstantForce",
    "description": "Applies force to character's movement Apply force to character's movement",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Strength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsAdditive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "StrengthOverTime",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnableGravity",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionConstantForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionJumpForce",
    "name": "ApplyRootMotionJumpForce",
    "description": "Applies force to character's movement Apply force to character's movement",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinimumLandedTriggerTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bFinishOnLanded",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PathOffsetCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeMappingCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionJumpForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionMoveToActorForce",
    "name": "ApplyRootMotionMoveToTargetDataActorForce",
    "description": "Applies force to character's movement Apply force to character's movement using an index into targetData instead of using an actor directly.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetDataHandle",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetDataIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActorIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocationOffset",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetAlignment",
        "type": "ERootMotionMoveToActorTargetOffsetType",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedHorizontal",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedVertical",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "bSetNewMovementMode",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "MovementMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRestrictSpeedToExpected",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "PathOffsetCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeMappingCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bDisableDestinationReachedInterrupt",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ReachedDestinationDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionMoveToActorForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionMoveToActorForce",
    "name": "ApplyRootMotionMoveToComponentForce",
    "description": "Apply force to character's movement to move to a target component with relative location",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponentRelativeLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocationOffset",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetAlignment",
        "type": "ERootMotionMoveToActorTargetOffsetType",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedHorizontal",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedVertical",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "bSetNewMovementMode",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "MovementMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRestrictSpeedToExpected",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "PathOffsetCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeMappingCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bDisableDestinationReachedInterrupt",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ReachedDestinationDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionMoveToActorForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionMoveToActorForce",
    "name": "ApplyRootMotionMoveToActorForce",
    "description": "Apply force to character's movement to move to a target actor",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocationOffset",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetAlignment",
        "type": "ERootMotionMoveToActorTargetOffsetType",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedHorizontal",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLerpSpeedVertical",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "bSetNewMovementMode",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "MovementMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRestrictSpeedToExpected",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "PathOffsetCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeMappingCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bDisableDestinationReachedInterrupt",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ReachedDestinationDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionMoveToActorForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionMoveToForce",
    "name": "ApplyRootMotionMoveToForce",
    "description": "Applies force to character's movement Apply force to character's movement",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bSetNewMovementMode",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "MovementMode",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRestrictSpeedToExpected",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "PathOffsetCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionMoveToForce"
  },
  {
    "class": "UAbilityTask_ApplyRootMotionRadialForce",
    "name": "ApplyRootMotionRadialForce",
    "description": "Applies force to character's movement Apply force to character's movement",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Strength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsPush",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsAdditive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bNoZForce",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "StrengthDistanceFalloff",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "StrengthOverTime",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseFixedWorldDirection",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "FixedWorldDirection",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "VelocityOnFinishMode",
        "type": "ERootMotionFinishVelocityMode",
        "optional": false,
        "out": false
      },
      {
        "name": "SetVelocityOnFinish",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ClampVelocityOnFinish",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_ApplyRootMotionRadialForce"
  },
  {
    "class": "UAbilityTask_MoveToLocation",
    "name": "MoveToLocation",
    "description": "Move to a location, ignoring clipping, over a given length of time. Ends when the TargetLocation is reached. This will RESET your character's current movement mode! If you wish to maintain PHYS_Flying or PHYS_Custom, you must reset it on completion.! Move to the specified location, using the vector curve (range 0 - 1) if specified, otherwise the float curve (range 0 - 1) or fallback to linear interpolation",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalInterpolationCurve",
        "type": "UCurveFloat",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalVectorInterpolationCurve",
        "type": "UCurveVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_MoveToLocation"
  },
  {
    "class": "UAbilityTask_NetworkSyncPoint",
    "name": "WaitNetSync",
    "description": "Task for providing a generic sync point for client server (one can wait for a signal from the other) Synchronize execution flow between Client and Server. Depending on SyncType, the Client and Server will wait for the other to reach this node or another WaitNetSync node in the ability before continuing execution. BothWait - Both Client and Server will wait until the other reaches the node. (Whoever gets their first, waits for the other before continueing). OnlyServerWait - Only server will wait for the client signal. Client will signal and immediately continue without waiting to hear from Server. OnlyClientWait - Only client will wait for the server signal. Server will signal and immediately continue without waiting to hear from Client. Note that this is \"ability instance wide\". These sync points never affect sync points in other abilities. In most cases you will have both client and server execution paths connected to the same WaitNetSync node. However it is possible to use separate nodes for cleanliness of the graph. The \"signal\" is \"ability instance wide\".",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "SyncType",
        "type": "EAbilityTaskNetSyncType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_NetworkSyncPoint"
  },
  {
    "class": "UAbilityTask_PlayAnimAndWait",
    "name": "CreatePlayAnimAndWaitProxy",
    "description": "Start playing an animation montage on the avatar actor and wait for it to finish If StopWhenAbilityEnds is true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled. On normal execution, OnBlendOut is called when the montage is blending out, and OnCompleted when it is completely done playing OnInterrupted is called if another montage overwrites this, and OnCancelled is called if the ability or task is cancelled",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendInTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BlendOutTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InPlayRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTimeSeconds",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopWhenAbilityEnds",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AnimRootMotionTranslationScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_PlayAnimAndWait"
  },
  {
    "class": "UAbilityTask_PlayMontageAndWait",
    "name": "CreatePlayMontageAndWaitProxy",
    "description": "Ability task to simply play a montage. Many games will want to make a modified version of this task that looks for game-specific events Callback function for when the owning Gameplay Ability is cancelled Start playing an animation montage on the avatar actor and wait for it to finish If StopWhenAbilityEnds is true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled. On normal execution, OnBlendOut is called when the montage is blending out, and OnCompleted when it is completely done playing OnInterrupted is called if another montage overwrites this, and OnCancelled is called if the ability or task is cancelled",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MontageToPlay",
        "type": "UAnimMontage",
        "optional": false,
        "out": false
      },
      {
        "name": "Rate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartSection",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "bStopWhenAbilityEnds",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AnimRootMotionTranslationScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StartTimeSeconds",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bAllowInterruptAfterBlendOut",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_PlayMontageAndWait"
  },
  {
    "class": "UAbilityTask_Repeat",
    "name": "RepeatAction",
    "description": "Repeat a task a certain number of times at a given interval. Start a task that repeats an action or set of actions.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeBetweenActions",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TotalActionCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_Repeat"
  },
  {
    "class": "UAbilityTask_SpawnActor",
    "name": "SpawnActor",
    "description": "Convenience task for spawning actors on the network authority. If not the net authority, we will not spawn and Success will not be called. The nice thing this adds is the ability to modify expose on spawn properties while also implicitly checking network role before spawning. Though this task doesn't do much - games can implement similiar tasks that carry out game specific rules. For example a 'SpawnProjectile' task that limits the available classes to the games projectile class, and that does game specific stuff on spawn (for example, determining firing position from a weapon attachment - logic that we don't necessarily want in ability blueprints). Long term we can also use this task as a sync point. If the executing client could wait execution until the server creates and replicates the actor down to it. We could potentially also use this to do predictive actor spawning / reconciliation. Spawn new Actor on the network authority (server)",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_SpawnActor"
  },
  {
    "class": "UAbilityTask_StartAbilityState",
    "name": "StartAbilityState",
    "description": "An ability state is simply an ability task that provides a way to handle the ability being interrupted. You can use ability states to do state-specific cleanup if the ability ends or was interrupted at a certain point during it's execution. An ability state will always result in either 'OnStateEnded' or 'OnStateInterrupted' being called. 'OnStateEnded' will be called if: The ability itself ends via AGameplayAbility::EndAbility The ability state is manually ended via AGameplayAbility::EndAbilityState Another ability state is started will 'bEndCurrentState' set to true 'OnStateInterrupted' will be called if: The ability itself is cancelled via AGameplayAbility::CancelAbility Starts a new ability state.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "StateName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bEndCurrentState",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_StartAbilityState"
  },
  {
    "class": "UAbilityTask_VisualizeTargeting",
    "name": "VisualizeTargetingUsingActor",
    "description": "Visualize target using a specified target actor.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActor",
        "type": "AGameplayAbilityTargetActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_VisualizeTargeting"
  },
  {
    "class": "UAbilityTask_VisualizeTargeting",
    "name": "VisualizeTargeting",
    "description": "Spawns target actor and uses it for visualization.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_AGameplayAbilityTargetActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_VisualizeTargeting"
  },
  {
    "class": "UAbilityTask_WaitAbilityActivate",
    "name": "WaitForAbilityActivateWithTagRequirements",
    "description": "Waits for the actor to activate another ability Wait until a new ability (of the same or different type) is activated. Only input based abilities will be counted unless IncludeTriggeredAbilities is true. Uses a tag requirements structure to filter abilities.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "IncludeTriggeredAbilities",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAbilityActivate"
  },
  {
    "class": "UAbilityTask_WaitAbilityActivate",
    "name": "WaitForAbilityActivate_Query",
    "description": "Wait until a new ability (of the same or different type) is activated. Only input based abilities will be counted unless IncludeTriggeredAbilities is true.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Query",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "IncludeTriggeredAbilities",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAbilityActivate"
  },
  {
    "class": "UAbilityTask_WaitAbilityActivate",
    "name": "WaitForAbilityActivate",
    "description": "Wait until a new ability (of the same or different type) is activated. Only input based abilities will be counted unless IncludeTriggeredAbilities is true.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "WithTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "WithoutTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "IncludeTriggeredAbilities",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAbilityActivate"
  },
  {
    "class": "UAbilityTask_WaitAbilityCommit",
    "name": "WaitForAbilityCommit_Query",
    "description": "Waits for the actor to activate another ability",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Query",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAbilityCommit"
  },
  {
    "class": "UAbilityTask_WaitAbilityCommit",
    "name": "WaitForAbilityCommit",
    "description": "Wait until a new ability (of the same or different type) is commited.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "WithTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "WithoutTage",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAbilityCommit"
  },
  {
    "class": "UAbilityTask_WaitAttributeChange",
    "name": "WaitForAttributeChangeWithComparison",
    "description": "Waits for the actor to activate another ability Wait until an attribute changes to pass a given test.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "InAttribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "InWithTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "InWithoutTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "InComparisonType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InComparisonValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAttributeChange"
  },
  {
    "class": "UAbilityTask_WaitAttributeChange",
    "name": "WaitForAttributeChange",
    "description": "Wait until an attribute changes.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "WithSrcTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "WithoutSrcTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAttributeChange"
  },
  {
    "class": "UAbilityTask_WaitAttributeChangeRatioThreshold",
    "name": "WaitForAttributeChangeRatioThreshold",
    "description": "Waits for the ratio between two attributes to match a threshold Wait on attribute ratio change meeting a comparison threshold.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeNumerator",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeDenominator",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriggerOnce",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAttributeChangeRatioThreshold"
  },
  {
    "class": "UAbilityTask_WaitAttributeChangeThreshold",
    "name": "WaitForAttributeChangeThreshold",
    "description": "Waits for an attribute to match a threshold Wait on attribute change meeting a comparison threshold.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Attribute",
        "type": "FGameplayAttribute",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ComparisonValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriggerOnce",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitAttributeChangeThreshold"
  },
  {
    "class": "UAbilityTask_WaitCancel",
    "name": "WaitCancel",
    "description": "",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitCancel"
  },
  {
    "class": "UAbilityTask_WaitConfirm",
    "name": "WaitConfirm",
    "description": "Wait until the server confirms the use of this ability. This is used to gate predictive portions of the ability",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitConfirm"
  },
  {
    "class": "UAbilityTask_WaitConfirmCancel",
    "name": "WaitConfirmCancel",
    "description": "Fixme: this name is conflicting with AbilityTask_WaitConfirm UAbilityTask_WaitConfirmCancel = Wait for Targeting confirm/cancel UAbilityTask_WaitConfirm = Wait for server to confirm ability activation",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitConfirmCancel"
  },
  {
    "class": "UAbilityTask_WaitDelay",
    "name": "WaitDelay",
    "description": "Wait specified time. This is functionally the same as a standard Delay node.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitDelay"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectApplied_Self",
    "name": "WaitGameplayEffectAppliedToSelf_Query",
    "description": "Wait until the owner *receives* a GameplayEffect from a given source (the source may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability Optional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty. This version uses FGameplayTagQuery (more power) instead of FGameplayTagRequirements (faster)",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilter",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "ListenForPeriodicEffect",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectApplied_Self"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectApplied_Self",
    "name": "WaitGameplayEffectAppliedToSelf",
    "description": "Wait until the owner *receives* a GameplayEffect from a given source (the source may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability Optional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilter",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "ListenForPeriodicEffect",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectApplied_Self"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectApplied_Target",
    "name": "WaitGameplayEffectAppliedToTarget_Query",
    "description": "Wait until the owner (or External Owner) applies a GameplayEffect to a Target (the target may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability Optional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilter",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "ListenForPeriodicEffect",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectApplied_Target"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectApplied_Target",
    "name": "WaitGameplayEffectAppliedToTarget",
    "description": "Wait until the owner (or External Owner) applies a GameplayEffect to a Target (the target may be the owner too!). If TriggerOnce is true, this task will only return one time. Otherwise it will return everytime a GE is applied that meets the requirements over the life of the ability Optional External Owner can be used to run this task on someone else (not the owner of the ability). By default you can leave this empty.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetFilter",
        "type": "FGameplayTargetDataFilterHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalExternalOwner",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "ListenForPeriodicEffects",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectApplied_Target"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectBlockedImmunity",
    "name": "WaitGameplayEffectBlockedByImmunity",
    "description": "Listens for GE immunity. By default this means \"this hero blocked a GE due to immunity\". Setting OptionalExternalTarget will listen for a GE being blocked on an external target. Note this only works on the server.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTagRequirements",
        "type": "FGameplayTagRequirements",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectBlockedImmunity"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectRemoved",
    "name": "WaitForGameplayEffectRemoved",
    "description": "Waits for the actor to activate another ability Wait until the specified gameplay effect is removed.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectRemoved"
  },
  {
    "class": "UAbilityTask_WaitGameplayEffectStackChange",
    "name": "WaitForGameplayEffectStackChange",
    "description": "Waits for the actor to activate another ability Wait until the specified gameplay effect is removed.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Handle",
        "type": "FActiveGameplayEffectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEffectStackChange"
  },
  {
    "class": "UAbilityTask_WaitGameplayEvent",
    "name": "WaitGameplayEvent",
    "description": "Wait until the specified gameplay tag event is triggered. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes It will keep listening as long as OnlyTriggerOnce = false If OnlyMatchExact = false it will trigger for nested tags",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "EventTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyMatchExact",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayEvent"
  },
  {
    "class": "UAbilityTask_WaitGameplayTagAdded",
    "name": "WaitGameplayTagAdd",
    "description": "Wait until the specified gameplay tag is Added. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes. If the tag is already present when this task is started, it will immediately broadcast the Added event. It will keep listening as long as OnlyTriggerOnce = false.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "InOptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayTagAdded"
  },
  {
    "class": "UAbilityTask_WaitGameplayTagCountChanged",
    "name": "WaitGameplayTagCountChange",
    "description": "Wait until the specified gameplay tag count has changed. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "InOptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayTagCountChanged"
  },
  {
    "class": "UAbilityTask_WaitGameplayTagQuery",
    "name": "WaitGameplayTagQuery",
    "description": "This class defines a node to wait on a gameplay tag query. Wait until the given gameplay tag query has become true or false, based on TriggerCondition. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes.  If the the tag query already satisfies the TriggerCondition when this task is started, it will immediately broadcast the Triggered event. It will keep listening as long as bOnlyTriggerOnce = false.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "InOptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "TriggerCondition",
        "type": "EWaitGameplayTagQueryTriggerCondition",
        "optional": true,
        "out": false
      },
      {
        "name": "bOnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayTagQuery"
  },
  {
    "class": "UAbilityTask_WaitGameplayTagRemoved",
    "name": "WaitGameplayTagRemove",
    "description": "Wait until the specified gameplay tag is Removed. By default this will look at the owner of this ability. OptionalExternalTarget can be set to make this look at another actor's tags for changes. If the tag is not present when this task is started, it will immediately broadcast the Removed event. It will keep listening as long as OnlyTriggerOnce = false.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "InOptionalExternalTarget",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitGameplayTagRemoved"
  },
  {
    "class": "UAbilityTask_WaitInputPress",
    "name": "WaitInputPress",
    "description": "Waits until the input is pressed from activating an ability. This should be true immediately upon starting the ability, since the key was pressed to activate it. We expect server to execute this task in parallel and keep its own time. We do not keep track of Wait until the user presses the input button for this ability's activation. Returns time this node spent waiting for the press. Will return 0 if input was already down.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "bTestAlreadyPressed",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitInputPress"
  },
  {
    "class": "UAbilityTask_WaitInputRelease",
    "name": "WaitInputRelease",
    "description": "Waits until the input is released from activating an ability. Clients will replicate a 'release input' event to the server, but not the exact time it was held locally. We expect server to execute this task in parallel and keep its own time. Wait until the user releases the input button for this ability's activation. Returns time from hitting this node, till release. Will return 0 if input was already released.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "bTestAlreadyReleased",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitInputRelease"
  },
  {
    "class": "UAbilityTask_WaitMovementModeChange",
    "name": "CreateWaitMovementModeChange",
    "description": "Wait until movement mode changes (E.g., landing)",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "NewMode",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitMovementModeChange"
  },
  {
    "class": "UAbilityTask_WaitOverlap",
    "name": "WaitForOverlap",
    "description": "Fixme: this is still incomplete and probablyh not what most games want for melee systems. -Only actually activates on Blocking hits -Uses first PrimitiveComponent instead of being able to specify arbitrary component. Wait until an overlap occurs. This will need to be better fleshed out so we can specify game specific collision requirements",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitOverlap"
  },
  {
    "class": "UAbilityTask_WaitTargetData",
    "name": "WaitTargetDataUsingActor",
    "description": "Wait for targeting actor (spawned from parameter) to provide data. Can be set not to end upon outputting data. Can be ended by task name. WARNING: These actors are spawned once per ability activation and in their default form are not very efficient For most games you will need to subclass and heavily modify this actor, or you will want to implement similar functions in a game-specific actor or blueprint to avoid actor spawn costs This task is not well tested by internal games, but it is a useful class to look at to learn how target replication occurs Uses specified target actor and waits for it to return valid data or to be canceled.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ConfirmationType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetActor",
        "type": "AGameplayAbilityTargetActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitTargetData"
  },
  {
    "class": "UAbilityTask_WaitTargetData",
    "name": "WaitTargetData",
    "description": "Spawns target actor and waits for it to return valid data or to be canceled.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ConfirmationType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_AGameplayAbilityTargetActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitTargetData"
  },
  {
    "class": "UAbilityTask_WaitVelocityChange",
    "name": "CreateWaitVelocityChange",
    "description": "Wait for the actor's movement component velocity to be of minimum magnitude when projected along given direction",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MinimumMagnitude",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitVelocityChange"
  },
  {
    "class": "UGameplayCueFunctionLibrary",
    "name": "RemoveGameplayCueOnActor",
    "description": "UGameplayCueFunctionLibrary Helpful utility function for working with gameplay cues. Invoke the removed event for a gameplay cue on the target actor. This should be paired with an AddGameplayCueOnActor call. * If the actor has an ability system, the event will fire on authority only and will be replicated. * If the actor does not have an ability system, the event will only be fired locally.",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayCueTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayCueFunctionLibrary",
    "name": "MakeGameplayCueParametersFromHitResult",
    "description": "Builds gameplay cue parameters using data from a hit result.",
    "parameters": [
      {
        "name": "HitResult",
        "type": "FHitResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayCueParameters"
  },
  {
    "class": "UGameplayCueFunctionLibrary",
    "name": "ExecuteGameplayCueOnActor",
    "description": "Invoke a one time \"instant\" execute event for a gameplay cue on the target actor. * If the actor has an ability system, the event will fire on authority only and will be replicated. * If the actor does not have an ability system, the event will only be fired locally.",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayCueTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayCueFunctionLibrary",
    "name": "AddGameplayCueOnActor",
    "description": "Invoke the added event for a gameplay cue on the target actor. This should be paired with a RemoveGameplayCueOnActor call. * If the actor has an ability system, the event will fire on authority only and will be replicated. * If the actor does not have an ability system, the event will only be fired locally.",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayCueTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneGameplayCueTrack",
    "name": "SetSequencerTrackHandler",
    "description": "Implements a movie scene track that triggers gameplay cues Override the default function for invoking Gameplay Cues from sequencer tracks",
    "parameters": [
      {
        "name": "InGameplayCueTrackHandler",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAITask_UseGameplayBehaviorSmartObject",
    "name": "UseSmartObjectWithGameplayBehavior",
    "description": "Helper function to create an AITask that interacts with the SmartObject slot using the GameplayBehavior definition This version starts the interaction on spot so the actor needs to be at the desired position.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ClaimPriority",
        "type": "ESmartObjectClaimPriority",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_UseGameplayBehaviorSmartObject"
  },
  {
    "class": "UAITask_UseGameplayBehaviorSmartObject",
    "name": "UseGameplayBehaviorSmartObject",
    "description": "",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "SmartObjectActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SmartObjectComponent",
        "type": "USmartObjectComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_UseGameplayBehaviorSmartObject"
  },
  {
    "class": "UAITask_UseGameplayBehaviorSmartObject",
    "name": "MoveToAndUseSmartObjectWithGameplayBehavior",
    "description": "Helper function to create an AITask that reaches and interacts with the SmartObject slot using the GameplayBehavior definition.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ClaimPriority",
        "type": "ESmartObjectClaimPriority",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_UseGameplayBehaviorSmartObject"
  },
  {
    "class": "UGameplayBehaviorSmartObjectsBlueprintFunctionLibrary",
    "name": "UseGameplayBehaviorSmartObject",
    "description": "",
    "parameters": [
      {
        "name": "Avatar",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SmartObject",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGameplayBehaviorsBlueprintFunctionLibrary",
    "name": "SetValueAsGameplayTagForBlackboardComp",
    "description": "",
    "parameters": [
      {
        "name": "BlackboardComp",
        "type": "UBlackboardComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayTagValue",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayBehaviorsBlueprintFunctionLibrary",
    "name": "SetBlackboardValueAsGameplayTag",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayBehaviorsBlueprintFunctionLibrary",
    "name": "GetBlackboardValueAsGameplayTagFromBlackboardComp",
    "description": "",
    "parameters": [
      {
        "name": "BlackboardComp",
        "type": "UBlackboardComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UGameplayBehaviorsBlueprintFunctionLibrary",
    "name": "GetBlackboardValueAsGameplayTag",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UGameplayBehaviorsBlueprintFunctionLibrary",
    "name": "AddGameplayTagFilterToBlackboardKeySelector",
    "description": "",
    "parameters": [
      {
        "name": "InSelector",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": true
      },
      {
        "name": "Owner",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UValueOrBBKey_GameplayTagBlueprintUtility",
    "name": "GetTagContainer",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "FValueOrBBKey_GameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "BehaviorTreeComp",
        "type": "UBehaviorTreeComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "AGameplayCameraSystemActor",
    "name": "GetAutoSpawnedCameraSystemActor",
    "description": "An actor that hosts a camera system. Gets the camera system component. Get the automatically spawned camera system actor, if it exists. Returns null if bAutoSpawnCameraSystemActor is disabled in the GameplayCameras settings, or if no actor has been spawned yet.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceSpawn",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGameplayCameraSystemComponent"
  },
  {
    "class": "AGameplayCameraSystemActor",
    "name": "AutoManageActiveViewTarget",
    "description": "Automatically sets a camera system actor as the view-target, spawning a unique instance if needed. Doesn't do anything if bAutoSpawnCameraSystemActor is disabled in the GameplayCameras settings.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UActivateCameraRigFunctions",
    "name": "ActivatePersistentVisualCameraRig",
    "description": "Blueprint functions for activating camera rigs in the base/global/visual layers. These camera rigs run with a global, shared evaluation context that doesn't provide any meaningful initial result. They are activated on the camera system found to be running on the given player controller. Activates the given camera rig prefab in the visual layer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UActivateCameraRigFunctions",
    "name": "ActivatePersistentGlobalCameraRig",
    "description": "Activates the given camera rig prefab in the global layer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UActivateCameraRigFunctions",
    "name": "ActivatePersistentBaseCameraRig",
    "description": "Activates the given camera rig prefab in the base layer.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetTransform",
    "description": "Utility Blueprint functions for camera poses. Creates a copy of the given camera pose with the given location and rotation.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetTargetDistance",
    "description": "Creates a copy of the given camera pose with the given target distance.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetRotation",
    "description": "Creates a copy of the given camera pose with the given rotation.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetLocation",
    "description": "Creates a copy of the given camera pose with the given location.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetFocalLength",
    "description": "Creates a copy of the given camera pose with the given focal length.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "FocalLength",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "SetFieldOfView",
    "description": "Creates a copy of the given camera pose with the given field of view.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldOfView",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "MakeCameraPoseFromCineCameraComponent",
    "description": "Creates a new camera pose given a cine-camera component.",
    "parameters": [
      {
        "name": "CameraComponent",
        "type": "UCineCameraComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "MakeCameraPoseFromCameraComponent",
    "description": "Creates a new camera pose given a camera component.",
    "parameters": [
      {
        "name": "CameraComponent",
        "type": "UCameraComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBlueprintCameraPose"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetTransform",
    "description": "Gets the transform matrix of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetTargetDistance",
    "description": "Gets the target distance of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetTargetAtDistance",
    "description": "Gets the target of the camera pose given a specific target distance.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetDistance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetTarget",
    "description": "Gets the target of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetSensorAspectRatio",
    "description": "Gets the effective aspect ratio of the camera pose, computed from the sensor size.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetRotation",
    "description": "Gets the rotation of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetLocation",
    "description": "Gets the location of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetFocalLength",
    "description": "Gets the focal length of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetFieldOfView",
    "description": "Gets the field of view of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetEffectiveFieldOfView",
    "description": "Gets the effective field of view of the camera pose, possibly computed from focal length.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetAimRay",
    "description": "Gets the aim ray of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRay"
  },
  {
    "class": "UBlueprintCameraPoseFunctionLibrary",
    "name": "GetAimDir",
    "description": "Gets the facing direction of the camera pose.",
    "parameters": [
      {
        "name": "CameraPose",
        "type": "FBlueprintCameraPose",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetVector4CameraVariable",
    "description": "Utility Blueprint functions for camera variable tables. Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector4dCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetVector3CameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector3dCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetVector2CameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector2dCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetTransformCameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UTransform3dCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetRotatorCameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "URotator3dCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetInteger32CameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UInteger32CameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetFloatCameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UFloatCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetDoubleCameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UDoubleCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "SetBooleanCameraVariable",
    "description": "Sets a camera variable's value in the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UBooleanCameraVariable",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetVector4CameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector4dCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetVector3CameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector3dCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetVector2CameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UVector2dCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetTransformCameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UTransform3dCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetRotatorCameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "URotator3dCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetInteger32CameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UInteger32CameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetFloatCameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UFloatCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetDoubleCameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UDoubleCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UBlueprintCameraVariableTableFunctionLibrary",
    "name": "GetBooleanCameraVariable",
    "description": "Gets a camera variable's value from the given table.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Variable",
        "type": "UBooleanCameraVariable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetVector4Parameter",
    "description": "Blueprint internal methods to set values on a camera rig's exposed parameters. These functions are internal because users are supposed to use the K2Node_SetCameraRigParameters node instead. That node then gets compiled into one or more of these internal functions.",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetVector3Parameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetVector2Parameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetTransformParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetRotatorParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetIntegerParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetFloatParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetDoubleParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UCameraRigParameterInterop",
    "name": "SetBooleanParameter",
    "description": "",
    "parameters": [
      {
        "name": "VariableTable",
        "type": "FBlueprintCameraVariableTable",
        "optional": false,
        "out": true
      },
      {
        "name": "CameraRig",
        "type": "UCameraRigAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bParameterValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAITask_UseGameplayInteraction",
    "name": "UseSmartObjectWithGameplayInteraction",
    "description": "Helper function to create an AITask that interacts with the SmartObject slot using the GameplayInteraction definition. This version will start the interaction on spot so the actor needs to be at the desired position.",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_UseGameplayInteraction"
  },
  {
    "class": "UAITask_UseGameplayInteraction",
    "name": "MoveToAndUseSmartObjectWithGameplayInteraction",
    "description": "Helper function to create an AITask that reaches and interacts with the SmartObject slot using the GameplayInteraction definition",
    "parameters": [
      {
        "name": "Controller",
        "type": "AAIController",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "bLockAILogic",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAITask_UseGameplayInteraction"
  },
  {
    "class": "UAsyncAction_ListenForGameplayMessage",
    "name": "ListenForGameplayMessages",
    "description": "Asynchronously waits for a gameplay message to be broadcast on the specified channel.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadType",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchType",
        "type": "EGameplayMessageMatch",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ListenForGameplayMessage"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "RemoveGameplayTag",
    "description": "Remove a single tag from the passed in tag container, returns true if found",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": true
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "NotEqual_TagTag",
    "description": "Checks if a gameplay tag's name and a string are not equal to one another",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "NotEqual_TagContainerTagContainer",
    "description": "Checks if a gameplay tag containers's name and a string are not equal to one another",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "NotEqual_GameplayTagContainer",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "NotEqual_GameplayTag",
    "description": "Returns true if the values are not equal (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MatchesTag",
    "description": "Determine if TagOne matches against TagTwo",
    "parameters": [
      {
        "name": "TagOne",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "TagTwo",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "bExactMatch",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MatchesAnyTags",
    "description": "Determine if TagOne matches against any tag in OtherContainer",
    "parameters": [
      {
        "name": "TagOne",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExactMatch",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeLiteralGameplayTagContainer",
    "description": "Creates a literal FGameplayTagContainer",
    "parameters": [
      {
        "name": "Value",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeLiteralGameplayTag",
    "description": "Creates a literal FGameplayTag",
    "parameters": [
      {
        "name": "Value",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTag"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagQuery_MatchNoTags",
    "description": "Creates a literal FGameplayTagQuery with a prepopulated NoTagsMatch expression",
    "parameters": [
      {
        "name": "InTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagQuery"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagQuery_MatchAnyTags",
    "description": "Creates a literal FGameplayTagQuery with a prepopulated AnyTagsMatch expression",
    "parameters": [
      {
        "name": "InTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagQuery"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagQuery_MatchAllTags",
    "description": "Creates a literal FGameplayTagQuery with a prepopulated AllTagsMatch expression",
    "parameters": [
      {
        "name": "InTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagQuery"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagQuery",
    "description": "Creates a literal FGameplayTagQuery",
    "parameters": [
      {
        "name": "TagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagQuery"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagContainerFromTag",
    "description": "Creates a FGameplayTagContainer containing a single tag",
    "parameters": [
      {
        "name": "SingleTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "MakeGameplayTagContainerFromArray",
    "description": "Creates a FGameplayTagContainer from the array of passed in tags",
    "parameters": [
      {
        "name": "GameplayTags",
        "type": "TArray_FGameplayTag_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "IsTagQueryEmpty",
    "description": "Check if the specified tag query is empty",
    "parameters": [
      {
        "name": "TagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "IsGameplayTagValid",
    "description": "Returns true if the passed in gameplay tag is non-null",
    "parameters": [
      {
        "name": "GameplayTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "HasTag",
    "description": "Check if the tag container has the specified tag",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "bExactMatch",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "HasAnyTags",
    "description": "Check if the specified tag container has ANY of the tags in the other container",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExactMatch",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "HasAllTags",
    "description": "Check if the specified tag container has ALL of the tags in the other container",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExactMatch",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "HasAllMatchingGameplayTags",
    "description": "Check Gameplay tags in the interface has all of the specified tags in the tag container (expands to include parents of asset tags)",
    "parameters": [
      {
        "name": "TagContainerInterface",
        "type": "TScriptInterface_UGameplayTagAssetInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetTagName",
    "description": "Returns FName of this tag",
    "parameters": [
      {
        "name": "GameplayTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetOwnedGameplayTags",
    "description": "",
    "parameters": [
      {
        "name": "TagContainerInterface",
        "type": "TScriptInterface_UGameplayTagAssetInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayTagContainer"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetNumGameplayTagsInContainer",
    "description": "Get the number of gameplay tags in the specified container",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetDebugStringFromGameplayTagContainer",
    "description": "Returns an FString listing all of the gameplay tags in the tag container for debugging purposes.",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetDebugStringFromGameplayTag",
    "description": "Returns an FString representation of a gameplay tag for debugging purposes.",
    "parameters": [
      {
        "name": "GameplayTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "GetAllActorsOfClassMatchingTagQuery",
    "description": "Get an array of all actors of a specific class (or subclass of that class) which match the specified gameplay tag query.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayTagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "EqualEqual_GameplayTagContainer",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "EqualEqual_GameplayTag",
    "description": "Returns true if the values are equal (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "DoesTagAssetInterfaceHaveTag",
    "description": "Check if the specified tag container has the specified tag, using the specified tag matching types",
    "parameters": [
      {
        "name": "TagContainerInterface",
        "type": "TScriptInterface_UGameplayTagAssetInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "DoesContainerMatchTagQuery",
    "description": "Check if the specified tag container matches the given Tag Query",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "TagQuery",
        "type": "FGameplayTagQuery",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "Conv_ObjectToGameplayTagAssetInterface",
    "description": "Converts a UObject to a GameplayTagAssetInterface. This specialty Autocast function exists so we can auto-convert the GameplayTagAssetInterface member functions to static Blueprint functions using redirects.",
    "parameters": [
      {
        "name": "InObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TScriptInterface_UGameplayTagAssetInterface_"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "BreakGameplayTagContainer",
    "description": "Breaks tag container into explicit array of tags",
    "parameters": [
      {
        "name": "GameplayTagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "GameplayTags",
        "type": "TArray_FGameplayTag_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "AppendGameplayTagContainers",
    "description": "Appends all tags in the InTagContainer to InOutTagContainer",
    "parameters": [
      {
        "name": "InOutTagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": true
      },
      {
        "name": "InTagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UBlueprintGameplayTagLibrary",
    "name": "AddGameplayTag",
    "description": "Adds a single tag to the passed in tag container",
    "parameters": [
      {
        "name": "TagContainer",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": true
      },
      {
        "name": "Tag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGameplayTasksComponent",
    "name": "K2_RunGameplayTask",
    "description": "The core ActorComponent for interfacing with the GameplayAbilities System",
    "parameters": [
      {
        "name": "TaskOwner",
        "type": "TScriptInterface_UGameplayTaskOwnerInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "Task",
        "type": "UGameplayTask",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditionalRequiredResources",
        "type": "TArray_TSubclassOf_UGameplayTaskResource__",
        "optional": false,
        "out": false
      },
      {
        "name": "AdditionalClaimedResources",
        "type": "TArray_TSubclassOf_UGameplayTaskResource__",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGameplayTaskRunResult"
  },
  {
    "class": "UGameplayTask_ClaimResource",
    "name": "ClaimResources",
    "description": "",
    "parameters": [
      {
        "name": "InTaskOwner",
        "type": "TScriptInterface_UGameplayTaskOwnerInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResourceClasses",
        "type": "TArray_TSubclassOf_UGameplayTaskResource__",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGameplayTask_ClaimResource"
  },
  {
    "class": "UGameplayTask_ClaimResource",
    "name": "ClaimResource",
    "description": "",
    "parameters": [
      {
        "name": "InTaskOwner",
        "type": "TScriptInterface_UGameplayTaskOwnerInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResourceClass",
        "type": "TSubclassOf_UGameplayTaskResource_",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGameplayTask_ClaimResource"
  },
  {
    "class": "UGameplayTask_SpawnActor",
    "name": "SpawnActor",
    "description": "Convenience task for spawning actors (optionally limiting the spawning to the network authority). If not the net authority, we will not spawn and Success will not be called. The nice thing this adds is the ability to modify expose on spawn properties while also implicitly checking network role before spawning. Though this task doesn't do much - games can implement similar tasks that carry out game specific rules. For example a 'SpawnProjectile' task that limits the available classes to the games projectile class, and that does game specific stuff on spawn (for example, determining firing position from a weapon attachment). Long term we can also use this task as a sync point. If the executing client could wait execution until the server creates and replicates the actor down to it. We could potentially also use this to do predictive actor spawning / reconciliation. Spawn new Actor on the network authority (server)",
    "parameters": [
      {
        "name": "TaskOwner",
        "type": "TScriptInterface_UGameplayTaskOwnerInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSpawnOnlyOnAuthority",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGameplayTask_SpawnActor"
  },
  {
    "class": "UGameplayTask_WaitDelay",
    "name": "TaskWaitDelay",
    "description": "Wait specified time. This is functionally the same as a standard Delay node.",
    "parameters": [
      {
        "name": "TaskOwner",
        "type": "TScriptInterface_UGameplayTaskOwnerInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Priority",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGameplayTask_WaitDelay"
  },
  {
    "class": "UGeometryCollectionBlueprintLibrary",
    "name": "SetISMPoolCustomInstanceData",
    "description": "Blueprint library for Geometry Collections.",
    "parameters": [
      {
        "name": "GeometryCollectionComponent",
        "type": "UGeometryCollectionComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryCollectionBlueprintLibrary",
    "name": "SetCustomInstanceDataByName",
    "description": "Set a custom instance data value for all instances associated with a geometry collection. This assumes that the geometry collection is using a custom renderer that supports IGeometryCollectionCustomDataInterface.",
    "parameters": [
      {
        "name": "GeometryCollectionComponent",
        "type": "UGeometryCollectionComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryCollectionBlueprintLibrary",
    "name": "SetCustomInstanceDataByIndex",
    "description": "Set a custom instance data value for all instances associated with a geometry collection. This assumes that the geometry collection is using a custom renderer that supports IGeometryCollectionCustomDataInterface.",
    "parameters": [
      {
        "name": "GeometryCollectionComponent",
        "type": "UGeometryCollectionComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomDataValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "TestPointInsideBox",
    "description": "Test if a Point is inside the Box, returning true if so, otherwise false",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bConsiderOnBoxAsInside",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "TestBoxSphereIntersection",
    "description": "Check if the Box intersects a Sphere defined by the SphereCenter and SphereRadius",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "TestBoxBoxIntersection",
    "description": "Test if Box1 and Box2 intersect",
    "parameters": [
      {
        "name": "Box1",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Box2",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "MakeBoxFromCenterSize",
    "description": "Create a Box from a Center point and X/Y/Z Dimensions (*not* Extents, which are half-dimensions)",
    "parameters": [
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Dimensions",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "MakeBoxFromCenterExtents",
    "description": "Create a Box from a Center point and X/Y/Z Extents (Extents are half-dimensions)",
    "parameters": [
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Extents",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetTransformedBox",
    "description": "Apply the input Transform to the corners of the input Box, and return the new Box containing those points",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetExpandedBox",
    "description": "Get the input Box expanded by adding the ExpandBy parameter to both the Min and Max. Dimensions will be clamped to the center point if any of ExpandBy are larger than half the box size",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpandBy",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxVolumeArea",
    "description": "Get the Volume and Surface Area of a Box",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Volume",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "SurfaceArea",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxPointDistance",
    "description": "Calculate the minimum distance between the Box and the Point",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxFaceCenter",
    "description": "Get the position of the center of a face of the Box. Faces are indexed from 0 to 5, using an ordering where 0/1 are the MinZ/MaxZ faces, 2/3 are MinY/MaxY, and 4/5 are MinX/MaxX",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "FaceIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "FaceNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxCorner",
    "description": "Get the position of a corner of the Box. Corners are indexed from 0 to 7, using an ordering where 0 is the Min corner, 1/2/3 are +Z/+Y/+X from the Min corner, 7 is the Max corner, and 4/5/6 are -Z/-Y/-X from the Max corner.",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "CornerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxCenterSize",
    "description": "Get the Center point and X/Y/Z Dimensions of a Box (full dimensions, not Extents)",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Center",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Dimensions",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "GetBoxBoxDistance",
    "description": "Calculate the minimum distance between Box1 and Box2",
    "parameters": [
      {
        "name": "Box1",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Box2",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "FindClosestPointOnBox",
    "description": "Find the point on the faces of the Box that is closest to the input Point. If the Point is inside the Box, it is returned, ie points Inside do not project to the Box Faces",
    "parameters": [
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsInside",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_BoxFunctions",
    "name": "FindBoxBoxIntersection",
    "description": "Find the Box formed by the intersection of Box1 and Box2",
    "parameters": [
      {
        "name": "Box1",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Box2",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsIntersecting",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "TransformSimpleCollisionShapes",
    "description": "* Transform simple collision shapes * @@param bSuccess      Indicates whether all collision shapes were accurately transformed. On failure, shapes will still be copied over and a best-effort transform will still be applied.",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TransformOptions",
        "type": "FGeometryScriptTransformCollisionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "StaticMeshHasCustomizedCollision",
    "description": "* @@returns true if the static mesh has customized collision. If no editor data is available, returns false.",
    "parameters": [
      {
        "name": "StaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SimplifyConvexHulls",
    "description": "Simplify any convex hulls in the given simple collision representation. Updates the passed-in Simple Collision.",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "SimplifyOptions",
        "type": "FGeometryScriptConvexHullSimplificationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasSimplified",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetStaticMeshCustomComplexCollision",
    "description": "Set a static mesh as the custom collision for another static mesh to use. Note: Only works if editor-only data is available.",
    "parameters": [
      {
        "name": "StaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshCollisionAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bEmitTransaction",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bMarkCollisionAsCustomized",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetStaticMeshCollisionFromMesh",
    "description": "Generates Simple Collision shapes for a Static Mesh Asset based on the input Dynamic Mesh.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCollisionFromMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshCollisionOptions",
        "type": "FGeometryScriptSetStaticMeshCollisionOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetStaticMeshCollisionFromComponent",
    "description": "Copy the Simple Collision Geometry from the Source Component to the Static Mesh Asset.",
    "parameters": [
      {
        "name": "StaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSetSimpleCollisionOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "StaticMeshCollisionOptions",
        "type": "FGeometryScriptSetStaticMeshCollisionOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetSimpleCollisionOfStaticMesh",
    "description": "* Set the simple collision on a Static Mesh",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSetSimpleCollisionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshCollisionOptions",
        "type": "FGeometryScriptSetStaticMeshCollisionOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetSimpleCollisionOfDynamicMeshComponent",
    "description": "* Set the simple collision on a Dynamic Mesh Component",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "DynamicMeshComponent",
        "type": "UDynamicMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSetSimpleCollisionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "SetDynamicMeshCollisionFromMesh",
    "description": "Generate Simple Collision shapes for a Dynamic Mesh Component based on the input Dynamic Mesh.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMeshComponent",
        "type": "UDynamicMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCollisionFromMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "ResetSimpleCollision",
    "description": "Clears the Simple Collision shapes",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "ResetDynamicMeshCollision",
    "description": "Clears Simple Collisions from the Dynamic Mesh Component.",
    "parameters": [
      {
        "name": "Component",
        "type": "UDynamicMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bEmitTransaction",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "MergeSimpleCollisionShapes",
    "description": "Attempt to merge collision shapes to create a representation with fewer overall shapes.",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "MergeOptions",
        "type": "FGeometryScriptMergeSimpleCollisionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasMerged",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "GetSimpleCollisionShapeCount",
    "description": "* Count of number of simple collision shapes",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "GetSimpleCollisionFromStaticMesh",
    "description": "* Get the simple collision from a Static Mesh",
    "parameters": [
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "GetSimpleCollisionFromComponent",
    "description": "* Get the simple collision from a Primitive Component",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "GenerateCollisionFromMesh",
    "description": "Generate Simple Collision shapes for an input Dynamic Mesh shape",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCollisionFromMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "Conv_SphereArrayToGeometryScriptSphereCovering",
    "description": "",
    "parameters": [
      {
        "name": "Spheres",
        "type": "TArray_FSphere_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSphereCovering"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "Conv_GeometryScriptSphereCoveringToSphereArray",
    "description": "",
    "parameters": [
      {
        "name": "SphereCovering",
        "type": "FGeometryScriptSphereCovering",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FSphere_"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "ComputeNegativeSpace",
    "description": "Compute the negative space of an input mesh surface that should be protected when merging simple collision shapes",
    "parameters": [
      {
        "name": "MeshBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "NegativeSpaceOptions",
        "type": "FComputeNegativeSpaceOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSphereCovering"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "ComputeNavigableConvexDecomposition",
    "description": "Compute the 'navigable' convex decomposition of an input mesh surface, i.e. a convex decomposition appropriate for a character of (or larger than) a given size",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FNavigableConvexDecompositionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimpleCollision"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "CombineSimpleCollisionArray",
    "description": "* Combine the SimpleCollisionArray collision shapes into a single SimpleCollision",
    "parameters": [
      {
        "name": "SimpleCollisionArray",
        "type": "TArray_FGeometryScriptSimpleCollision_",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "CombineSimpleCollision",
    "description": "* Add simple collision shapes from AppendCollision to CollisionToUpdate",
    "parameters": [
      {
        "name": "CollisionToUpdate",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "AppendCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CollisionFunctions",
    "name": "ApproximateConvexHullsWithSimplerCollisionShapes",
    "description": "Attempt to approximate any convex hulls in the given simple collision representation. Updates the passed-in Simple Collision. Convex hulls that aren't well approximated (to tolerances set in ApproximateOptions) will remain as convex hulls.",
    "parameters": [
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "ApproximateOptions",
        "type": "FGeometryScriptConvexHullApproximationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasApproximated",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ContainmentFunctions",
    "name": "ComputeMeshSweptHull",
    "description": "Compute the Swept Hull of a given Target Mesh for a given 3D Plane defined by ProjectionFrame, and put the result in Hull Mesh The Swept Hull is a linear sweep of the 2D convex hull of the mesh vertices projected onto the plane (the sweep precisely contains the mesh extents along the plane normal)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "ProjectionFrame",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSweptHullOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_ContainmentFunctions",
    "name": "ComputeMeshConvexHull",
    "description": "Compute the Convex Hull of a given Target Mesh, or part of the mesh if an optional Selection is provided, and put the result in Hull Mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptConvexHullOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_ContainmentFunctions",
    "name": "ComputeMeshConvexDecomposition",
    "description": "Compute a Convex Hull Decomposition of the given TargetMesh. Assuming more than one hull is requested, multiple hulls will be returned that attempt to approximate the mesh. If simplification settings are enabled, there is no guarantee that the entire mesh is contained in the hulls.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "Options",
        "type": "FGeometryScriptConvexDecompositionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "SetVectorListItem",
    "description": "Updates the value of the FVector stored in the Vector List at the specified location. If the Index is invalid, the operation will fail and bValidIndex will be set to false.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewValue",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "SetUVListItem",
    "description": "Updates the value of the FVector2D stored in the UV List at the specified location. If the Index is invalid, the operation will fail and bValidIndex will be set to false on return.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewUV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "SetScalarListItem",
    "description": "Updates the value associated with Index in the Scalar List. If the Index is invalid, the operation will fail and bValidIndex will be set to false.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "SetIndexListItem",
    "description": "Updates the value associated with Index in the Index List. If the Index is invalid, the operation will fail and in this case bValidIndex will be set to false on return.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "SetColorListItem",
    "description": "Updates the value of the FLinearColor stored in the Color List at the specified location. If the Index is invalid, the operation will fail and bValidIndex will be set to false.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetVectorListLength",
    "description": "Returns the number of items in the Vector List.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetVectorListLastIndex",
    "description": "Returns the index of the last item in the Vector List. If Vector List is empty or invalid, the value -1 will be returned.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetVectorListItem",
    "description": "Returns the FVector stored in the VectorList at the specified location. if the Index is not valid for this Vector List, the Zero Vector will be returned and bIsValidIndex set to false.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetUVListLength",
    "description": "Returns the number of items in the UV List.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetUVListLastIndex",
    "description": "Returns the index of the last item in the UV List. If UV List is empty or invalid, the value -1 will be returned.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetUVListItem",
    "description": "Returns the FVector2D stored in the UV List at the specified location. If the Index is not valid for this UV List, the Zero Vector will be returned and bIsValidIndex set to false.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetTriangleListLength",
    "description": "Returns the number of Triangles in the  Triangle list.",
    "parameters": [
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetTriangleListLastTriangle",
    "description": "Returns the index of the last element in the Triangle List. If the Triangle List is empty or invalid, the value 0 will be returned.",
    "parameters": [
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetTriangleListItem",
    "description": "Returns the integer triplet associated with the index Triangle in the Triangle  List. If Triangle is not valid for this Triangle List, the triplet (-1, -1, -1) will be returned and bIsValidIndex set to false.",
    "parameters": [
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangle",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetScalarListLength",
    "description": "Returns the number of items in the Scalar List.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetScalarListLastIndex",
    "description": "Returns the index of the last Scalar in Scalar List. If Scalar List is empty or invalid, the value -1 will be returned",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetScalarListItem",
    "description": "Returns the Scalar value associated with Index in Scalar List. If the Index is not valid for this Scalar List, the value 0.0 will be returned and bIsValidIndex set to false.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetIndexListLength",
    "description": "Returns the number of Items in Index List.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetIndexListLastIndex",
    "description": "Returns the index of the last element in the Index List. Note, the value -1 will be returned if the list is empty or invalid.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetIndexListItem",
    "description": "Returns the item associated with Index in the Index List. If Index is not valid for this Index List the value -1 will be returned and bIsValidIndex will be set to false.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetColorListLength",
    "description": "Returns the number of items in the Color List.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetColorListLastIndex",
    "description": "Returns the index of the last item in the Color List. If Color List is empty or invalid, the value -1 will be returned.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "GetColorListItem",
    "description": "Returns the FLinearColor stored in the Color List at the specified location. If the Index is not valid for this Color List, FLinearColor::White will be returned and bIsValidIndex set to false.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ExtractColorListChannels",
    "description": "Populates a Vector List from a Color List. The channels in the Color List are mapped to vector components by means of X Channel Index, Y Channel Index, and Z Channel Index.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "XChannelIndex",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "YChannelIndex",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "ZChannelIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ExtractColorListChannel",
    "description": "Populates a Scalar List with values that corresponds to the 0, 1, 2, or 3 channel of a Color List.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "ChannelIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "DuplicateVectorList",
    "description": "Copies the contents of Vector List into Duplicate Vector List.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "DuplicateList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "DuplicateUVList",
    "description": "Duplicates the contents of UV List into Duplicate List.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      },
      {
        "name": "DuplicateList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "DuplicateScalarList",
    "description": "Copies the contents of Scalar List into Duplicate List.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "DuplicateList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "DuplicateIndexList",
    "description": "Updates Duplicate List to be identical to Index List.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "DuplicateList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "DuplicateColorList",
    "description": "Duplicates the contents of Color List into Duplicate List.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "DuplicateList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertVectorListToArray",
    "description": "Converts Vector List to an array of FVectors (Vector Array).",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorArray",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertUVListToArray",
    "description": "Converts a UV List to an array of FVector2Ds (UV Array).",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      },
      {
        "name": "UVArray",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertTriangleListToArray",
    "description": "Converts Triangle List to Triangle Array by populating with the appropriate integer triplets.",
    "parameters": [
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleArray",
        "type": "TArray_FIntVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertScalarListToArray",
    "description": "Converts a Scalar List to an Scalar Array (an array of doubles).",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarArray",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertIndexListToArray",
    "description": "Populates Index Array with the integer values stored in the Index List.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertColorListToArray",
    "description": "Converts the Color List to an array of FLinearColor (Color Array).",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorArray",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToVectorList",
    "description": "Converts an Array of FVectors (Vector Array) to Vector List.",
    "parameters": [
      {
        "name": "VectorArray",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToUVList",
    "description": "Converts an array of FVector2D (UV Array) to UV List.",
    "parameters": [
      {
        "name": "UVArray",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToTriangleList",
    "description": "Converts a Triangle Array of integer triplets to a Triangle List.",
    "parameters": [
      {
        "name": "TriangleArray",
        "type": "TArray_FIntVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToScalarList",
    "description": "Converts an array of doubles (Scalar Array) to Scalar List.",
    "parameters": [
      {
        "name": "VectorArray",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToIndexList",
    "description": "Populates Index List of the specified Index Type from the integer values stored in the Index Array.",
    "parameters": [
      {
        "name": "IndexArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "IndexType",
        "type": "EGeometryScriptIndexType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ConvertArrayToColorList",
    "description": "Converts an array of FLinearColor (Color Array) to a Color List.",
    "parameters": [
      {
        "name": "ColorArray",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ClearVectorList",
    "description": "Resets all the items in the Vector List to the Clear Value.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "ClearValue",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ClearUVList",
    "description": "Resets all the items in the Vector List to the given Clear UV value.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": true
      },
      {
        "name": "ClearUV",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ClearScalarList",
    "description": "Resets all the items in the Scalar List to the Clear Value.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "ClearValue",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ClearIndexList",
    "description": "Set each value in Index List to the given Clear Value.",
    "parameters": [
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "ClearValue",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_ListUtilityFunctions",
    "name": "ClearColorList",
    "description": "Resets all the items in the Color List to the specified Clear Color.",
    "parameters": [
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      },
      {
        "name": "ClearColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeVertexColor",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeUVShell",
    "description": "",
    "parameters": [
      {
        "name": "SourceUVLayer",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "WireframeThickness",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "WireframeColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "ShellColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "BackgroundColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeTexture",
    "description": "",
    "parameters": [
      {
        "name": "SourceTexture",
        "type": "UTexture2D",
        "optional": true,
        "out": false
      },
      {
        "name": "SourceUVLayer",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeTangentNormal",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypePosition",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeObjectNormal",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeMultiTexture",
    "description": "",
    "parameters": [
      {
        "name": "MaterialIDSourceTextures",
        "type": "TArray_UTexture2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceUVLayer",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeMaterialID",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeFaceNormal",
    "description": "",
    "parameters": [],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeCurvature",
    "description": "",
    "parameters": [
      {
        "name": "CurvatureType",
        "type": "EGeometryScriptBakeCurvatureTypeMode",
        "optional": true,
        "out": false
      },
      {
        "name": "ColorMapping",
        "type": "EGeometryScriptBakeCurvatureColorMode",
        "optional": true,
        "out": false
      },
      {
        "name": "ColorRangeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MinRangeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Clamping",
        "type": "EGeometryScriptBakeCurvatureClampMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeConstant",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeBentNormal",
    "description": "",
    "parameters": [
      {
        "name": "OcclusionRays",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SpreadAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NormalSpace",
        "type": "EGeometryScriptBakeNormalSpace",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "MakeBakeTypeAmbientOcclusion",
    "description": "",
    "parameters": [
      {
        "name": "OcclusionRays",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SpreadAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BiasAngle",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptBakeTypeOptions"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "ConvertBakeResolutionToInt",
    "description": "",
    "parameters": [
      {
        "name": "BakeResolution",
        "type": "EGeometryScriptBakeResolution",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "BakeVertex",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetOptions",
        "type": "FGeometryScriptBakeTargetMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceOptions",
        "type": "FGeometryScriptBakeSourceMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "BakeTypes",
        "type": "FGeometryScriptBakeOutputType",
        "optional": false,
        "out": false
      },
      {
        "name": "BakeOptions",
        "type": "FGeometryScriptBakeVertexOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "BakeTextureFromRenderCaptures",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLocalToWorld",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetOptions",
        "type": "FGeometryScriptBakeTargetMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "BakeOptions",
        "type": "FGeometryScriptBakeRenderCaptureOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptRenderCaptureTextures"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBakeFunctions",
    "name": "BakeTexture",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetOptions",
        "type": "FGeometryScriptBakeTargetMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceOptions",
        "type": "FGeometryScriptBakeSourceMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "BakeTypes",
        "type": "TArray_FGeometryScriptBakeTypeOptions_",
        "optional": false,
        "out": false
      },
      {
        "name": "BakeOptions",
        "type": "FGeometryScriptBakeTextureOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UTexture2D_"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "SetVertexPosition",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidVertex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "SetAllMeshVertexPositions",
    "description": "Set all vertex positions in the TargetMesh to the specified Positions.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DiscardMeshAttributes",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DeleteVerticesFromMesh",
    "description": "Removes a list of vertices from the mesh. On return, NumDeleted will contain the actual number of vertices removed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "NumDeleted",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DeleteVertexFromMesh",
    "description": "Removes a vertex from the mesh as indicated by the VertexID. Should the delete fail, e.g. if the specified vertex was not a mesh element, the flag bWasVertexDeleted will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bWasVertexDeleted",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DeleteTrianglesFromMesh",
    "description": "Removes a list of triangles from the mesh. On return, NumDeleted will contain the actual number of triangles removed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "NumDeleted",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DeleteTriangleFromMesh",
    "description": "Removes a triangle from the mesh as indicated by the Triangle ID. Should the delete fail, e.g. if the specified triangle was not a mesh element, the flag bWasTriangleDelete will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bWasTriangleDeleted",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "DeleteSelectedTrianglesFromMesh",
    "description": "Removes specified triangles, identified by mesh selection, from the mesh. On return, NumDeleted will contain the actual number of triangles removed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NumDeleted",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMeshWithMaterials",
    "description": "Apply Append Transform to Append Mesh and then add its geometry to the Target Mesh. Also combines materials lists of the Target and Append meshes, and updates the output mesh materials to reference the combined list.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "AppendTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "bCompactAppendedMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMeshTransformedWithMaterials",
    "description": "For each transform in AppendTransforms, apply the transform to AppendMesh and then add its geometry to the TargetMesh. Also combines materials lists of the Target and Append meshes, and updates the output mesh materials to reference the combined list.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "AppendTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bConstantTransformIsRelative",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "bCompactAppendedMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMeshTransformed",
    "description": "For each transform in AppendTransforms, apply the transform to AppendMesh and then add its geometry to the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bConstantTransformIsRelative",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMeshRepeatedWithMaterials",
    "description": "Repeatedly apply AppendTransform to the AppendMesh, each time adding the geometry to TargetMesh. Also combines materials lists of the Target and Append meshes, and updates the output mesh materials to reference the combined list.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultMeshMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "AppendTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "RepeatCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bApplyTransformToFirstInstance",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "bCompactAppendedMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMeshRepeated",
    "description": "Repeatedly apply AppendTransform to the AppendMesh, each time adding the geometry to TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "RepeatCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bApplyTransformToFirstInstance",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendMesh",
    "description": "Apply Append Transform to Append Mesh and then add its geometry to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AppendTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AppendOptions",
        "type": "FGeometryScriptAppendMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AppendBuffersToMesh",
    "description": "Adds a set of vertices/triangles to the mesh, with Normals, UVs, and Colors; returning the new triangles indices",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Buffers",
        "type": "FGeometryScriptSimpleMeshBuffers",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTriangleIndicesList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AddVerticesToMesh",
    "description": "Adds a list of vertices to the mesh, and populates the NewIndicesList with the corresponding new Vertex IDs.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewPositionsList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "NewIndicesList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AddVertexToMesh",
    "description": "Adds a new vertex to the mesh and returns a new Vertex ID (NewVertexIndex).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "NewVertexIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AddTriangleToMesh",
    "description": "Adds a triangle (Vertex ID triplet) to the mesh and updates New Triangle Index with the resulting Triangle ID.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTriangle",
        "type": "FIntVector",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTriangleIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "NewTriangleGroupID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBasicEditFunctions",
    "name": "AddTrianglesToMesh",
    "description": "Adds a list of triangles to the mesh and populates the New Indices List with the corresponding new Triangle IDs.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTrianglesList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": false
      },
      {
        "name": "NewIndicesList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "NewTriangleGroupID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "TransferBoneWeightsFromMesh",
    "description": "Transfer the bone weights from the SourceMesh to the TargetMesh. Assumes that the meshes are aligned. Otherwise, use the TransformMesh geometry script function to align them. If left empty, skin weights will be transferred to all target mesh vertices.",
    "parameters": [
      {
        "name": "SourceMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptTransferBoneWeightsOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "SetVertexBoneWeights",
    "description": "Set the Bone/Skin Weights at a given vertex of TargetMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneWeights",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidVertexID",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "SetAllVertexBoneWeights",
    "description": "Set all vertices of the TargetMesh to the given Bone/Skin Weights",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneWeights",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": false
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "PruneBoneWeights",
    "description": "Prunes the given bones from any bone weight assignment on the given profile. The bone weights are re-assigned based on the type of re-assignment specified in the options, although in the case where the bone(s) being pruned are the sole bone weight on a vertex, then the parent bone will be assigned as the sole bone weight for that vertex. Bones are pruned iteratively from leaf to root, to ensure that weighs are progressively re-assigned in case multiple bones along the same branch are being pruned.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BonesToPrune",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPruneBoneWeightsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "MeshHasBoneWeights",
    "description": "Check whether the TargetMesh has a per-vertex Bone/Skin Weight Attribute set",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasBoneWeights",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "MeshCreateBoneWeights",
    "description": "Create a new BoneWeights attribute on the TargetMesh, if it does not already exist. If it does exist, and bReplaceExistingProfile is passed as true, the attribute will be removed and re-added, to reset it.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bProfileExisted",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bReplaceExistingProfile",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "MeshCopyBoneWeights",
    "description": "Copies all bone weights from a source profile onto a target profile, on the same mesh, replacing all weights that existed on the target profile. If either the source or the target profile didn't exist, then bProfileExisted will be set to false and no weights are copied.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bProfileExisted",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "TargetProfile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceProfile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetVertexBoneWeights",
    "description": "Return an array of Bone/Skin Weights at a given vertex of TargetMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneWeights",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasValidBoneWeights",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetRootBoneName",
    "description": "Get the name of the root bone.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetMaxBoneWeightIndex",
    "description": "Determine the largest bone weight index that exists on the Mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasBoneWeights",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "MaxBoneIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetLargestVertexBoneWeight",
    "description": "Return the Bone/Skin Weight with the maximum weight at a given vertex of TargetMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneWeight",
        "type": "FGeometryScriptBoneWeight",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasValidBoneWeights",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetBoneInfo",
    "description": "Get the bone information.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidBoneName",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "BoneInfo",
        "type": "FGeometryScriptBoneInfo",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetBoneIndex",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidBoneName",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "BoneIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetBoneChildren",
    "description": "Get the information about the children of the bone.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursive",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidBoneName",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ChildrenInfo",
        "type": "TArray_FGeometryScriptBoneInfo_",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "GetAllBonesInfo",
    "description": "Get an array of bones representing the skeleton. Each entry contains information about the bone.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BonesInfo",
        "type": "TArray_FGeometryScriptBoneInfo_",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "DiscardBonesFromMesh",
    "description": "Discard the bone attributes (skeleton) from the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "CopyBonesFromSkeleton",
    "description": "Copy the bone attributes (skeleton) from the SourceSkeleton to the TargetMesh.",
    "parameters": [
      {
        "name": "SourceSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyBonesFromMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "CopyBonesFromMesh",
    "description": "Copy the bone attributes (skeleton) from the SourceMesh to the TargetMesh.",
    "parameters": [
      {
        "name": "SourceMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyBonesFromMeshOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "ComputeSmoothBoneWeights",
    "description": "Computes a smooth skin binding for the given mesh to the skeleton provided.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Skeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSmoothBoneWeightsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Profile",
        "type": "FGeometryScriptBoneWeightProfile",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBoneWeightFunctions",
    "name": "BlendBoneWeights",
    "description": "Blends two bone weights using an Alpha value that ranges from 0 to 1, inclusive. If Alpha is 0, then only weights from BoneWeightsA are used, and if Alpha is 1, then only weights from BoneWeightsB are used. For any value in between the weights are linearly interpolated. Each bone weight from either array, that has the same bone index, are linearly interpolated. Any bone weights that are missing from either BoneWeightsA or BoneWeightsB, are assumed to exist and have a weight of 0. After blending, the result is renormalized and sorted. Values that are below the influence threshold, or exceeding the default bone weight limit (currently set to 12) will be thrown away.",
    "parameters": [
      {
        "name": "BoneWeightsA",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneWeightsB",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": false
      },
      {
        "name": "Alpha",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "TArray_FGeometryScriptBoneWeight_",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBooleanFunctions",
    "name": "ApplyMeshSelfUnion",
    "description": "Mesh-Boolean-Union an object with itself to repair self-intersections, remove floating geometry, etc.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshSelfUnionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBooleanFunctions",
    "name": "ApplyMeshPlaneSlice",
    "description": "Slices a mesh into two halves, with optional hole filling.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CutFrame",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshPlaneSliceOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBooleanFunctions",
    "name": "ApplyMeshPlaneCut",
    "description": "Applies a plane cut to a mesh, optionally filling any holes created.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CutFrame",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshPlaneCutOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBooleanFunctions",
    "name": "ApplyMeshMirror",
    "description": "Mirrors a mesh across a plane, with optional cutting and welding of triangles.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MirrorFrame",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshMirrorOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshBooleanFunctions",
    "name": "ApplyMeshBoolean",
    "description": "Applies a Boolean operation (such as, Union, Intersect, and Subtract) to the Target Dynamic Mesh based on a Tool Dynamic Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "ToolMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToolTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Operation",
        "type": "EGeometryScriptBooleanOperation",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshBooleanOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshComparisonFunctions",
    "name": "MeasureDistancesBetweenMeshes",
    "description": "Measures the min/max and average closest-point distances between two meshes.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeasureMeshDistanceOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxDistance",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "MinDistance",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "AverageDistance",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RootMeanSqrDeviation",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshComparisonFunctions",
    "name": "IsSameMeshAs",
    "description": "Returns true if the two input meshes are equivalent under the comparisons defined by the input options. If false, DifferenceInfo provides info on the first difference found.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptIsSameMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsSameMesh",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "DifferenceInfo",
        "type": "FGeometryScriptMeshDifferenceInfo",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshComparisonFunctions",
    "name": "IsIntersectingMesh",
    "description": "Returns true if the two input meshes (with optional transforms) are geometrically intersecting.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsIntersecting",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "SplitMeshByPolygroups",
    "description": "Create a new Mesh for each Polygroup of TargetMesh. Note that this may be a *large* number of meshes! New meshes are drawn from MeshPool if it is provided, otherwise new UDynamicMesh instances are allocated",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": true
      },
      {
        "name": "ComponentPolygroups",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "MeshPool",
        "type": "UDynamicMeshPool",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "SplitMeshByMaterialIDs",
    "description": "Create a new Mesh for each MaterialID of TargetMesh. New meshes are drawn from MeshPool if it is provided, otherwise new UDynamicMesh instances are allocated",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": true
      },
      {
        "name": "ComponentMaterialIDs",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "MeshPool",
        "type": "UDynamicMeshPool",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "SplitMeshByComponents",
    "description": "Create a new Mesh for each Connected Component of TargetMesh. New meshes are drawn from MeshPool if it is provided, otherwise new UDynamicMesh instances are allocated",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": true
      },
      {
        "name": "MeshPool",
        "type": "UDynamicMeshPool",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "GetSubMeshFromMesh",
    "description": "CopyMeshSelectionToMesh should be used instead of this function",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "StoreToSubmesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "TriangleList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "StoreToSubmeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "CopyMeshToMesh",
    "description": "Set CopyToMesh to be the same mesh as CopyFromMesh",
    "parameters": [
      {
        "name": "CopyFromMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDecompositionFunctions",
    "name": "CopyMeshSelectionToMesh",
    "description": "Extract the triangles identified by Selection from TargetMesh and copy/add them to StoreToSubmesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "StoreToSubmesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "StoreToSubmeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "bAppendToExisting",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bPreserveGroupIDs",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyTwistWarpToMesh",
    "description": "Applies a twist warp around an axis defined by the Twist Orientation transform. The extents of the affected region can be controlled by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptTwistWarpOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistOrientation",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "TwistAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TwistExtent",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyPerlinNoiseToMesh",
    "description": "Applies 3D Perlin noise displacement to the Target Mesh. the Options' EmptyBehavior will be followed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPerlinNoiseOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyMathWarpToMesh",
    "description": "Applies various simple math-function-based warps around an axis defined by the Warp Orientation transform, currently a 1D or 2D sine-wave with arbitrary orientation may be selected by WarpType.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "WarpOrientation",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "WarpType",
        "type": "EGeometryScriptMathWarpType",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMathWarpOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyIterativeSmoothingToMesh",
    "description": "Applies a number of iterations of mesh smoothing to a Dynamic Mesh. the Options' EmptyBehavior will be followed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptIterativeMeshSmoothingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyFlareWarpToMesh",
    "description": "Applies a Flare/Bulge warp around an axis defined by the Flare Orientation transform. The amount of flare in the perpendicular directions can be controlled by FlarePercentX and FlarePercentY and the extents of the affected region can be controlled by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptFlareWarpOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "FlareOrientation",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "FlarePercentX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FlarePercentY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FlareExtent",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyDisplaceFromTextureMap",
    "description": "Applies a displacement to a Dynamic Mesh based on a Texture2D and a UV Channel. the Options' EmptyBehavior will be followed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptDisplaceFromTextureOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "UVLayer",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyDisplaceFromPerVertexVectors",
    "description": "Add the vectors in VectorList, scaled by Magnitude, to the vertex positions in Target Mesh. VectorList Length must be >= the MaxVertexID of the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Magnitude",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshDeformFunctions",
    "name": "ApplyBendWarpToMesh",
    "description": "Applies a Bend Warp around an axis defined by the Bend Orientation transform. The extents of the affected region can be controlled by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptBendWarpOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "BendOrientation",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BendAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BendExtent",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshGeodesicFunctions",
    "name": "GetShortestVertexPath",
    "description": "Computes a vertex list that represents the shortest path constrained to travel along mesh triangle edges between the prescribed start and end vertex. This can fail if the Start and End points are within separate connected components of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "StartVertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "EndVertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundErrors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshGeodesicFunctions",
    "name": "GetShortestSurfacePath",
    "description": "Computes a PolyPath that represents the shortest mesh surface path between two prescribed points on the provided mesh. This can fail if the Start and End points are within separate connected components of the mesh. Note, Barycentric coordinates are of the form (a,b,c) where each entry is positive and a + b + c = 1. If the provided coordinates are invalid, the value (1/3, 1/3, 1/3) will be used.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "StartBaryCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "EndBaryCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ShortestPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundErrors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshGeodesicFunctions",
    "name": "CreateSurfacePath",
    "description": "Computes a PolyPath that represents a \"straight\" surface path starting at the prescribed point on the mesh, and continuing in the indicated direction until reaching the requested path length or encountering a mesh boundary, whichever comes first. Note, Barycentric coordinates are of the form (a,b,c) where each entry is positive and a + b + c = 1. If the provided coordinate is invalid, the value (1/3, 1/3, 1/3) will be used. Also, if the direction vector is nearly zero, the up-vector will be used.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "StartBaryCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPathLength",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SurfacePath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundErrors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "SetTriangleMaterialID",
    "description": "Assigns the specified triangle the given Material ID. If the Target Mesh does not have Material IDs enabled, or if the Triangle ID is not an element of the Target Mesh then bIsValidTriangle will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "SetPolygroupMaterialID",
    "description": "Set a new MaterialID on all the triangles of TargetMesh with the given PolyGroup.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidPolygroupID",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "SetMaterialIDOnTriangles",
    "description": "Assigns the Material ID to all the triangles specified by the Triangle ID List.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "SetMaterialIDForMeshSelection",
    "description": "Set a new MaterialID on all the triangles of the given Selection.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "SetAllTriangleMaterialIDs",
    "description": "Sets the Material ID of all triangles in a mesh to the values in an input Index List.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleMaterialIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "RemapToNewMaterialIDsByMaterial",
    "description": "Remap the Material IDs of the TargetMesh to a new set of Material IDs based on a 'From'/Current Material List, and a New Material List. For each triangle, the current Material is determined as FromMaterialList[MaterialID], and then the first index of this Material is found in the ToMaterialList, and this index is used as the new MaterialID If a Material cannot be found in ToMaterialList, a warning will be printed and the MaterialID left unmodified, unless MissingMaterialID is set to a value >= 0, in which case MissingMaterialID will be assigned",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FromMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ToMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "MissingMaterialID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "RemapMaterialIDs",
    "description": "For all triangles with a Material ID matching the given value (From Material ID), update the Material ID to the new value (To Material ID).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FromMaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ToMaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "RemapAndCombineMaterials",
    "description": "Remap material IDs to be consistent with a Required Materials list. The Target Mesh material IDs will be remapped to reference the Combined Materials list, which will always start with the Required Materials. If a Material cannot be found in CurrentMeshMaterials, a warning will be printed and the MaterialID left unmodified, unless RemapInvalidMaterialID is set to a value >= 0, in which case RemapInvalidMaterialID will be assigned",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMeshMaterials",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiredMaterials",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "CombinedMaterials",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "RemapInvalidMaterialID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bCompactDuplicateMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "GetTrianglesByMaterialID",
    "description": "Populates Triangle ID List with the Triangle IDs of triangles that share the specified Material ID in the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "GetTriangleMaterialID",
    "description": "Returns the current Material ID for a Triangle. If the mesh does not have Material IDs enabled or if the Triangle ID is not an element of the mesh, the value 0 will be returned and bIsValidTriangle will be false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "GetMaxMaterialID",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasMaterialIDs",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "GetMaterialIDsOfTriangles",
    "description": "This populates the MaterialIDList with Material IDs for each triangle in the TriangleIDList. If a triangle is not present in the Target Mesh the number -1 will be used for the corresponding Material ID. If Material IDs are not enabled on the TargetMesh no Material IDs will be added to the result list.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "GetAllTriangleMaterialIDs",
    "description": "Returns an Index List of all triangle Material IDs, constructed with one entry for each consecutive Triangle ID. If Material IDs are not enabled on the mesh, bHasMaterialsIDs will be set to false on return and nothing will be added to the Material ID List.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasMaterialIDs",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "EnableMaterialIDs",
    "description": "Enables per-triangle Material IDs on a mesh and initializes the values to 0. If Target Mesh already has Material IDs, this function will do nothing.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "DeleteTrianglesByMaterialID",
    "description": "Delete all triangles in TargetMesh with the given MaterialID",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumDeleted",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "CompactMaterialIDs",
    "description": "Compact the MaterialIDs of the TargetMesh, ie remove any un-used MaterialIDs and remap the remaining N in-use MaterialIDs to the range [0,N-1]. Optionally compute a Compacted list of Materials.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "CompactedMaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "bRemoveDuplicateMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshMaterialFunctions",
    "name": "ClearMaterialIDs",
    "description": "Resets all Material IDs on a mesh to the given ClearValue, or 0 if no ClearValue is provided. If Material IDs are not already enabled on the Target Mesh, this function will first enable them and then set the value.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ClearValue",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshShell",
    "description": "Create a thickened shell from TargetMesh by offsetting the vertex positions along averaged vertex normals, inwards or outwards. Similar to ApplyMeshOffset but also includes the initial mesh (possibly flipped, if the offset is positive)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshPolygroupBevel",
    "description": "Apply a Mesh Bevel operation to all PolyGroup Edges.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshBevelOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshOffsetFaces",
    "description": "Apply an Offset to the faces of TargetMesh identified by the Selection, or all faces if the Selection is empty. The Offset direction at each vertex can be derived from the averaged vertex normals or per-triangle normals.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshOffsetFacesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshOffset",
    "description": "Offset the vertices of TargetMesh from their initial positions based on averaged vertex normals. This function is intended for high-res meshes, for polymodeling-style offsets, ApplyMeshOffsetFaces will produce better results.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshLinearExtrudeFaces",
    "description": "Apply Linear Extrusion (ie extrusion in a single direction) to the triangles of TargetMesh identified by the Selection. The input Selection will still identify the same geometric elements after the Extrusion",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshLinearExtrudeOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshInsetOutsetFaces",
    "description": "Apply an Inset or Outset to the faces of TargetMesh identified by the Selection, or all faces if the Selection is empty.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshInsetOutsetFacesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshExtrude_Compatibility_5p0",
    "description": "Backwards-Compatibility implementations These are versions/variants of the above functions that were released in previous UE 5.x versions, that have since been updated. To avoid breaking user scripts, these previous versions are currently kept and called via redirectors registered in GeometryScriptingCoreModule.cpp. These functions may be deprecated in future UE releases.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshExtrudeOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshDuplicateFaces",
    "description": "Duplicate the triangles of TargetMesh identified by the Selection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTriangles",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "GroupOptions",
        "type": "FGeometryScriptMeshEditPolygroupOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshDisconnectFacesAlongEdges",
    "description": "Disconnect triangles of TargetMesh along the edges of the Selection. The input Selection will still identify the same geometric elements after Disconnecting.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshDisconnectFaces",
    "description": "Disconnect the triangles of TargetMesh identified by the Selection. The input Selection will still identify the same geometric elements after Disconnecting.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowBowtiesInOutput",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshBevelSelection",
    "description": "Apply a Mesh Bevel operation to parts of TargetMesh using the BevelOptions settings, with additional options to handle region selections",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "BevelMode",
        "type": "EGeometryScriptMeshBevelSelectionMode",
        "optional": false,
        "out": false
      },
      {
        "name": "BevelOptions",
        "type": "FGeometryScriptMeshBevelSelectionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshModelingFunctions",
    "name": "ApplyMeshBevelEdgeSelection",
    "description": "Apply a Mesh Bevel operation to parts of TargetMesh using the BevelOptions settings.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "BevelOptions",
        "type": "FGeometryScriptMeshBevelSelectionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "UpdateVertexNormal",
    "description": "Update the Normals and/or Tangents at VertexID of TargetMesh. Note that the specified vertex may have \"split normals\" or \"split tangents\", ie in the case of hard/crease normals, UV seams, and so on. In these situations, by default each of the unique normals/tangents at the vertex will be updated, but they will not be \"merged\", ie they will remain split. However if bMergeSplitValues=true, then the vertex will be \"un-split\", ie after the function call the vertex will have a single unique shared normal and/or tangents. Note that this function requires that some normals/tangents already exist on the TargetMesh. If this is not the case, functions like SetPerVertexNormals and ComputeTangents can be used to initialize the normals/tangents first.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bUpdateNormal",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "NewNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bUpdateTangents",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTangentX",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "NewTangentY",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidVertex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bMergeSplitValues",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetSplitNormalsAlongSelectedEdges",
    "description": "Set or remove split normals (aka sharp normals) for all edges in the Selection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "bSplit",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bRecalculateNormals",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "CalculateOptions",
        "type": "FGeometryScriptCalculateNormalsOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetPerVertexNormals",
    "description": "Recompute the normals of TargetMesh by averaging the triangle/face normals around each vertex, using combined area and angle weighting. Each vertex will have a single normal, ie there will be no hard edges.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetPerFaceNormals",
    "description": "Recompute the normals of TargetMesh by setting the normals of each triangle vertex to the triangle/face normal. Each vertex will have a unique normal in each triangle, ie there will be hard edges / split normals at every mesh edge",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetMeshTriangleNormals",
    "description": "Set the triangle-vertex normals for the given TriangleID on the TargetMesh. This will create unique triangle-vertex normals, ie it will create hard edges / split normals in the normal overlay for each edge of the triangle.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Normals",
        "type": "FGeometryScriptTriangle",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetMeshPerVertexTangents",
    "description": "Set all tangents in the TargetMesh Tangents Overlays to the specified per-vertex tangents",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TangentXList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "TangentYList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "SetMeshPerVertexNormals",
    "description": "Set all normals in the TargetMesh Normals Overlay to the specified per-vertex normals",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexNormalList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "RecomputeNormalsForMeshSelection",
    "description": "Recompute the normals of TargetMesh on all the triangles/vertices of the given Selection using the given CalculateOptions. This method will preserve any existing hard edges, ie each shared triangle-vertex normal is recomputed by averaging the face normals of triangles that reference that shared triangle-vertex normal",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "CalculateOptions",
        "type": "FGeometryScriptCalculateNormalsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "RecomputeNormals",
    "description": "Recompute the normals of TargetMesh using the given CalculateOptions. This method will preserve any existing hard edges, ie each shared triangle-vertex normal is recomputed by averaging the face normals of triangles that reference that shared triangle-vertex normal",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CalculateOptions",
        "type": "FGeometryScriptCalculateNormalsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "GetMeshPerVertexTangents",
    "description": "Get a list of single tangent vectors for each mesh vertex in the TargetMesh, derived from the Tangents Overlays. The Tangents Overlay may store multiple tangents for a single vertex (ie split tangents) In such cases the tangents can either be averaged, or the last tangent seen will be used, depending on the bAverageSplitVertexValues parameter.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TangentXList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "TangentYList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidTangentSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bAverageSplitVertexValues",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "GetMeshPerVertexNormals",
    "description": "Get a list of single normal vectors for each mesh vertex in the TargetMesh, derived from the Normals Overlay. The Normals Overlay may store multiple normals for a single vertex (ie split normals) In such cases the normals can either be averaged, or the last normal seen will be used, depending on the bAverageSplitVertexValues parameter.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidNormalSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bAverageSplitVertexValues",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "GetMeshHasTangents",
    "description": "Check if the TargetMesh has a Tangents Attribute Layer enabled",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasTangents",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "FlipNormals",
    "description": "Flip/Invert the normal vectors of TargetMesh by multiplying them by -1, as well as reversing the mesh triangle orientations, ie triangle (a,b,c) becomes (b,a,c)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "DiscardTangents",
    "description": "Remove any existing Tangents Attribute Layer from the TargetMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "ComputeTangents",
    "description": "Recompute Tangents for the TargetMesh, using the method and settings specified by FGeometryScriptTangentsOptions",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptTangentsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "ComputeSplitNormals",
    "description": "Recompute hard edges / split-normals for TargetMesh based on the provided SplitOptions, and then recompute the new shared triangle-vertex normals using the given CalculateOptions. The normal recomputation is identical to calling RecomputeNormals.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SplitOptions",
        "type": "FGeometryScriptSplitNormalsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "CalculateOptions",
        "type": "FGeometryScriptCalculateNormalsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshNormalsFunctions",
    "name": "AutoRepairNormals",
    "description": "Attempt to repair inconsistent normals in TargetMesh. Currently this is done in two passes. In the first pass, triangles with reversed orientation from their neighours are incrementally flipped until each connected component has a consistent orientation, if this is possible (note that this is not always globally possible, eg for a mobius-strip topology there is no consistent orientation). In the second pass, the \"global\" orientation is detected by casting rays from outside the mesh. This may produce incorrect results for meshes that are not closed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "SetPolygroupForMeshSelection",
    "description": "Set a new PolyGroup on all the triangles of the given Selection, for the given GroupLayer.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SetPolygroupIDOut",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "SetPolygroupID",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bGenerateNewPolygroup",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "SetNumExtendedPolygroupLayers",
    "description": "Sets the number of extended PolyGroup Layers on a Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NumLayers",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "GetTrianglesInPolygroup",
    "description": "Create list of all triangles with the given PolyGroup ID in the given GroupLayer (not necessarily a single connected-component)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleIDsOut",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "GetTrianglePolygroupID",
    "description": "Gets the PolyGroup ID associated with the specified Triangle ID and stored in the Group Layer. If the Group Layer or the Triangle does not exist, the value 0 will be returned and bIsValidTriangle set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "GetPolygroupIDsInMesh",
    "description": "Create list of all unique PolyGroup IDs that exist in the PolyGroup Layer in the Mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupIDsOut",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "GetAllTrianglePolygroupIDs",
    "description": "Create list of per-triangle PolyGroup IDs for the PolyGroup in the Mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupIDsOut",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "EnablePolygroups",
    "description": "Enables the standard PolyGroup Layer on the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "DeleteTrianglesInPolygroup",
    "description": "Deletes all triangles from the Target Mesh that have a particular PolyGroup ID, in the specific Group Layer.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumDeleted",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "CopyPolygroupsLayer",
    "description": "Copies the triangle PolyGroup assignments from one layer on the Target Mesh to another. Note, this will have no effect if PolyGroups have not been enabled on the mesh, or if one of the requested Group Layers does not exist.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FromGroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "ToGroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "ConvertUVIslandsToPolygroups",
    "description": "Creates and assigns a new PolyGroup for each disconnected UV island of a Mesh. Note, this will have no effect if either the requested UV Layer or Group Layer does not exist.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVLayer",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "ConvertComponentsToPolygroups",
    "description": "Creates and assigns a new PolyGroup for each disconnected component of a Mesh. Regions of a mesh are disconnected they do not have a triangle in common. Note, this will have no effect if the Group Layer does not exist.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "ComputePolygroupsFromPolygonDetection",
    "description": "Sets PolyGroups by identifying adjacent triangles that form reasonable quads. Note any triangles that do not neatly pair to form quads will receive their own PolyGroup.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "bRespectUVSeams",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bRespectHardNormals",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "QuadAdjacencyWeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "QuadMetricClamp",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxSearchRounds",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "ComputePolygroupsFromAngleThreshold",
    "description": "Sets PolyGroups by partitioning the mesh based on an edge crease/opening-angle. Note, this will have no effect if the Group Layer does not exist.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "CreaseAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MinGroupSize",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPolygroupFunctions",
    "name": "ClearPolygroups",
    "description": "Resets the triangle PolyGroup assignments within a PolyGroup Layer to the given Clear Value (or 0 if no Clear Value is specified). Note, this will have no effect if PolyGroups have not been enabled on the mesh, or if the requested Group Layer does not exist.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "ClearValue",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPoolFunctions",
    "name": "GetGlobalMeshPool",
    "description": "Access a global compute mesh pool (created on first access)",
    "parameters": [],
    "returnType": "UDynamicMeshPool"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPoolFunctions",
    "name": "DiscardGlobalMeshPool",
    "description": "Fully clear/destroy the current global mesh pool, allowing it and all its meshes to be garbage collected",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "CreateConstrainedEdgesLoop",
    "description": "Intended for use with AppendDelaunayTriangulation2D: Create a loop of edges through sequential vertices e.g., a Loop(3,0) will construct edges (2,0), (0,1) and (1,2)",
    "parameters": [
      {
        "name": "NumVertices",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FIntPoint_"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "CreateConstrainedEdgesChain",
    "description": "Intended for use with AppendDelaunayTriangulation2D: Create a chain of edges through sequential vertices e.g., a Chain(3,0) will construct edges (0,1) and (1,2)",
    "parameters": [
      {
        "name": "NumVertices",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FIntPoint_"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendVoronoiDiagram2D",
    "description": "Generates triangulated Voronoi Cells from the provided Voronoi Sites, identifying each with PolyGroups, and appends to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "VoronoiSites",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "VoronoiOptions",
        "type": "FGeometryScriptVoronoiOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendTriangulatedPolygon3D",
    "description": "Appends a Triangulated Polygon (with vertices specified in 3D) to the Target Mesh. Uses Ear Clipping-based triangulation. Output vertices will always be 1:1 with input vertices. Polygon endpoint is not repeated.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices3D",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendTriangulatedPolygon",
    "description": "Appends a Triangulated Polygon to the Target Mesh. Polygon should be oriented counter-clockwise to produce a correctly-oriented shape, otherwise it will be inside-out Polygon endpoint is not repeated.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowSelfIntersections",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendTorus",
    "description": "Appends a 3D torus (donut) or partial torus to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "RevolveOptions",
        "type": "FGeometryScriptRevolveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "MajorRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MinorRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MajorSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "MinorSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSweepPolyline",
    "description": "Sweep the given 2D PolylineVertices along the SweepPath specified as a set of FTransforms If the 2D vertices are (U,V), then in the coordinate space of the FTransform, X points \"along\" the path, Y points \"right\" (U) and Z points \"up\" (V).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolylineVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "SweepPath",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "PolylineTexParamU",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "SweepPathTexParamV",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "StartScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RotationAngleDeg",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MiterLimit",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSweepPolygon",
    "description": "Sweep the given 2D PolygonVertices along the SweepPath specified as a set of FTransforms If the 2D vertices are (U,V), then in the coordinate space of the FTransform, X points \"along\" the path, Y points \"right\" (U) and Z points \"up\" (V).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "SweepPath",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "StartScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RotationAngleDeg",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MiterLimit",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSpiralRevolvePolygon",
    "description": "Revolves a 2D polygon on a helical path, like one used to create a vertical spiral, appending the result to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "RevolveOptions",
        "type": "FGeometryScriptRevolveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "RisePerRevolution",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSphereLatLongWithCollision",
    "description": "Appends a 3D Sphere triangulated using latitude/longitude topology to the Target Mesh. Also creates matching simple collision. Note: If transform has non-uniform scale, collision shape will be a uniform-scale approximation matching the behavior of the physics system -- specifically, it will scale the sphere radius by the smallest axis scale.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsPhi",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsTheta",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSphereLatLong",
    "description": "Appends a 3D Sphere triangulated using latitude/longitude topology to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsPhi",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsTheta",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSphereCovering",
    "description": "Appends the spheres in the Sphere Covering to the Target Mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereCovering",
        "type": "FGeometryScriptSphereCovering",
        "optional": false,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSphereBoxWithCollision",
    "description": "Appends a 3D sphere triangulated using box topology to the Target Mesh. Also creates matching simple collision. Note: If transform has non-uniform scale, collision shape will be a uniform-scale approximation matching the behavior of the physics system -- specifically, it will scale the sphere radius by the smallest axis scale.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSphereBox",
    "description": "Appends a 3D sphere triangulated using box topology to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSimpleSweptPolygon",
    "description": "Sweeps a 2D polygon along an arbitrary 3D path, appending the result to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "SweepPath",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "bLoop",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "StartScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndScale",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RotationAngleDeg",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MiterLimit",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSimpleExtrudePolygon",
    "description": "Polygon should be oriented counter-clockwise to produce a correctly-oriented shape, otherwise it will be inside-out Polygon endpoint is not repeated.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "HeightSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendSimpleCollisionShapes",
    "description": "Appends Simple Collision shapes to the Target Mesh, triangulated as specified by Triangulation Options",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangulationOptions",
        "type": "FGeometryScriptSimpleCollisionTriangulationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRoundRectangleXY",
    "description": "Appends a planar Rectangle with Rounded Corners (RoundRect) to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "CornerRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsWidth",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsHeight",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsRound",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRoundRectangle_Compatibility_5_0",
    "description": "5.0 Preview 1 Compatibility version of AppendRoundRectangleXY. Incorrectly divides the input DimensionX and DimensionY by 2.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "CornerRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsWidth",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsHeight",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsRound",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRevolvePolygon",
    "description": "In the coordinate system of the revolve polygon, +X is towards the \"outside\" of the revolve donut, and +Y is \"up\" (ie +Z in local space) Polygon should be oriented counter-clockwise to produce a correctly-oriented shape, otherwise it will be inside-out Polygon endpoint is not repeated.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "RevolveOptions",
        "type": "FGeometryScriptRevolveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRevolvePath",
    "description": "Revolves an open 2D path, with optional top and bottom end caps, appending the result to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PathVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "RevolveOptions",
        "type": "FGeometryScriptRevolveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Steps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRectangleXY",
    "description": "Appends a planar Rectangle to a Dynamic Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsWidth",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsHeight",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendRectangle_Compatibility_5_0",
    "description": "5.0 Preview 1 Compatibility version of AppendRectangleXY. Incorrectly interprets the input dimensions. Incorrectly divides the input DimensionX and DimensionY by 2.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsWidth",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsHeight",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendPolygonListTriangulation",
    "description": "Generates a Delaunay Triangulation of the provided Polygon List, and appends it to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangulationOptions",
        "type": "FGeometryScriptPolygonsTriangulationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriangulationError",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendLinearStairs",
    "description": "Appends a linear staircase to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "StepWidth",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepHeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepDepth",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bFloating",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendDisc",
    "description": "Appends a planar disc to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "AngleSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SpokeSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StartAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "HoleRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendDelaunayTriangulation2D",
    "description": "Generates a Delaunay Triangulation of the provided vertices, and appends it to the Target Mesh. If optional Constrained Edges are provided, will generate a Constrained Delaunay Triangulation which connects the specified vertices with edges. On success, all vertices are always appended to the output mesh, though duplicate vertices will not be used in any triangles and may optionally be removed. Use PositionsToVertexIDs to map indices in the input VertexPositions array to vertex IDs in the Dynamic Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexPositions",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstrainedEdges",
        "type": "TArray_FIntPoint_",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangulationOptions",
        "type": "FGeometryScriptConstrainedDelaunayTriangulationOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionsToVertexIDs",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasDuplicateVertices",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendCylinder",
    "description": "Appends a 3D Cylinder (with optional end caps) to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RadialSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "HeightSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendCurvedStairs",
    "description": "Appends a rising circular staircase to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "StepWidth",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepHeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InnerRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "CurveAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bFloating",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendCone",
    "description": "Appends a 3D cone to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TopRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "RadialSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "HeightSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bCapped",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendCapsuleWithCollision",
    "description": "Appends a 3D Capsule to the Target Mesh. Also creates matching simple collision. Note: If transform has non-uniform scale, collision shape will be a uniform-scale approximation matching the behavior of the physics system -- specifically, it will scale the radius by the larger of the X, Y axis scales, and the length by the Z axis scale",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "LineLength",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "HemisphereSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "CircleSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SegmentSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendCapsule",
    "description": "Appends a 3D Capsule to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "LineLength",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "HemisphereSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "CircleSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SegmentSteps",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendBoxWithCollision",
    "description": "Appends a 3D box to the Target Mesh Also creates matching simple collision",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionZ",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendBox",
    "description": "Appends a 3D box to the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "DimensionX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "DimensionZ",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Origin",
        "type": "EGeometryScriptPrimitiveOriginMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendBoundingBoxWithCollision",
    "description": "Appends a 3D box to the Target Mesh with dimensions and origin taken from the input Box Also creates matching simple collision",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SimpleCollision",
        "type": "FGeometryScriptSimpleCollision",
        "optional": false,
        "out": true
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshPrimitiveFunctions",
    "name": "AppendBoundingBox",
    "description": "Appends a 3D box to the Target Mesh with dimensions and origin taken from the input Box",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PrimitiveOptions",
        "type": "FGeometryScriptPrimitiveOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "StepsX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsY",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StepsZ",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "IsValidVertexID",
    "description": "Returns true if Vertex ID refers to a valid vertex in the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "IsValidTriangleID",
    "description": "Returns true if Triangle ID refers to a valid Triangle in the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetVertexPosition",
    "description": "Gets the 3D position of a mesh vertex in the mesh local space, by Vertex ID.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidVertex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetVertexCount",
    "description": "Gets the number of vertices in the mesh. Note this may be less than the number of Vertex IDs used as some vertices may have been deleted.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetVertexConnectedVertices",
    "description": "Return array of Vertex IDs connected via a mesh edge to the given VertexID, ie the vertex one-ring",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vertices",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetVertexConnectedTriangles",
    "description": "Return array of Triangle IDs connected to the given VertexID, ie the triangle one-ring",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetUVSetBoundingBox",
    "description": "Gets the 2D bounding box of all UVs in the UV Channel.  If the UV Channel does not exist, or if the UV Channel is empty, the resulting box will be invalid.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bUVSetIsEmpty",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FBox2D"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleVertexColors",
    "description": "For the specified TriangleID of the TargetMesh, get the Vertex Colors at each vertex of the Triangle. These Colors will be taken from the Vertex Color Attribute, ie they will potentially be split-colors.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Color1",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "Color2",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "Color3",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      },
      {
        "name": "bTriHasValidVertexColors",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleUVs",
    "description": "Returns the UV values associated with the three vertices of the triangle in the specified UV Channel. If the Triangle does not exist in the mesh or if no UVs are set in the specified UV Channel for the triangle, the resulting values will be (0,0) and bHaveValidUVs will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UV1",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "UV2",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "UV3",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bHaveValidUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTrianglePositions",
    "description": "* Returns the 3D positions (in the mesh local space) of the three vertices of the requested triangle. * If the Triangle ID is not an element of the Target Mesh, all three vertices will be returned as (0, 0, 0) and bIsValidTriangle will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertex1",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertex2",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertex3",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleNormalTangents",
    "description": "For the specified Triangle ID of the TargetMesh, get the Normal and Tangent vectors at each vertex of the Triangle. These Normals/Tangents will be taken from the Normal and Tangents Overlays, i.e. they will potentially be split-normals.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriHasValidElements",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Normals",
        "type": "FGeometryScriptTriangle",
        "optional": false,
        "out": true
      },
      {
        "name": "Tangents",
        "type": "FGeometryScriptTriangle",
        "optional": false,
        "out": true
      },
      {
        "name": "BiTangents",
        "type": "FGeometryScriptTriangle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleNormals",
    "description": "For the specified TriangleID of the Target Mesh, get the Normal vectors at each vertex of the Triangle. These Normals will be taken from the Normal Overlay, i.e. they will potentially be split-normals.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Normal1",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal2",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal3",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bTriHasValidNormals",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleIndices",
    "description": "Returns the Vertex ID triplet for the specified Triangle.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FIntVector"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetTriangleFaceNormal",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumVertexIDs",
    "description": "Gets the number of Vertex IDs in the mesh, which may be larger than the Vertex Count, if the mesh is not dense (e.g.  after deleting vertices).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumUVSets",
    "description": "Gets the number of UV Channels on the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumUVIslands",
    "description": "Returns the number of UV islands in a given UV channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidUVChannel",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumTriangleIDs",
    "description": "Gets the number of Triangle IDs in the mesh. This may be larger than the Triangle Count if the mesh is not dense, even after deleting triangles.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumOpenBorderLoops",
    "description": "Returns the number of open border loops, such as \"holes\" in the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bAmbiguousTopologyFound",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumOpenBorderEdges",
    "description": "Returns the number of topological boundary edges in the mesh, i.e counts edges that only have one adjacent triangle.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumExtendedPolygroupLayers",
    "description": "Returns the count of extended PolyGroup Layers.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetNumConnectedComponents",
    "description": "Returns the number of separate connected components in the mesh, such as \"triangle patches\" internally connected by shared edges.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshVolumeAreaCenter",
    "description": "Computes the volume, area and center-of-mass of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SurfaceArea",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Volume",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "CenterOfMass",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshVolumeArea",
    "description": "Computes the volume and area of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SurfaceArea",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Volume",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshUVArea",
    "description": "Gets the area of triangles in UV space for the given UV Channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidUVChannel",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshInfoString",
    "description": "Returns information about the Target Mesh, such as the vertex and triangle count as well as some attribute information.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshHasAttributeSet",
    "description": "Returns true if the Target Mesh has attributes enabled.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetMeshBoundingBox",
    "description": "Computes the bounding box of the mesh vertices in the local space of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetIsDenseMesh",
    "description": "Returns true if the mesh is dense. For example, no gaps in Vertex IDs or Triangle IDs. Note if a mesh is not dense, the Compact Mesh node can be used to removed the gaps.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetIsClosedMesh",
    "description": "Returns true if the mesh is closed, such as no topological boundary edges.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetInterpolatedTriangleVertexColor",
    "description": "Compute the interpolated Vertex Color (A*Color1 + B*Color2 + C*Color3), where (A,B,C)=BarycentricCoords and the Colors are taken from the specified TriangleID in the Vertex Color layer of the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriHasValidVertexColors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetInterpolatedTriangleUV",
    "description": "Compute the interpolated UV (A*UV1+ B*UV2+ C*UV3), where (A,B,C)=BarycentricCoords and the UV positions are taken from the specified TriangleID in the specified UVSet of the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriHasValidUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedUV",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetInterpolatedTrianglePosition",
    "description": "Compute the interpolated Position (A*Vertex1 + B*Vertex2 + C*Vertex3), where (A,B,C)=BarycentricCoords and the Vertex positions are taken from the specified TriangleID of the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedPosition",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetInterpolatedTriangleNormalTangents",
    "description": "Compute the interpolated Normal and Tangents for the specified specified TriangleID in the Normal and Tangent attributes of the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriHasValidElements",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedTangent",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedBiTangent",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetInterpolatedTriangleNormal",
    "description": "Compute the interpolated Normal (A*Normal1 + B*Normal2 + C*Normal3), where (A,B,C)=BarycentricCoords and the Normals are taken from the specified TriangleID in the Normal layer of the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTriHasValidNormals",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolatedNormal",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasVertexIDGaps",
    "description": "Returns true if there are gaps in the Vertex ID list. For example, Get Number of Vertex IDs is greater than Get Vertex Count.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasVertexColors",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasTriangleNormals",
    "description": "",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasTriangleIDGaps",
    "description": "Returns true if there are gaps in the Triangle ID list, such that Get Num Triangle IDs is greater than Get Triangle Count.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasPolygroups",
    "description": "Returns true if the mesh has a standard PolyGroup Layer.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetHasMaterialIDs",
    "description": "Returns true if the mesh has Material IDs available/enabled.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllVertexPositionsAtEdges",
    "description": "Returns the vertex positions for each edge in the given index list.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "EdgeIDs",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "End",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllVertexPositions",
    "description": "Returns a Vector List of all the mesh vertex 3D positions (possibly large!). where a zero vector (0,0,0) will correspond to Vertex IDs not found in the Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "bSkipGaps",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllVertexIDs",
    "description": "Returns an IndexList of all Vertex IDs in mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllUVSeamEdges",
    "description": "Returns all edge element IDs that are UV seam edges for a given UV channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bHaveValidUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "ElementIDs",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllTriangleIndices",
    "description": "* Returns a TriangleList of all Triangle Vertex ID triplets in a mesh. * @@param bSkipGaps if false there will be a one-to-one correspondence between Triangle ID and entries in the triangle list and invalid triplets of (-1,-1,-1) will correspond to Triangle IDs not found in the Target Mesh. * @@param bHasTriangleIDGaps will be false on return if the mesh had no gaps in Triangle IDs or if bSkipGaps was set to true.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleList",
        "type": "FGeometryScriptTriangleList",
        "optional": false,
        "out": true
      },
      {
        "name": "bSkipGaps",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bHasTriangleIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllTriangleIDs",
    "description": "Returns an Index List of all Triangle IDs in a mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleIDList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasTriangleIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "GetAllSplitUVsAtVertex",
    "description": "Returns the unique UV element IDs and values associated with the mesh vertex, in the specified UV Channel. If the Vertex or UV channel does not exist, the arrays will be empty and bHaveValidUVs will be set to false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementIDs",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "ElementUVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "bHaveValidUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshQueryFunctions",
    "name": "ComputeTriangleBarycentricCoords",
    "description": "Compute the barycentric coordinates (A,B,C) of the Point relative to the specified TriangleID of the TargetMesh. The properties of barycentric coordinates are such that A,B,C are all positive, A+B+C=1.0, and A*Vertex1 + B*Vertex2 + C*Vertex3 = Point. So, the barycentric coordinates can be used to smoothly interpolate/blend any other per-triangle-vertex quantities. The Point must lie in the plane of the Triangle, otherwise the coordinates are somewhat meaningless (but clamped to 0-1 range to avoid catastrophic errors) The Positions of the Triangle Vertices are also returned for convenience (similar to GetTrianglePositions)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Vertex1",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertex2",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertex3",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "BarycentricCoords",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "WeldMeshEdges",
    "description": "Welds any open boundary edges of the mesh together if possible in order to remove \"cracks.\"",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "WeldOptions",
        "type": "FGeometryScriptWeldEdgesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "SplitMeshBowties",
    "description": "Splits Bowties in the mesh and/or the attributes.  A Bowtie is formed when a single vertex is connected to more than two boundary edges, and splitting duplicates the shared vertex so each triangle will have a unique copy.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bMeshBowties",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bAttributeBowties",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "SnapMeshOpenBoundaries",
    "description": "Snap vertices on open edges to the closest compatible open boundary, if found within the tolerance distance Unlike ResolveMeshTJunctions, does not introduce new vertices to the mesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SnapOptions",
        "type": "FGeometryScriptSnapBoundariesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "ResolveMeshTJunctions",
    "description": "Attempts to resolve T-Junctions in the mesh by addition of vertices and welding.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ResolveOptions",
        "type": "FGeometryScriptResolveTJunctionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "RepairMeshDegenerateGeometry",
    "description": "Removes triangles that have area or edge length below specified amounts depending on the Options requested.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptDegenerateTriangleOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "RemoveUnusedVertices",
    "description": "Remove vertices that are not used by any triangles. Note: Does not update the IDs of any remaining vertices; use CompactMesh to do so.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "RemoveSmallComponents",
    "description": "* Removes connected components of the mesh that have a volume, area, or triangle count below a threshold as specified by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptRemoveSmallComponentOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "RemoveHiddenTriangles",
    "description": "Removes any triangles in the mesh that are not visible from the exterior view, under various definitions of \"visible\" and \"outside\" as specified by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptRemoveHiddenTrianglesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "FillAllMeshHoles",
    "description": "Tries to fill all open boundary loops (such as holes in the geometry surface) of a mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FillOptions",
        "type": "FGeometryScriptFillHolesOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "NumFilledHoles",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "NumFailedHoleFills",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshRepairFunctions",
    "name": "CompactMesh",
    "description": "Compacts the mesh's vertices and triangles to remove any \"holes\" in the Vertex ID or Triangle ID lists.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSamplingFunctions",
    "name": "ComputeVertexWeightedPointSampling",
    "description": "Compute a set of sample points lying on the surface of TargetMesh based on the provided sampling Options and NonUniformOptions. The sample points have radii in the range [Options.SamplingRadius, NonUniformOptions.MaxSamplingRadius], and are non-overlapping, ie the distance between two points is always larger than the sum of their respective radii.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshPointSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "NonUniformOptions",
        "type": "FGeometryScriptNonUniformPointSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexWeights",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "Samples",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "SampleRadii",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "TriangleIDs",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSamplingFunctions",
    "name": "ComputeRenderCapturePointSampling",
    "description": "Compute oriented sample points on the visible surfaces of the given Actors The Samples are computed using Render Capture from the given virtual Cameras",
    "parameters": [
      {
        "name": "Samples",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Cameras",
        "type": "TArray_FGeometryScriptRenderCaptureCamera_",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSamplingFunctions",
    "name": "ComputeRenderCaptureCamerasForBox",
    "description": "Compute a set of Render Capture Cameras to capture a scene within the given Box",
    "parameters": [
      {
        "name": "Cameras",
        "type": "TArray_FGeometryScriptRenderCaptureCamera_",
        "optional": false,
        "out": true
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptRenderCaptureCamerasForBoxOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSamplingFunctions",
    "name": "ComputePointSampling",
    "description": "Compute a set of sample points lying on the surface of TargetMesh based on the provided sampling Options. Samples are approximately uniformly distributed, and non-overlapping relative to the provided Options.SamplingRadius, ie the distance between any pair of samples if >= 2*SamplingRadius.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshPointSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Samples",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "TriangleIDs",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSamplingFunctions",
    "name": "ComputeNonUniformPointSampling",
    "description": "Compute a set of sample points lying on the surface of TargetMesh based on the provided sampling Options and NonUniformOptions. The sample points have radii in the range [Options.SamplingRadius, NonUniformOptions.MaxSamplingRadius], and are non-overlapping, ie the distance between two points is always larger than the sum of their respective radii.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMeshPointSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "NonUniformOptions",
        "type": "FGeometryScriptNonUniformPointSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Samples",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "SampleRadii",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "TriangleIDs",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectSelectionBoundaryEdges",
    "description": "Create a new BoundarySelection, for the TargetMesh, of the edges on the boundary of another Selection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "BoundarySelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "bExcludeMeshBoundaryEdges",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshSharpEdges",
    "description": "Create a new Selection, for the TargetMesh, of all 'sharp' edges where the edge's adjacent triangle normals differ by at least MinAngleDeg",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "MinAngleDeg",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsWithPlane",
    "description": "Create a new Mesh Selection of the SelectionType for the TargetMesh by finding all elements on the \"positive\" side of a Plane",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "PlaneOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneNormal",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsInSphere",
    "description": "Create a new Mesh Selection of the SelectionType for the TargetMesh by finding all elements contained in the Sphere.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SphereOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsInsideMesh",
    "description": "Create a new Mesh Selection of the SelectionType for the TargetMesh by finding all elements inside a second SelectionMesh For Triangle and PolyGroup selections the triangle facet normal is used, for Vertex selections the per-vertex averaged normal is used.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionMeshTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "ShellDistance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "WindingThreshold",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsInBox",
    "description": "Create a new Mesh Selection of the SelectionType for the TargetMesh by finding all elements contained in the Box.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsByPolygroup",
    "description": "Create a Selection of the SelectionType that contains all mesh elements referencing triangles with the given PolyGroup ID in the given GroupLayer",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygroupID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsByNormalAngle",
    "description": "Create a new Mesh Selection of the SelectionType for the TargetMesh by finding all elements that have a normal vector that is within an angular deviation threshold from the given Normal. For Triangle and PolyGroup selections the triangle facet normal is used, for Vertex selections the per-vertex averaged normal is used.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "Normal",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxAngleDeg",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshElementsByMaterialID",
    "description": "Create a Selection of the SelectionType that contains all mesh elements referencing triangles with the given Material ID",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "SelectMeshBoundaryEdges",
    "description": "Create a new Selection, for the TargetMesh, of all mesh boundary edges",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "InvertMeshSelection",
    "description": "Invert the Selection on the TargetMesh, ie select what is not currently selected",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NewSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "bOnlyToConnected",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "GetMeshUniqueSelectionInfo",
    "description": "Query information about a Mesh Selection, and get a count of unique selected elements",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": true
      },
      {
        "name": "NumSelected",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "GetMeshSelectionInfo",
    "description": "Query information about a Mesh Selection Note that NumSelected may double count some polygroups and (non-border) edges due to their internal representation Use GetMeshUniqueSelectionInfo for an accurate count of unique mesh elements",
    "parameters": [
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": true
      },
      {
        "name": "NumSelected",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ExpandMeshSelectionToConnected",
    "description": "Expand the Selection on the TargetMesh to connected regions and return the NewSelection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NewSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "ConnectionType",
        "type": "EGeometryScriptTopologyConnectionType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ExpandContractMeshSelection",
    "description": "Grow or Shrink the Selection on the TargetMesh to connected neighbours. For Vertex selections, Expand includes vertices in one-ring of selected vertices, and Contract removes any vertices with a one-ring neighbour that is not selected For Triangle selections, Add/Remove Triangles connected to selected Triangles For PolyGroup selections, Add/Remove PolyGroups connected to selected PolyGroups",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NewSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "Iterations",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bContract",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bOnlyExpandToFaceNeighbours",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "DebugPrintMeshSelection",
    "description": "Print information about the Mesh Selection to the Output Log",
    "parameters": [
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "bDisable",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "CreateSelectAllMeshSelection",
    "description": "Create a Selection of the given SelectionType that contains all the mesh elements of TargetMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertMeshSelectionToIndexList",
    "description": "Convert a Mesh Selection to an Index List",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "ResultListType",
        "type": "EGeometryScriptIndexType",
        "optional": false,
        "out": true
      },
      {
        "name": "ConvertToType",
        "type": "EGeometryScriptIndexType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertMeshSelectionToIndexArray",
    "description": "Convert a Mesh Selection to an Index Array",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertMeshSelection",
    "description": "Convert a Mesh Selection to a different Type (eg Vertices to Triangles, etc) By default, Vertices map to Triangle one-rings, and Triangles to all contained vertices. If bAllowPartialInclusion is disabled, then more restrictive conversions are performed, as follows: For To-Vertices, only include vertices where all one-ring triangles or edges are included in FromSelection. For To-Edges, only include edges where all adjacent triangles or vertices are included in FromSelection For To-Triangles, only include triangles where all tri vertices or edges are included in FromSelection. For To-PolyGroups, only include groups where all group triangles are touched by FromSelection (Note: The To-PolyGroups rule allows vertex and edge selections that miss some vertices or edges, as long as they touch all the polygroup triangles.)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FromSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "ToSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "NewType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "bAllowPartialInclusion",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertIndexSetToMeshSelection",
    "description": "Create a Mesh Selection from the IndexSet.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexSet",
        "type": "TSet_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertIndexListToMeshSelection",
    "description": "Create a Mesh Selection from the Index List. For cases where the IndexList Type does not match the SelectionType, ConvertMeshSelection with bAllowPartialInclusion=true is used to convert.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexList",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "ConvertIndexArrayToMeshSelection",
    "description": "Create a Mesh Selection from the IndexArray.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexArray",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionFunctions",
    "name": "CombineMeshSelections",
    "description": "Combine two Mesh Selections into a new Mesh Selection. The two inputs SelectionA and SelectionB must have the same Type.",
    "parameters": [
      {
        "name": "SelectionA",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionB",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultSelection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "CombineMode",
        "type": "EGeometryScriptCombineSelectionMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionQueryFunctions",
    "name": "GetMeshSelectionBoundingBox",
    "description": "Get the 3D Bounding Box of a Mesh Selection, ie bounding box of vertices contained in the Selection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionBounds",
        "type": "FBox",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsEmpty",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSelectionQueryFunctions",
    "name": "GetMeshSelectionBoundaryLoops",
    "description": "Compute the set of Vertex Loops bordering a Mesh Selection. Both the 3D polylines and lists of vertex indices are returned for each Loop. Note that for a Vertex selection this will function return the border loops around the set of vertex triangle one-rings.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexLoops",
        "type": "TArray_FGeometryScriptIndexList_",
        "optional": false,
        "out": true
      },
      {
        "name": "PathLoops",
        "type": "TArray_FGeometryScriptPolyPath_",
        "optional": false,
        "out": true
      },
      {
        "name": "NumLoops",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundErrors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSimplifyFunctions",
    "name": "ApplySimplifyToVertexCount",
    "description": "Simplifies the mesh until a target vertex count is reached. Behavior can be additionally controlled with the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSimplifyMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSimplifyFunctions",
    "name": "ApplySimplifyToTriangleCount",
    "description": "Simplifies the mesh until a target triangle count is reached. Behavior can be additionally controlled with the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSimplifyMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSimplifyFunctions",
    "name": "ApplySimplifyToTolerance",
    "description": "Simplifies the mesh to a target geometric tolerance. Stops when any further simplification would result in a deviation from the input mesh larger than the tolerance. Behavior can be additionally controlled with the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Tolerance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSimplifyMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSimplifyFunctions",
    "name": "ApplySimplifyToPolygroupTopology",
    "description": "Simplifies the mesh down to the PolyGroup Topology. For example, the high-level faces of the mesh PolyGroups. Another example would be on a default Box-Sphere where simplifying to PolyGroup topology produces a box.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPolygroupSimplifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSimplifyFunctions",
    "name": "ApplySimplifyToPlanar",
    "description": "Simplifies planar areas of the mesh that have more triangles than necessary. Note that it does not change the 3D shape of the mesh. Planar regions are identified by comparison of face normals using a Angle Threshold in the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPlanarSimplifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "SelectMeshElementsInBoxWithBVH",
    "description": "Create Mesh Selection of mesh elements in TargetMesh contained by QueryBox, using QueryBVH to accellerate the computation. Triangles and Edges are selected if Min Element Vertices (clamped to a 1-3 or 1-2 range, for triangles or edges respectively) or more are inside the box. PolyGroups are selected if any of their triangles are inside the box Note that this method cannot select mesh elements that cut through the query box without having any vertices in the query box.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryBox",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSpatialQueryOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": true
      },
      {
        "name": "SelectionType",
        "type": "EGeometryScriptMeshSelectionType",
        "optional": true,
        "out": false
      },
      {
        "name": "MinNumTrianglePoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "ResetBVH",
    "description": "Reset the Bounding Volume Hierarchy (BVH) by clearing all the internal data.",
    "parameters": [
      {
        "name": "ResetBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "RebuildBVHForMesh",
    "description": "Rebuilds the Bounding Volume Hierarchy (BVH) for the mesh in-place, which can reduce memory allocations, compared to building a new BVH.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UpdateBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": true
      },
      {
        "name": "bOnlyIfInvalid",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "IsPointInsideMesh",
    "description": "Tests if a point is inside the mesh using the Fast Winding Number query and data stored in the BVH.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSpatialQueryOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsInside",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptContainmentOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "IsBVHValidForMesh",
    "description": "Checks if the provided Bounding Volume Hierarchy (BVH) can still be used with the Mesh \u2014 it generally returns false if the mesh has been changed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TestBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValid",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "FindNearestRayIntersectionWithMesh",
    "description": "Finds the nearest intersection of a 3D ray with the mesh by using the Query BVH. Note, depending on the Ray Origin and Ray Direction, there is the possibility that the ray might not intersect with the Target Mesh. Should the ray miss, the HitResult.bHit will be false and the Outcome  will be Not Found.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "RayOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RayDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSpatialQueryOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "HitResult",
        "type": "FGeometryScriptRayHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptSearchOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "FindNearestPointOnMesh",
    "description": "Finds the nearest point (Nearest Result) on the Target Mesh to a given 3D point (Query Point) by using the Query BVH. Note NearestResult.bValid will be false if the query failed.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSpatialQueryOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "NearestResult",
        "type": "FGeometryScriptTrianglePoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptSearchOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSpatial",
    "name": "BuildBVHForMesh",
    "description": "Builds a Bounding Volume Hierarchy (BVH) object for a mesh that can be used with multiple spatial queries.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputBVH",
        "type": "FGeometryScriptDynamicMeshBVH",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSubdivideFunctions",
    "name": "ApplyUniformTessellation",
    "description": "Apply Uniform Tessellation to the Target Mesh as controlled by the Tessellation Level and the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TessellationLevel",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSubdivideFunctions",
    "name": "ApplySelectiveTessellation",
    "description": "Selectively Tessellate a Selection of the Target Mesh or possibly the entire mesh as controlled by the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSelectiveTessellateOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TessellationLevel",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PatternType",
        "type": "ESelectiveTessellatePatternType",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshSubdivideFunctions",
    "name": "ApplyPNTessellation",
    "description": "Apply PN Tessellation to the Target Mesh as controlled by the Tessellation Level and the Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPNTessellateOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TessellationLevel",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "TranslatePivotToLocation",
    "description": "Set the Pivot Location for the Mesh. Since the Pivot of a Mesh object is always the point at (0,0,0), this function simply translates the mesh by -PivotLocation.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PivotLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "TranslateMeshSelection",
    "description": "Applies the given Translation to the vertices identified by the Selection of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Translation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "TranslateMesh",
    "description": "Applies the provided Translation to the vertices of a Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Translation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "TransformMeshSelection",
    "description": "Applies the given Transform to the vertices identified by the Selection of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "TransformMesh",
    "description": "Applies the provided Transform to the vertices of a Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bFixOrientationForNegativeScale",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "ScaleMeshSelection",
    "description": "Applies the given Scale transform relative to the Scale Origin to the selection part of the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "ScaleOrigin",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "ScaleMesh",
    "description": "Applies the provided Scale transformation relative to the Scale Origin to the vertices of a Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "ScaleOrigin",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bFixOrientationForNegativeScale",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "RotateMeshSelection",
    "description": "Rotates the selected part of the mesh relative to the specified Rotation Origin.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationOrigin",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshTransformFunctions",
    "name": "RotateMesh",
    "description": "Rotates the mesh relative to the specified Rotation Origin.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationOrigin",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "TranslateMeshUVs",
    "description": "Update all selected UV values in the specified UV Channel by adding the Translation value to each. If the provided Selection is empty, the Translation is applied to the entire UV Channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Translation",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetUVSeamsAlongSelectedEdges",
    "description": "Convert Selection to an Edge selection, and set or remove UV seams along all of the selected edges",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "bInsertSeams",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetNumUVSets",
    "description": "Set the number of UV Channels on the Target Mesh. If not already enabled, this will enable the mesh attributes.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NumUVSets",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshUVsFromPlanarProjection",
    "description": "Scale of PlaneTransform defines world-space dimension that maps to 1 UV dimension",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshUVsFromCylinderProjection",
    "description": "Using Cylinder Projection, update the UVs in the UV Channel for an entire mesh or a subset defined by a non-empty Selection.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CylinderTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "SplitAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshUVsFromBoxProjection",
    "description": "Using Box Projection, update the UVs in the UV Channel for an entire mesh or a subset defined by a non-empty Selection.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BoxTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "MinIslandTriCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshUVElementPosition",
    "description": "Sets the UV position of a specific ElementID in the given UV Set/Channel If the UV Set or Element ID does not exist, bIsValidElementID will be returned as false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewUVPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidElementID",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshTriangleUVs",
    "description": "Sets the UVs of a mesh triangle in the given UV Channel. This function will create new UV elements for each vertex of the triangle, meaning that the triangle will become an isolated UV island.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVs",
        "type": "FGeometryScriptUVTriangle",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "SetMeshTriangleUVElementIDs",
    "description": "Sets the UV Element IDs for a given Triangle in the specified UV Channel, ie the \"UV Triangle\" indices. This function does not create new UVs, the provided UV Elements must already. The UV Triangle can only be set if the resulting topology would be valid, ie the Elements cannot be shared between different base Mesh Vertices, so they must either be unused by any other triangles, or already associated with the same mesh vertex in other UV triangles. If any conditions are not met, bIsValidTriangle will be returned as false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleUVElements",
        "type": "FIntVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidTriangle",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "ScaleMeshUVs",
    "description": "Update all selected UV values in the specified UV Channel by Scale, mathematically the new value is given by (UV - ScaleOrigin) * Scale + ScaleOrigin If the provided Selection is empty, the update is applied to the entire UV Channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ScaleOrigin",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "RotateMeshUVs",
    "description": "Update all the selected UV values in the specified UV Channel by a rotation of Rotation Angle (in degrees) relative to the Rotation Origin. If the provided Selection is empty, the update is applied to the entire UV Channel.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "RotationOrigin",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "RepackMeshUVs",
    "description": "Packs the existing UV islands in the specified UV Channel into standard UV space based on the Repack Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "RepackOptions",
        "type": "FGeometryScriptRepackUVsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "RecomputeMeshUVs",
    "description": "Recomputes UVs in the UV Channel for a Mesh based on different types of well-defined UV islands, such as existing UV islands, PolyGroups, or a subset of the mesh based on a non-empty Selection.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptRecomputeUVsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "LayoutMeshUVs",
    "description": "Packs the existing UV islands in the specified UV Channel into standard UV space based on the Repack Options.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "LayoutOptions",
        "type": "FGeometryScriptLayoutUVsOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "GetMeshUVSizeInfo",
    "description": "Compute information about dimensions and areas for a UV Set of a Mesh, with an optional Mesh Selection",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "MeshArea",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "UVArea",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "MeshBounds",
        "type": "FBox",
        "optional": false,
        "out": true
      },
      {
        "name": "UVBounds",
        "type": "FBox2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundUnsetUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOnlyIncludeValidUVTris",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "GetMeshUVElementPosition",
    "description": "Returns the UV Position for a given UV Element ID in the specified UV Channel. If the UV Set or Element ID does not exist, bIsValidElementID will be returned as false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidElementID",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "GetMeshTriangleUVElementIDs",
    "description": "Returns the UV Element IDs associated with the three vertices of the triangle in the specified UV Channel. If the Triangle does not exist in the mesh or if no UVs are set in the specified UV Channel for the triangle, bHaveValidUVs will be returned as false.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TriangleUVElements",
        "type": "FIntVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bHaveValidUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "GetMeshPerVertexUVs",
    "description": "Get a list of single vertex UVs for each mesh vertex in the TargetMesh, derived from the specified UV Channel. The UV Channel may store multiple UVs for a single vertex (along UV seams) In such cases an arbitrary UV will be stored for that vertex, and bHasSplitUVs will be returned as true",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasSplitUVs",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "CopyUVSet",
    "description": "Copy the data in one UV Channel to another UV Channel on the same Target Mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "FromUVSet",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ToUVSet",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "CopyMeshUVLayerToMesh",
    "description": "Copy the 2D UVs from the given UV Channel in CopyFromMesh to the 3D vertex positions in CopyToUVMesh, with the triangle mesh topology defined by the UV Channel. Generally this \"UV Mesh\" topology will not be the same as the 3D mesh topology. PolyGroup IDs and Material IDs are preserved in the UVMesh. 2D UV Positions are copied to 3D as (X, Y, 0) CopyMeshToMeshUVChannel will copy the 3D UV Mesh back to the UV Channel. This pair of functions can then be used to implement UV generation/editing via other mesh functions.",
    "parameters": [
      {
        "name": "CopyFromMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToUVMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToUVMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "bInvalidTopology",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "CopyMeshToMeshUVLayer",
    "description": "Transfer the 3D vertex positions and triangles of CopyFromUVMesh to the given UV Channel identified by ToUVChannel of CopyToMesh. 3D positions (X,Y,Z) will be copied as UV positions (X,Y), ie Z is ignored. bOnlyUVPositions controls whether only UV positions will be updated, or if the UV topology will be fully replaced. When false, CopyFromUVMesh must currently have a MaxVertexID <= that of the UV Channel MaxElementID When true, CopyFromUVMesh must currently have a MaxTriangleID <= that of CopyToMesh",
    "parameters": [
      {
        "name": "CopyFromUVMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToUVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CopyToMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "CopyToMeshOut",
        "type": "UDynamicMesh",
        "optional": false,
        "out": true
      },
      {
        "name": "bFoundTopologyErrors",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bOnlyUVPositions",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "ComputeMeshLocalUVParam",
    "description": "Compute local UV parameterization on TargetMesh vertices around the given CenterPoint / Triangle. This method uses a Discrete Exponential Map parameterization, which unwraps the mesh locally based on geodesic distances and angles. The CenterPoint will have UV value (0,0), and the computed vertex UVs will be such that Length(UV) == geodesic distance.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CenterPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "CenterPointTriangleID",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIDs",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "VertexUVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseInterpolatedNormal",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "TangentYDirection",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "UVRotationDeg",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "AutoGenerateXAtlasMeshUVs",
    "description": "Computes new UVs for the specified UV Channel using XAtlas, and optionally packs.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptXAtlasOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "AutoGeneratePatchBuilderMeshUVs",
    "description": "Computes new UVs for the specified UV Channel using PatchBuilder method in the Options, and optionally packs.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPatchBuilderOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "ApplyTexelDensityUVScaling",
    "description": "Rescales UVs in the UV Channel for a Mesh to match a specified texel density, described by the options passed in. Supports processing on a subset of UVs via a non-empty Selection.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptUVTexelDensityOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshUVFunctions",
    "name": "AddUVElementToMesh",
    "description": "Adds a new UV Element to the specified UV Channel of the Mesh and returns a new UV Element ID.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "UVSetIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NewUVPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "NewUVElementID",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidUVSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bDeferChangeNotifications",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "SetMeshSelectionVertexColor",
    "description": "Set the colors in the TargetMesh VertexColor Overlay identified by the Selection to a constant value. For a Vertex Selection, each existing VertexColor Overlay Element for the vertex is updated. For a Triangle or PolyGroup Selection, all Overlay Elements in the identified Triangles are updated.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Flags",
        "type": "FGeometryScriptColorFlags",
        "optional": false,
        "out": false
      },
      {
        "name": "bCreateColorSeam",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "SetMeshPerVertexColors",
    "description": "Set all vertex colors in the TargetMesh VertexColor Overlay to the specified per-vertex colors",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "SetMeshConstantVertexColor",
    "description": "Set all vertex colors (optionally specific channels) in the TargetMesh VertexColor Overlay to a constant value",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Color",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Flags",
        "type": "FGeometryScriptColorFlags",
        "optional": false,
        "out": false
      },
      {
        "name": "bClearExisting",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "GetMeshPerVertexColors",
    "description": "Get a list of single vertex colors for each mesh vertex in the TargetMesh, derived from the VertexColor Overlay. The VertexColor Overlay may store multiple colors for a single vertex (ie different colors for that vertex on different triangles) In such cases the colors can either be averaged, or the last color seen will be used, depending on the bBlendSplitVertexValues parameter.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsValidColorSet",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasVertexIDGaps",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bBlendSplitVertexValues",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "ConvertMeshVertexColorsSRGBToLinear",
    "description": "Apply a SRGB to Linear color transformation on all vertex colors on the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "ConvertMeshVertexColorsLinearToSRGB",
    "description": "Apply a Linear to SRGB color transformation on all vertex colors on the mesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVertexColorFunctions",
    "name": "BlurMeshVertexColors",
    "description": "Blur the color attribute of the mesh. If the mesh has no color attribute, the function returns the mesh unchanged.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Selection",
        "type": "FGeometryScriptMeshSelection",
        "optional": false,
        "out": false
      },
      {
        "name": "NumIterations",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Strength",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BlurMode",
        "type": "EGeometryScriptBlurColorMode",
        "optional": true,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptBlurMeshVertexColorsOptions",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVoxelFunctions",
    "name": "ApplyMeshSolidify",
    "description": "Replaces the mesh with a voxelized-and-meshed approximation (VoxWrap operation).",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptSolidifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_MeshVoxelFunctions",
    "name": "ApplyMeshMorphology",
    "description": "Replaces the mesh with an SDF-based offset mesh approximation.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptMorphologyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "UnflattenPoints",
    "description": "Convert an array of points from 2D to 3D, by transforming out of the given ReferenceFrame, with the given Height for the non-flat axis (default Z).",
    "parameters": [
      {
        "name": "PointsIn2D",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "PointsIn3D",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPointFlatteningOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Height",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "TransformsToPoints",
    "description": "Create an array of the positions of the input Transforms",
    "parameters": [
      {
        "name": "Transforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "OffsetTransforms",
    "description": "Offset the location of all Transforms by Offset in the given Direction, either locally in the space of the transform or in world space. For example, this can offset mesh surface samples along the surface normal direction.",
    "parameters": [
      {
        "name": "Transforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "Space",
        "type": "EGeometryScriptCoordinateSpace",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "MakeBoundingBoxFromPoints",
    "description": "Make a Axis Aligned Bounding Box that bounds the given Points, optionally expanded by some additional amount on each side",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpandBy",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "KMeansClusterToIDs",
    "description": "Use K-Means clustering to cluster the given points into a target number of clusters, and return an array with a cluster index per point.",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPointClusteringOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "PointClusterIndices",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "KMeansClusterToArrays",
    "description": "Use K-Means clustering to cluster the given points into a target number of clusters, and return the clusters as an array of lists of point indices.",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPointClusteringOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "ClusterIDToLists",
        "type": "TArray_FGeometryScriptIndexList_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "GetPointsFromIndexList",
    "description": "Create an array of the subset of AllPoints indicated by the Indices list",
    "parameters": [
      {
        "name": "AllPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Indices",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedPoints",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "FlattenPoints",
    "description": "Convert an array of points from 3D to 2D, by transforming into the given ReferenceFrame and taking the X,Y coordinates Note that to transform into the ReferenceFrame, we apply the inverse of the ReferenceFrame's transform.",
    "parameters": [
      {
        "name": "PointsIn3D",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "PointsIn2D",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPointFlatteningOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PointSetSamplingFunctions",
    "name": "DownsamplePoints",
    "description": "Find a subset of the given Points of a specified size. Can optionally specify a priorty weighting and/or request uniform spacing for the downsampled points. Note: Ordering of the result will balance: (1) if weights are provided, higher weight points come earlier and (2) if uniform spacing is requested, points will be ordered to have an octree-style coverage -- so the first 8 points will cover the 8 octants (where samples are available) and the subsequent points will progressively fill in the space",
    "parameters": [
      {
        "name": "Points",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptPointPriorityOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "DownsampledIndices",
        "type": "FGeometryScriptIndexList",
        "optional": false,
        "out": true
      },
      {
        "name": "KeepNumPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsUnion",
    "description": "Compute union of all polygons in Polygon List. Also resolves self-intersections within each polygon.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsOffsets",
    "description": "Apply two offsets in sequence to a list of closed polygons",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptPolygonOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "FirstOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "SecondOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsOffset",
    "description": "Apply a single offset to a list of closed polygons",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptPolygonOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsMorphologyOpen",
    "description": "Apply a morphological \"open\" operator to a list of closed polygons -- first offsetting by -Offset, then by +Offset. If Offset is negative, this will instead function as a 'Close' operation",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptPolygonOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsMorphologyClose",
    "description": "Apply a morphological \"close\" operator to a list of closed polygons -- first offsetting by +Offset, then by -Offset. If Offset is negative, this will instead function as an 'Open' operation",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptPolygonOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsIntersection",
    "description": "Compute intersection of Polygon List and Polygons to Intersect",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonsToIntersect",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsExclusiveOr",
    "description": "Compute exclusive or of Polygon List and Polygons to Exclusive Or",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonsToExclusiveOr",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "PolygonsDifference",
    "description": "Compute difference of Polygon List and Polygons to Subtract",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonsToSubtract",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetSimplePolygon",
    "description": "Returns a specified Simple Polygon from a Polygon List -- either the outer polygon, if HoleIndex is -1, or specified inner hole. Polygon will be empty for invalid Polygon or Hole indices.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidIndices",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HoleIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimplePolygon"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonVertices",
    "description": "Returns the vertices of a Polygon -- either of the outer polygon, if HoleIndex is -1, or specified inner hole. OutVertices will be empty for invalid Polygon or Hole indices.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "OutVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "bValidIndices",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HoleIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonVertexCount",
    "description": "Returns the number of vertices in a Polygon's outer shape, if HoleIndex is -1, or in the specified inner hole. Returns 0 for invalid Polygon or Hole indices.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidIndices",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HoleIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonVertex",
    "description": "Returns the specified vertex of a Polygon -- either of the outer polygon, if HoleIndex is -1, or specified inner hole. Vertex will be the zero vector for invalid Polygon or Hole indices, or if the polygon is empty. VertexIndex will loop.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidVertex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "HoleIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonListBounds",
    "description": "Returns the bounding box of a Polygon",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox2D"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonListArea",
    "description": "Returns the area enclosed by a Polygon",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonHoleCount",
    "description": "Returns the number of holes in a Polygon. Returns zero for an invalid PolygonIndex.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonCount",
    "description": "Returns the number of polygons in the Polygon List",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonBounds",
    "description": "Returns the bounding box of a Polygon. Returns an empty, invalid box for an invalid PolygonIndex.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox2D"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "GetPolygonArea",
    "description": "Returns the area enclosed by a Polygon. Returns zero for an invalid PolygonIndex.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "CreatePolygonsFromPathOffset",
    "description": "Apply an offset to a single open 2D path, generating closed polygons as a result",
    "parameters": [
      {
        "name": "Path",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptOpenPathOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "CreatePolygonsFromOpenPolyPathsOffset",
    "description": "Apply an offset to a set of open 2D PolyPaths, generating closed polygons as a result",
    "parameters": [
      {
        "name": "PolyPaths",
        "type": "TArray_FGeometryScriptPolyPath_",
        "optional": false,
        "out": false
      },
      {
        "name": "OffsetOptions",
        "type": "FGeometryScriptOpenPathOffsetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Offset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bOperationSuccess",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyInputOnFailure",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "CreatePolygonListFromSinglePolygon",
    "description": "Create a Polygon List of a single Polygon, with optional holes",
    "parameters": [
      {
        "name": "OuterPolygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      },
      {
        "name": "HolePolygons",
        "type": "TArray_FGeometryScriptSimplePolygon_",
        "optional": false,
        "out": false
      },
      {
        "name": "bFixHoleOrientations",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "CreatePolygonListFromSimplePolygons",
    "description": "Create a Polygon List from an array of Simple Polygons",
    "parameters": [
      {
        "name": "OuterPolygons",
        "type": "TArray_FGeometryScriptSimplePolygon_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptGeneralPolygonList"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "AppendPolygonList",
    "description": "Append the polygons in 'Polygons to Append' to Polygon List",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": true
      },
      {
        "name": "PolygonsToAppend",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolygonListFunctions",
    "name": "AddPolygonToList",
    "description": "Add Polygon to a Polygon List, with optional holes. Returns index of the added polygon.",
    "parameters": [
      {
        "name": "PolygonList",
        "type": "FGeometryScriptGeneralPolygonList",
        "optional": false,
        "out": true
      },
      {
        "name": "OuterPolygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      },
      {
        "name": "HolePolygons",
        "type": "TArray_FGeometryScriptSimplePolygon_",
        "optional": false,
        "out": false
      },
      {
        "name": "bFixHoleOrientations",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "SampleSplineToTransforms",
    "description": "Sample a USplineComponent into a list of FTransforms, based on the given SamplingOptions.",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Frames",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": true
      },
      {
        "name": "FrameTimes",
        "type": "TArray_number_",
        "optional": false,
        "out": true
      },
      {
        "name": "SamplingOptions",
        "type": "FGeometryScriptSplineSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeScale",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetPolyPathVertex",
    "description": "Returns the 3D position of the requested vertex in the PolyPath. If the Index does not correspond to a vertex in the PolyPath, a Zero Vector (0,0,0) will be returned.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetPolyPathTangent",
    "description": "Returns the local tangent vector of the PolyPath at the specified vertex index. If the Index does not correspond to a vertex in the PolyPath, a Zero Vector (0,0,0) will be returned.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsValidIndex",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetPolyPathNumVertices",
    "description": "Returns the number of vertices in the the PolyPath.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetPolyPathLastIndex",
    "description": "Returns the index of the last vertex in the PolyPath.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetPolyPathArcLength",
    "description": "Returns the length of the PolyPath.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "GetNearestVertexIndex",
    "description": "Find the index of the vertex closest to a given point.  Returns -1 if the PolyPath has no vertices.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "FlattenTo2DOnAxis",
    "description": "Create a 2D, flattened copy of the path by dropping the given axis, and using the other two coordinates as the new X, Y coordinates.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "DropAxis",
        "type": "EGeometryScriptAxis",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "CreateCirclePath3D",
    "description": "Create a closed circle around the origin on the XY plane, then transformed by Transform. By our convention for closed paths, the end vertex is *not* a duplicate of the start vertex.",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumPoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "CreateCirclePath2D",
    "description": "Create a closed circle on the XY plane around the given Center. By our convention for closed paths, the end vertex is *not* a duplicate of the start vertex.",
    "parameters": [
      {
        "name": "Center",
        "type": "FVector2D",
        "optional": true,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumPoints",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "CreateArcPath3D",
    "description": "Create an open arc around the origin on the XY plane, then transformed by Transform. As it is an open path, the end vertex exactly hits the target EndAngle (so will be positioned on the start vertex if the end aligns to the start)",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StartAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndAngle",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "CreateArcPath2D",
    "description": "Create an open arc on the XY plane around the given Center. As it is an open path, the end vertex exactly hits the target EndAngle (so will be positioned on the start vertex if the end aligns to the start)",
    "parameters": [
      {
        "name": "Center",
        "type": "FVector2D",
        "optional": true,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "StartAngle",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndAngle",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "ConvertSplineToPolyPath",
    "description": "Sample positions from a USplineComponent into a PolyPath, based on the given SamplingOptions",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": true
      },
      {
        "name": "SamplingOptions",
        "type": "FGeometryScriptSplineSamplingOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "ConvertPolyPathToArrayOfVector2D",
    "description": "Creates an array of 2D Vectors with the PolyPath vertex locations projected onto the XY plane.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexArray",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "ConvertPolyPathToArray",
    "description": "Populates an array of 3D vectors with the PolyPath vertex locations.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexArray",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "ConvertArrayToPolyPath",
    "description": "Creates a PolyPath from an array of 3D position vectors.",
    "parameters": [
      {
        "name": "VertexArray",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "ConvertArrayOfVector2DToPolyPath",
    "description": "Creates a PolyPath from an array of 2D position vectors. The Z-coordinate of the corresponding PolyPath vertices will be zero.",
    "parameters": [
      {
        "name": "VertexArray",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "Conv_GeometryScriptPolyPathToArrayOfVector2D",
    "description": "Returns an array of 2D Vectors with the PolyPath vertex locations projected onto the XY plane.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "Conv_GeometryScriptPolyPathToArray",
    "description": "Returns an array of 3D vectors with the PolyPath vertex locations.",
    "parameters": [
      {
        "name": "PolyPath",
        "type": "FGeometryScriptPolyPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "Conv_ArrayToGeometryScriptPolyPath",
    "description": "Returns a PolyPath created from an array of 3D position vectors.",
    "parameters": [
      {
        "name": "PathVertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_PolyPathFunctions",
    "name": "Conv_ArrayOfVector2DToGeometryScriptPolyPath",
    "description": "Returns a PolyPath created from an array of 2D position vectors. The Z-coordinate of the corresponding PolyPath vertices will be zero.",
    "parameters": [
      {
        "name": "PathVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptPolyPath"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "MakeRayFromPoints",
    "description": "Create a Ray from two points, placing the Origin at A and the Direction as Normalize(B-A)",
    "parameters": [
      {
        "name": "A",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRay"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "MakeRayFromPointDirection",
    "description": "Create a Ray from an Origin and Direction, with optionally non-normalized Direction",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Direction",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bDirectionIsNormalized",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRay"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetTransformedRay",
    "description": "Apply the given Transform to the given Ray, or optionally the Transform Inverse, and return the new transformed Ray",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bInvert",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRay"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayStartEnd",
    "description": "Get two points along the ray.",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "StartDistance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EndDistance",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "StartPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "EndPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRaySphereIntersection",
    "description": "Check if the Ray intersects a Sphere defined by the SphereCenter and SphereRadius. This function returns two intersection distances (ray parameters). If the ray grazes the sphere, both distances will be the same, and if it misses, they will be MAX_FLOAT. Use the function GetRayPoint to convert the distances to points on the ray/sphere.",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SphereRadius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance1",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Distance2",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRaySegmentClosestPoint",
    "description": "Compute the pair of closest points on a 3D Ray and Line Segment The Line Segment is defined by its two Endpoints.",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "SegStartPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "SegEndPoint",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RayParameter",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RayPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "SegPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayPointDistance",
    "description": "Get the distance from Point to the closest point on the Ray",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayPoint",
    "description": "Get a Point at the given Distance along the Ray (Origin + Distance*Direction)",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayPlaneIntersection",
    "description": "Find the intersection of a Ray and a Plane",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Plane",
        "type": "FPlane",
        "optional": false,
        "out": false
      },
      {
        "name": "HitDistance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayParameter",
    "description": "Project the given Point onto the closest point along the Ray, and return the Ray Parameter/Distance at that Point",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayLineClosestPoint",
    "description": "Compute the pair of closest points on a 3D Ray and Line. The Line is defined by an Origin and Direction (ie same as a Ray) but extends infinitely in both directions.",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "LineOrigin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "LineDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RayParameter",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RayPoint",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "LineParameter",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "LinePoint",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayClosestPoint",
    "description": "Get the closest point on the Ray to the given Point",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_RayFunctions",
    "name": "GetRayBoxIntersection",
    "description": "Find the intersection of a Ray and a Box",
    "parameters": [
      {
        "name": "Ray",
        "type": "FRay",
        "optional": false,
        "out": false
      },
      {
        "name": "Box",
        "type": "FBox",
        "optional": false,
        "out": false
      },
      {
        "name": "HitDistance",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_RemeshingFunctions",
    "name": "ApplyUniformRemesh",
    "description": "Apply Uniform Remeshing to the TargetMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "RemeshOptions",
        "type": "FGeometryScriptRemeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "UniformOptions",
        "type": "FGeometryScriptUniformRemeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_SceneUtilityFunctions",
    "name": "SetComponentMaterialList",
    "description": "Configure the Material set on a PrimitiveComponent, by repeatedly calling SetMaterial. This is a simple utility function and it's behavior will depend on the specifics of the Component.",
    "parameters": [
      {
        "name": "Component",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_SceneUtilityFunctions",
    "name": "DetermineMeshOcclusion",
    "description": "Determine which meshes are entirely hidden by other meshes in the set, when viewed from outside.",
    "parameters": [
      {
        "name": "SourceMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceMeshTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMeshIsHidden",
        "type": "TArray_boolean_",
        "optional": false,
        "out": true
      },
      {
        "name": "TransparentMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "TransparentMeshTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTransparentMeshIsHidden",
        "type": "TArray_boolean_",
        "optional": false,
        "out": true
      },
      {
        "name": "OccludeMeshes",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "OccludeMeshTransforms",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      },
      {
        "name": "OcclusionOptions",
        "type": "FGeometryScriptDetermineMeshOcclusionOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_SceneUtilityFunctions",
    "name": "CreateDynamicMeshPool",
    "description": "Create a new UDynamicMeshPool object. Caller needs to create a UProperty reference to the returned object, or it will be garbage-collected.",
    "parameters": [],
    "returnType": "UDynamicMeshPool"
  },
  {
    "class": "UGeometryScriptLibrary_SceneUtilityFunctions",
    "name": "CopyMeshFromComponent",
    "description": "Copy the mesh from a given Component to a Dynamic Mesh. StaticMeshComponent, DynamicMeshCompnent, and BrushComponent are supported. This function offers minimal control over the copying, if more control is needed for Static Meshes, use CopyMeshFromStaticMesh.",
    "parameters": [
      {
        "name": "Component",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyMeshFromComponentOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "bTransformToWorld",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalToWorld",
        "type": "FTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_SceneUtilityFunctions",
    "name": "CopyCollisionMeshesFromObject",
    "description": "Extract the Collision Geometry from FromObject and copy/approximate it with meshes stored in ToDynamicMesh. For Simple Collision, FromObject can be a StaticMesh Asset or any PrimitiveComponent For Complex Collision, FromObject can be a StaticMesh Asset, StaticMeshComponent, or DynamicMeshComponent",
    "parameters": [
      {
        "name": "FromObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bTransformToWorld",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalToWorld",
        "type": "FTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "bUseComplexCollision",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "SphereResolution",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "SetPolygonVertex",
    "description": "Set the specified vertex of a Simple Polygon. VertexIndex loops around, so e.g., -1 gives the last vertex in the polygon. Does nothing if Polygon has no vertices.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": true
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bPolygonIsEmpty",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonVertexCount",
    "description": "Returns the number of vertices in a Simple Polygon",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonVertex",
    "description": "Returns the specified vertex of a Simple Polygon. VertexIndex loops around, so e.g., -1 gives the last vertex in the polygon. If Polygon has no vertices, returns the zero vector.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bPolygonIsEmpty",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonTangent",
    "description": "Returns a vertex's tangent of a Simple Polygon. VertexIndex loops around, so e.g., -1 gives the tangent of the last vertex in the polygon. If Polygon has no vertices, returns the zero vector.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bPolygonIsEmpty",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonBounds",
    "description": "Returns the bounding box of a Simple Polygon",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox2D"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonArea",
    "description": "Returns the area enclosed by a Simple Polygon",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "GetPolygonArcLength",
    "description": "Returns the arc length of a Simple Polygon",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "ConvertSplineToPolygon",
    "description": "Sample positions from a USplineComponent into a Simple Polyon, based on the given SamplingOptions",
    "parameters": [
      {
        "name": "Spline",
        "type": "USplineComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": true
      },
      {
        "name": "SamplingOptions",
        "type": "FGeometryScriptSplineSamplingOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "DropAxis",
        "type": "EGeometryScriptAxis",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "Conv_GeometryScriptSimplePolygonToArrayOfVector2D",
    "description": "Returns an array of 2D Vectors with the Polygon vertex locations.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "Conv_GeometryScriptSimplePolygonToArray",
    "description": "Returns an array of 3D vectors with the Polygon vertex locations, with Z coordinate set to zero.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "Conv_ArrayToGeometryScriptSimplePolygon",
    "description": "Returns a Polygon created from an array of 3D position vectors, ignoring the Z coordinate.",
    "parameters": [
      {
        "name": "PathVertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimplePolygon"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "Conv_ArrayOfVector2DToGeometryScriptSimplePolygon",
    "description": "Returns a Polygon created from an array of 2D position vectors.",
    "parameters": [
      {
        "name": "PathVertices",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptSimplePolygon"
  },
  {
    "class": "UGeometryScriptLibrary_SimplePolygonFunctions",
    "name": "AddPolygonVertex",
    "description": "Set the specified vertex of a Simple Polygon. Returns the index of the added vertex.",
    "parameters": [
      {
        "name": "Polygon",
        "type": "FGeometryScriptSimplePolygon",
        "optional": false,
        "out": true
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "GetSectionMaterialListFromStaticMesh",
    "description": "Although the class name indicates StaticMeshFunctions, that was a naming mistake that is difficult to correct. This class is intended to serve as a generic asset utils function library. The naming issue is only visible at the C++ level. It is not visible in Python or BP. Extracts the Material List and corresponding Material Indices from the specified LOD of the Static Mesh Asset. The MaterialList is sorted by Section, so if CopyMeshToStaticMesh was used to create a DynamicMesh with bUseSectionMaterials=true, then the returned MaterialList here will correspond to the MaterialIDs in that DynamicMesh (as each Static Mesh Section becomes a MaterialID, in-order). So, the returned MaterialList can be passed directly to (eg) a DynamicMeshComponent. Note that the LOD Index in RequestedLOD will be silently clamped to the available number of LODs (SourceModel or RenderData)",
    "parameters": [
      {
        "name": "FromStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialIndex",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "GetNumStaticMeshLODsOfType",
    "description": "Determine the number of available LODs of the requested LODType in a Static Mesh Asset",
    "parameters": [
      {
        "name": "StaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODType",
        "type": "EGeometryScriptLODType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "GetMaterialListFromStaticMesh",
    "description": "Get the asset materials from the static mesh asset. These will match the DynamicMesh material if CopyMeshFromStaticMesh was used to create a DynamicMesh with bUseSectionMaterials=false",
    "parameters": [
      {
        "name": "FromStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "GetMaterialListFromSkeletalMesh",
    "description": "Get the asset materials from the skeletal mesh asset. Note: For LOD-specific materials, use GetLODMaterialListFromSkeletalMesh instead.",
    "parameters": [
      {
        "name": "FromSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "GetLODMaterialListFromSkeletalMesh",
    "description": "Extracts the Material List and corresponding Material Indices from the specified LOD of the Skeletal Mesh Asset. If Copy Mesh To Skeletal Mesh was used to create a Dynamic Mesh, then the returned Material List can be passed directly to a Dynamic Mesh Component. Note that the LOD Index in RequestedLOD will be silently clamped to the available number of LODs",
    "parameters": [
      {
        "name": "FromSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialIndex",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopySkinWeightProfileToSkeletalMesh",
    "description": "Add a Dynamic Mesh skin weight profile to a Skeletal Mesh Asset.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopySkinWeightProfileToAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLOD",
        "type": "FGeometryScriptMeshWriteLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMorphTargetToSkeletalMesh",
    "description": "Add a Dynamic Mesh morph target to a Skeletal Mesh Asset.",
    "parameters": [
      {
        "name": "FromMorphTarget",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MorphTargetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyMorphTargetToAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLOD",
        "type": "FGeometryScriptMeshWriteLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMeshToStaticMesh",
    "description": "Updates a Static Mesh Asset with new geometry converted from a Dynamic Mesh",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyMeshToAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLOD",
        "type": "FGeometryScriptMeshWriteLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "bUseSectionMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMeshToSkeletalMesh",
    "description": "Updates a Skeletal Mesh Asset with new geometry and bone weights data from a Dynamic Mesh.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCopyMeshToAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetLOD",
        "type": "FGeometryScriptMeshWriteLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMeshFromStaticMeshV2",
    "description": "Extracts a Dynamic Mesh from a Static Mesh Asset. Note that the LOD Index in RequestedLOD will be silently clamped to the available number of LODs (SourceModel or RenderData)",
    "parameters": [
      {
        "name": "FromStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetOptions",
        "type": "FGeometryScriptCopyMeshFromAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "bUseSectionMaterials",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMeshFromStaticMesh",
    "description": "Extracts a Dynamic Mesh from a Static Mesh Asset, using section indices for the material IDs -- use GetSectionMaterialListFromStaticMesh to get the corresponding materials. Note that the LOD Index in RequestedLOD will be silently clamped to the available number of LODs (SourceModel or RenderData)",
    "parameters": [
      {
        "name": "FromStaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetOptions",
        "type": "FGeometryScriptCopyMeshFromAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CopyMeshFromSkeletalMesh",
    "description": "Extracts a Dynamic Mesh from a Skeletal Mesh Asset.",
    "parameters": [
      {
        "name": "FromSkeletalMeshAsset",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ToDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetOptions",
        "type": "FGeometryScriptCopyMeshFromAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "ConvertMaterialMapToMaterialList",
    "description": "Converts material map to a material list and a slot names list. Null materials will be kept in the list, and the list will have the same number of elements as the map.",
    "parameters": [
      {
        "name": "MaterialMap",
        "type": "TMap_string__UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": true
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "ConvertMaterialListToMaterialMap",
    "description": "Converts material list and slot names list to material map, which is the format expected by CreateNewSkeletalMeshAssetFromMesh. Material List and Material Slot Names should have the same length. However, if there are fewer slot names than materials, slot names will be auto-generated (as '[Name of material]_[Index]', or 'Material_[Index]' for null materials)",
    "parameters": [
      {
        "name": "MaterialList",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialSlotNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__UMaterialInterface_"
  },
  {
    "class": "UGeometryScriptLibrary_StaticMeshFunctions",
    "name": "CheckStaticMeshHasAvailableLOD",
    "description": "Check if a Static Mesh Asset has the RequestedLOD available, ie if CopyMeshFromStaticMesh will be able to succeed for the given LODType and LODIndex.",
    "parameters": [
      {
        "name": "StaticMeshAsset",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "RequestedLOD",
        "type": "FGeometryScriptMeshReadLOD",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptSearchOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_TextureMapFunctions",
    "name": "SampleTextureRenderTarget2DAtUVPositions",
    "description": "Sample the the given TextureMap at the list of UV positions and return the color at each position in ColorList output. This function fetches GPU data before sampling so, depending on your application, it can be inefficient and slow!",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      },
      {
        "name": "SampleOptions",
        "type": "FGeometryScriptSampleTextureOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_TextureMapFunctions",
    "name": "SampleTexture2DAtUVPositions",
    "description": "Samples the given TextureMap at the list of UV positions and returns the color at each position in ColorList output.",
    "parameters": [
      {
        "name": "UVList",
        "type": "FGeometryScriptUVList",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "SampleOptions",
        "type": "FGeometryScriptSampleTextureOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorList",
        "type": "FGeometryScriptColorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_TransformFunctions",
    "name": "MakeTransformFromZAxis",
    "description": "Create a Transform at the given Location, with the ZAxis vector as the Z axis of the Transform.",
    "parameters": [
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ZAxis",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UGeometryScriptLibrary_TransformFunctions",
    "name": "MakeTransformFromAxes",
    "description": "Create a Transform at the given Location, with the ZAxis vector as the Z axis of the Transform, and the X or Y axis oriented to the Tangent vector, based on the bTangentIsX parameter.",
    "parameters": [
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ZAxis",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "TangentAxis",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bTangentIsX",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UGeometryScriptLibrary_TransformFunctions",
    "name": "GetTransformAxisVector",
    "description": "Get the Vector for the direction of the X/Y/Z axis of the Transform, ie the Vector resulting from transforming the unit direction vectors (1,0,0) / etc",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EGeometryScriptAxis",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UGeometryScriptLibrary_TransformFunctions",
    "name": "GetTransformAxisRay",
    "description": "Get the Ray at the Transform Location aligned with the direction of the X/Y/Z axis of the Transform, ie the Direction Vector resulting from transforming the unit direction vectors (1,0,0) / etc",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EGeometryScriptAxis",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRay"
  },
  {
    "class": "UGeometryScriptLibrary_TransformFunctions",
    "name": "GetTransformAxisPlane",
    "description": "Get the Plane at the Transform Location with the Plane Normal aligned with the direction of the X/Y/Z axis of the Transform, ie the Direction Vector resulting from transforming the unit direction vectors (1,0,0) / etc",
    "parameters": [
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Axis",
        "type": "EGeometryScriptAxis",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FPlane"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorTransformInPlace",
    "description": "Transform each vector in VectorList, and store in VectorList.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bAsPosition",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorToScalar",
    "description": "Convert each Vector in VectorList to a Scalar by computing (ConstantX*Vector.X + ConstantY*Vector.Y + ConstantZ*Vector.Z), and return in a new ScalarList. This can be used to extract the X/Y/Z values from a Vector, or other component-wise math",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantX",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantY",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantZ",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorPlaneProjectInPlace",
    "description": "Project each vector in VectorList to the given Plane, and store in VectorList.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Plane",
        "type": "FPlane",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorNormalizeInPlace",
    "description": "Normalize each vector in VectorList, and store in VectorList. If a vector is degenerate, set the normal to the SetOnFailure vector.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "SetOnFailure",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorLength",
    "description": "Compute the length/magnitude of each vector in VectorListA and return in new ScalarList. Note that SquaredLength can be computed using VectorDot(A,A).",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorInverseTransformInPlace",
    "description": "Inverse transform each vector in VectorList, and store in VectorList.",
    "parameters": [
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "bAsPosition",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorDot",
    "description": "Compute the dot-product between each pair of vectors in VectorListA and VectorListB and return in new ScalarList",
    "parameters": [
      {
        "name": "VectorListA",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorListB",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorCross",
    "description": "Compute the cross-product between each pair of vectors in VectorListA and VectorListB and return in new VectorList",
    "parameters": [
      {
        "name": "VectorListA",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorListB",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptVectorList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorBlendInPlace",
    "description": "Compute (ConstantA * A) + (ConstantB * B) for each pair of vectors in VectorListA and VectorListB, and store in VectorListB By default (constants = 1) this just adds the two vectors. Set ConstantB = -1 to subtract B from A. Can also be used to Linear Interpolate, by setting ConstantB = (1-ConstantA)",
    "parameters": [
      {
        "name": "VectorListA",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorListB",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "ConstantA",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantB",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "VectorBlend",
    "description": "Compute (ConstantA * A) + (ConstantB * B) for each pair of vectors in VectorListA and VectorListB and return in new VectorList. By default (constants = 1) this just adds the two vectors. Set ConstantB = -1 to subtract B from A. Can also be used to Linear Interpolate, by setting ConstantB = (1-ConstantA)",
    "parameters": [
      {
        "name": "VectorListA",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorListB",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantA",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantB",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptVectorList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarVectorMultiplyInPlace",
    "description": "Compute (ScalarMultiplier * Scalar * Vector) for each scalar/vector pair in the two input lists, and store in the input VectorList",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      },
      {
        "name": "ScalarMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarVectorMultiply",
    "description": "Compute (ScalarMultiplier * Scalar * Vector) for each scalar/vector pair in the two input lists, and return in a new VectorList.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptVectorList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarMultiplyInPlace",
    "description": "Compute (ConstantMultiplier * A * B)  where A and B are the corresponding elements from ScalarListA and ScalarListB accordingly, and store the result in ScalarListA. If ScalarListA and ScalarListB have different lengths, the computation will be skipped.",
    "parameters": [
      {
        "name": "ScalarListA",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarListB",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "ConstantMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarMultiply",
    "description": "Returns a Scalar List constructed with each element is the product (ConstantMultiplier * A * B) where A and B are the corresponding elements from ScalarListA and ScalarListB accordingly. If ScalarListA and ScalarListB have different lengths, no operation will be performed and an empty Scalar List will be returned.",
    "parameters": [
      {
        "name": "ScalarListA",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarListB",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarInvertInPlace",
    "description": "Compute (Numerator / Scalar) for each element of ScalarList and store in input ScalarList If Abs(Scalar) < Epsilon, set to SetOnFailure value.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "Numerator",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SetOnFailure",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Epsilon",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarInvert",
    "description": "Compute (Numerator / Scalar) for each element of ScalarList and return in a new ScalarList. If Abs(Scalar) < Epsilon, set to SetOnFailure value.",
    "parameters": [
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "Numerator",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "SetOnFailure",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Epsilon",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarBlendInPlace",
    "description": "Compute (ConstantA * A) + (ConstantB * B) for each pair of values in ScalarListA and ScalarListB and return in ScalarListB. By default (constants = 1) this just adds the two values. Set ConstantB = -1 to subtract B from A. Can also be used to Linear Interpolate, by setting ConstantB = (1-ConstantA)",
    "parameters": [
      {
        "name": "ScalarListA",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarListB",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      },
      {
        "name": "ConstantA",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantB",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ScalarBlend",
    "description": "Compute (ConstantA * A) + (ConstantB * B) for each pair of values in ScalarListA and ScalarListB and return in new ScalarList. By default (constants = 1) this just adds the two values. Set ConstantB = -1 to subtract B from A. Can also be used to Linear Interpolate, by setting ConstantB = (1-ConstantA)",
    "parameters": [
      {
        "name": "ScalarListA",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarListB",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      },
      {
        "name": "ConstantA",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "ConstantB",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ConstantVectorMultiplyInPlace",
    "description": "Compute (Constant * Vector) for each element in VectorList, and store in VectorList",
    "parameters": [
      {
        "name": "Constant",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ConstantVectorMultiply",
    "description": "Compute (Constant * Vector) for each element in VectorList, and return in a new list",
    "parameters": [
      {
        "name": "Constant",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "VectorList",
        "type": "FGeometryScriptVectorList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptVectorList"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ConstantScalarMultiplyInPlace",
    "description": "Compute (Constant * A) for each element A is the Scalar List, and the result is stored in the original Scalar List.",
    "parameters": [
      {
        "name": "Constant",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_VectorMathFunctions",
    "name": "ConstantScalarMultiply",
    "description": "Returns a Scalar List of the same length as the input Scalar List, with the elements computed as (Constant * A) where A is the corresponding element in the input List.",
    "parameters": [
      {
        "name": "Constant",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ScalarList",
        "type": "FGeometryScriptScalarList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptScalarList"
  },
  {
    "class": "UGeometryScriptLibrary_VolumeTextureBakeFunctions",
    "name": "BakeSignedDistanceToVolumeTexture",
    "description": "Write a distance field to the given existing volume texture",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "VolumeTexture",
        "type": "UVolumeTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "DistanceSettings",
        "type": "FComputeDistanceFieldSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureSettings",
        "type": "FDistanceFieldToTextureSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateUniqueNewAssetPathName",
    "description": "",
    "parameters": [
      {
        "name": "AssetFolderPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseAssetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "UniqueAssetPathAndName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "UniqueAssetName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Options",
        "type": "FGeometryScriptUniqueAssetNameOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewVolumeFromMesh",
    "description": "",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "CreateInWorld",
        "type": "UWorld",
        "optional": false,
        "out": true
      },
      {
        "name": "ActorTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseActorName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewVolumeFromMeshOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "AVolume"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewTexture2DAsset",
    "description": "",
    "parameters": [
      {
        "name": "FromTexture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPathAndName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewTexture2DAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewStaticMeshAssetFromMeshLODs",
    "description": "Create a new StaticMesh asset from a collection of LODs represented by an array of DynamicMeshes. Save the asset at the AssetPathAndName location.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPathAndName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewStaticMeshAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UStaticMesh"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewStaticMeshAssetFromMesh",
    "description": "Create a new StaticMesh asset from a DynamicMesh. Save the asset at the AssetPathAndName location.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPathAndName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewStaticMeshAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UStaticMesh"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewSkeletalMeshAssetFromMeshLODs",
    "description": "Create a new SkeletalMesh asset from a collection of LODs represented by an array of DynamicMeshes and a Skeleton. Save the asset at the AssetPathAndName location.",
    "parameters": [
      {
        "name": "FromDynamicMeshLODs",
        "type": "TArray_UDynamicMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "InSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPathAndName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewSkeletalMeshAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "UGeometryScriptLibrary_CreateNewAssetFunctions",
    "name": "CreateNewSkeletalMeshAssetFromMesh",
    "description": "Create a new SkeletalMesh asset from a DynamicMesh and a Skeleton. Save the asset at the AssetPathAndName location.",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "InSkeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPathAndName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FGeometryScriptCreateNewSkeletalMeshAssetOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "EGeometryScriptOutcomePins",
        "optional": false,
        "out": true
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "UGeometryScriptLibrary_EditorDynamicMeshFunctions",
    "name": "StashDebugMesh",
    "description": "Store a copy of TargetMesh with name DebugMeshName. The mesh can later be recovered via FetchDebugMesh.",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "DebugMeshName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_EditorDynamicMeshFunctions",
    "name": "FetchDebugMesh",
    "description": "Fetch a debug FDynamicMesh3 saved with DebugMeshName from the global debug mesh storage and copy to ToTargetMesh. If DebugMeshName does not exist, a cube will be returned.",
    "parameters": [
      {
        "name": "DebugMeshName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ToTargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "bClearDebugMesh",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bDebugMeshExists",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_EditorDynamicMeshFunctions",
    "name": "EmitTrackedMeshChange",
    "description": "Emit an undo/redo Change for a modified TargetMesh, based on the ChangeTracker information that was saved (via call to BeginTrackedMeshChange) before TargetMesh was modified. This function must be called in the context of a Transaction (ie BeginTransaction / EndTransaction pair)",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ChangeTracker",
        "type": "FDynamicMeshChangeContainer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_EditorDynamicMeshFunctions",
    "name": "BeginTrackedMeshChange",
    "description": "Save current state of TargetMesh so that an undoable/redoable Change can be emitted after TargetMesh is modified, using EmitTrackedMeshChange().",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ChangeTracker",
        "type": "FDynamicMeshChangeContainer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_EditorTextureMapFunctions",
    "name": "ChannelPack",
    "description": "",
    "parameters": [
      {
        "name": "RChannelSource",
        "type": "FGeometryScriptChannelPackSource",
        "optional": false,
        "out": false
      },
      {
        "name": "GChannelSource",
        "type": "FGeometryScriptChannelPackSource",
        "optional": false,
        "out": false
      },
      {
        "name": "BChannelSource",
        "type": "FGeometryScriptChannelPackSource",
        "optional": false,
        "out": false
      },
      {
        "name": "AChannelSource",
        "type": "FGeometryScriptChannelPackSource",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputSRGB",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FGeometryScriptChannelPackResult"
  },
  {
    "class": "UGeometryScriptLibrary_OpenSubdivFunctions",
    "name": "ApplyTriangleLoopSubD",
    "description": "",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Subdivisions",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGeometryScriptLibrary_OpenSubdivFunctions",
    "name": "ApplyPolygroupCatmullClarkSubD",
    "description": "",
    "parameters": [
      {
        "name": "FromDynamicMesh",
        "type": "UDynamicMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "Subdivisions",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "GroupLayer",
        "type": "FGeometryScriptGroupLayer",
        "optional": false,
        "out": false
      },
      {
        "name": "Debug",
        "type": "UGeometryScriptDebug",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UDynamicMesh"
  },
  {
    "class": "UGLTFExporter",
    "name": "ExportToGLTF",
    "description": "Export the specified object to a glTF file (.gltf or .glb)",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FilePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "UGLTFExportOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedActors",
        "type": "TSet_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMessages",
        "type": "FGLTFExportMessages",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "ShowConfirmationDialog",
    "description": "Show confirmation dialog to start all asset pack downloads in either REQUIRES_USER_CONFIRMATION or WAITING_FOR_WIFI state.",
    "parameters": [],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "ShowCellularDataConfirmation",
    "description": "Show confirmation dialog requesting data download over cellular network (DEPRECIATED)",
    "parameters": [],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "RequestRemoval",
    "description": "Request removal of an asset pack",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "RequestInfo",
    "description": "Request information about a set of asset packs",
    "parameters": [
      {
        "name": "AssetPacks",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "RequestDownload",
    "description": "Request download of a set of asset packs",
    "parameters": [
      {
        "name": "AssetPacks",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "ReleaseDownloadState",
    "description": "Release download state resources",
    "parameters": [
      {
        "name": "State",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "ReleaseAssetPackLocation",
    "description": "Release location resources",
    "parameters": [
      {
        "name": "Location",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetTotalBytesToDownload",
    "description": "Get the total number of bytes to download from a download state",
    "parameters": [
      {
        "name": "State",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetStorageMethod",
    "description": "Get storage method from location",
    "parameters": [
      {
        "name": "Location",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADStorageMethod"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetShowConfirmationDialogStatus",
    "description": "Gets the status of confirmation dialog requests",
    "parameters": [
      {
        "name": "Status",
        "type": "EGooglePADConfirmationDialogStatus",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetShowCellularDataConfirmationStatus",
    "description": "Get status of cellular confirmation dialog (DEPRECIATED)",
    "parameters": [
      {
        "name": "Status",
        "type": "EGooglePADCellularDataConfirmStatus",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetDownloadStatus",
    "description": "Get download status from a download state",
    "parameters": [
      {
        "name": "State",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADDownloadStatus"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetDownloadState",
    "description": "Get download state handle of an asset pack (release when done)",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "State",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetBytesDownloaded",
    "description": "Get the number of bytes downloaded from a download state",
    "parameters": [
      {
        "name": "State",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetAssetsPath",
    "description": "Get asset path from from location",
    "parameters": [
      {
        "name": "Location",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "GetAssetPackLocation",
    "description": "Get location handle of requested asset pack (release when done)",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UGooglePADFunctionLibrary",
    "name": "CancelDownload",
    "description": "Cancel download of a set of asset packs",
    "parameters": [
      {
        "name": "AssetPacks",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EGooglePADErrorCode"
  },
  {
    "class": "UCharacterGenerator",
    "name": "SaveCharactersToFile",
    "description": "Save the generated characters to a JSON file.",
    "parameters": [
      {
        "name": "Characters",
        "type": "TArray_FPersonnalData_",
        "optional": false,
        "out": false
      },
      {
        "name": "FilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UCharacterGenerator",
    "name": "GenerateCharacters",
    "description": "Generate characters for a given faction.",
    "parameters": [
      {
        "name": "FactionsData",
        "type": "TArray_FFactionsData_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPersonnalData_"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetToolByName",
    "description": "",
    "parameters": [
      {
        "name": "Tools",
        "type": "TArray_FToolSchema_",
        "optional": false,
        "out": false
      },
      {
        "name": "FunctionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FToolSchema"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetStringArgument",
    "description": "",
    "parameters": [
      {
        "name": "Tool",
        "type": "FToolSchema",
        "optional": false,
        "out": false
      },
      {
        "name": "ArgumentName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetMetadataArgument",
    "description": "",
    "parameters": [
      {
        "name": "Tool",
        "type": "FToolSchema",
        "optional": false,
        "out": false
      },
      {
        "name": "ArgumentName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FObjectMetadata"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetIntArgument",
    "description": "",
    "parameters": [
      {
        "name": "Tool",
        "type": "FToolSchema",
        "optional": false,
        "out": false
      },
      {
        "name": "ArgumentName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetFloatArgument",
    "description": "",
    "parameters": [
      {
        "name": "Tool",
        "type": "FToolSchema",
        "optional": false,
        "out": false
      },
      {
        "name": "ArgumentName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UGameToolsSchema",
    "name": "GetBoolArgument",
    "description": "",
    "parameters": [
      {
        "name": "Tool",
        "type": "FToolSchema",
        "optional": false,
        "out": false
      },
      {
        "name": "ArgumentName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGroomBlueprintLibrary",
    "name": "IsHairStrandsSupportedInWorld",
    "description": "Check for strands support in the world of a given Actor Component",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UGroomBlueprintLibrary",
    "name": "CreateNewGroomBindingAssetWithPath",
    "description": "Create a new groom binding asset within the contents space of the project.",
    "parameters": [
      {
        "name": "InDesiredPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InGroomAsset",
        "type": "UGroomAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "InSkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "InNumInterpolationPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InSourceSkeletalMeshForTransfer",
        "type": "USkeletalMesh",
        "optional": true,
        "out": false
      },
      {
        "name": "InMatchingSection",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGroomBindingAsset"
  },
  {
    "class": "UGroomBlueprintLibrary",
    "name": "CreateNewGroomBindingAsset",
    "description": "Create a new groom binding asset within the contents space of the project. The asset name will be auto generated based on the groom asset name and the skeletal asset name",
    "parameters": [
      {
        "name": "InGroomAsset",
        "type": "UGroomAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "InSkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "InNumInterpolationPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InSourceSkeletalMeshForTransfer",
        "type": "USkeletalMesh",
        "optional": true,
        "out": false
      },
      {
        "name": "InMatchingSection",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGroomBindingAsset"
  },
  {
    "class": "UGroomBlueprintLibrary",
    "name": "CreateNewGeometryCacheGroomBindingAssetWithPath",
    "description": "Create a new groom binding asset within the contents space of the project.",
    "parameters": [
      {
        "name": "DesiredPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "GroomAsset",
        "type": "UGroomAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "GeometryCache",
        "type": "UGeometryCache",
        "optional": false,
        "out": false
      },
      {
        "name": "NumInterpolationPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SourceGeometryCacheForTransfer",
        "type": "UGeometryCache",
        "optional": true,
        "out": false
      },
      {
        "name": "MatchingSection",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGroomBindingAsset"
  },
  {
    "class": "UGroomBlueprintLibrary",
    "name": "CreateNewGeometryCacheGroomBindingAsset",
    "description": "Create a new groom binding asset within the contents space of the project. The asset name will be auto generated based on the groom asset name and the skeletal asset name",
    "parameters": [
      {
        "name": "GroomAsset",
        "type": "UGroomAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "GeometryCache",
        "type": "UGeometryCache",
        "optional": false,
        "out": false
      },
      {
        "name": "NumInterpolationPoints",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "SourceGeometryCacheForTransfer",
        "type": "UGeometryCache",
        "optional": true,
        "out": false
      },
      {
        "name": "MatchingSection",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UGroomBindingAsset"
  },
  {
    "class": "UHandKeypointConversion",
    "name": "Conv_HandKeypointToInt32",
    "description": "Interpret a HandKeypoint as an int input",
    "parameters": [
      {
        "name": "input",
        "type": "EHandKeypoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetRootSettingsInRetargetProfile",
    "description": "Set the root settings in a retarget profile (will set bApplyRootSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "RootSettings",
        "type": "FTargetRootSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetGlobalSettingsInRetargetProfile",
    "description": "Set the global settings in a retarget profile (will set bApplyGlobalSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "GlobalSettings",
        "type": "FRetargetGlobalSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetChainSpeedPlantSettingsInRetargetProfile",
    "description": "Set the chain Speed Plant settings in a retarget profile (will set bApplyChainSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "SpeedPlantSettings",
        "type": "FTargetChainSpeedPlantSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetChainSettingsInRetargetProfile",
    "description": "Set the chain settings in a retarget profile (will set bApplyChainSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "ChainSettings",
        "type": "FTargetChainSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetChainIKSettingsInRetargetProfile",
    "description": "Set the chain IK settings in a retarget profile (will set bApplyChainSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "IKSettings",
        "type": "FTargetChainIKSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "SetChainFKSettingsInRetargetProfile",
    "description": "Set the chain FK settings in a retarget profile (will set bApplyChainSettings to true).",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "FKSettings",
        "type": "FTargetChainFKSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetRootSettingsFromRetargetProfile",
    "description": "Returns true if the target IK Rig has been assigned Returns true if the source IK Rig has been assigned Returns the root settings in the supplied Retarget Profile.",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetRootSettingsFromRetargetAsset",
    "description": "Returns the root settings in an IK Retargeter Asset using the given profile name (optional)",
    "parameters": [
      {
        "name": "RetargetAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSettings",
        "type": "FTargetRootSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetGlobalSettingsFromRetargetProfile",
    "description": "Returns the global settings in the supplied Retarget Profile.",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FRetargetGlobalSettings"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetGlobalSettingsFromRetargetAsset",
    "description": "Returns the global settings in an IK Retargeter Asset using the given profile name (optional)",
    "parameters": [
      {
        "name": "RetargetAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalProfileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSettings",
        "type": "FRetargetGlobalSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetChainUsingGoalFromRetargetAsset",
    "description": "Returns the chain settings associated with a given Goal in an IK Retargeter Asset using the given profile name (optional)",
    "parameters": [
      {
        "name": "RetargetAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      },
      {
        "name": "IKGoalName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTargetChainSettings"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetChainSettingsFromRetargetProfile",
    "description": "Returns the chain settings associated with a given target chain in the supplied Retarget Profile.",
    "parameters": [
      {
        "name": "RetargetProfile",
        "type": "FRetargetProfile",
        "optional": false,
        "out": true
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTargetChainSettings"
  },
  {
    "class": "UIKRetargeter",
    "name": "GetChainSettingsFromRetargetAsset",
    "description": "Returns the chain settings associated with a given target chain in an IK Retargeter Asset using the given profile name (optional)",
    "parameters": [
      {
        "name": "RetargetAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetChainName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalProfileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTargetChainSettings"
  },
  {
    "class": "UIKRetargetBatchOperation",
    "name": "DuplicateAndRetarget",
    "description": "Encapsulate ability to batch duplicate and retarget a set of animation assets Convenience function to run a batch animation retarget from Blueprint / Python. This function will duplicate a list of * assets and use the supplied IK Retargeter to retarget the animation from the source to the target using the * settings in the provided IK Retargeter asset. * * @@param AssetsToRetarget A list of animation assets to retarget (sequences, blendspaces or montages) * @@param SourceMesh The skeletal mesh with desired proportions to playback the assets to retarget * @@param TargetMesh The skeletal mesh to retarget the animation onto. * @@param IKRetargetAsset The IK Retargeter asset with IK Rigs appropriate for the source and target skeletal mesh * @@param Search A string to search for in the file name (replaced with \"Replace\" string) * @@param Replace A string to replace with in the file name * @@param Suffix A string to add at the end of the new file name * @@param Prefix A string to add to the start of the new file name * @@param bRemapReferencedAssets Whether to remap existing references in the animation assets * * Return: list of new animation files created.",
    "parameters": [
      {
        "name": "AssetsToRetarget",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "IKRetargetAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      },
      {
        "name": "Search",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Replace",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Prefix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Suffix",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeReferencedAssets",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FAssetData_"
  },
  {
    "class": "UIKRetargeterController",
    "name": "GetController",
    "description": "A stateless singleton (1-per-asset) class used to make modifications to a UIKRetargeter asset. Use UIKRetargeter.GetController() to get the controller for the asset you want to modify. Moves the entire skeleton vertically until the specified bone is the same height off the ground as in the reference pose. Assign a source chain to the given target chain. Animation will be copied from the source to the target. Set a delta rotation for a given bone for the current retarget pose Set the retarget root settings for this asset. Set the translation offset on the retarget root bone for the current retarget pose Set enabled/disabled status of the given retarget operation. Set the settings for the target chain by name. Returns true if the chain settings were applied, false otherwise. Set the preview skeletal mesh for either source or target Set the IK Rig to use as the source or target (to copy animation FROM/TO) Get a copy of the global settings for this asset. Change which retarget pose is used by the retargeter at runtime Reset a retarget pose for the specified bones. If BonesToReset is Empty, will removes all stored deltas, returning pose to reference pose Rename current retarget pose. Returns true if a pose was renamed. Remove a retarget pose. Returns true if the pose was found and removed. Remove the retarget op at the given stack index. Remove all ops in the stack. Move the retarget op at the given index to the target index. Get the name of the source chain mapped to a given target chain (the chain animation is copied FROM). Get a delta rotation for a given bone for the current retarget pose Get a copy of the retarget root settings for this asset. Get the translation offset on the retarget root bone for the current retarget pose Get access to array of retarget poses Get enabled status of the given Op. Get access to the given retarget operation. Get a copy of the settings for the target chain by name. Get the preview skeletal mesh Get the number of Ops in the stack. Get access to the given retarget operation. Get either source or target IK Rig Get a copy of the global settings for this asset. Get the current retarget pose Get the current retarget pose Use this to get the controller for the given retargeter asset",
    "parameters": [
      {
        "name": "InRetargeterAsset",
        "type": "UIKRetargeter",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UIKRigController",
    "name": "GetController",
    "description": "A singleton (per-asset) class used to make modifications to a UIKRigDefinition asset All modifications to an IKRigDefinition must go through this controller. Editors can subscribe to the callbacks on this controller to be notified of changes that require reinitialization of a running IK Rig processor instance. The API here is split into public/scripting sections which are accessible from Blueprint/Python and sections that are only relevant to editors in C++. Set enabled/disabled status of the given solver. Sets the preview mesh to use. Loads the hierarchy into the asset's IKRigSkeleton. Returns true if the mesh was able to be set. False if it was incompatible for any reason. Set the root bone on a given solver. (not all solvers support root bones, checks CanSetRootBone() first) Set the Root Bone of the retargeting (can only be one). Set the Start Bone for the given Chain. Returns true if operation was successful. Set the Goal for the given Chain. Returns true if operation was successful. Set the End Bone for the given Chain. Returns true if operation was successful. The the Bone that the given Goal should be parented to / associated with. Set the end bone on a given solver. (not all solvers require extra end bones, checks CanSetEndBone() first) Include/exclude a bone from all the solvers. All bones are included by default. Renamed the given Chain. Returns the new name (same as old if unsuccessful). Rename a Goal. Returns new name, which may be different after being sanitized. Returns NAME_None if this fails. Remove the solver at the given stack index. Remove a Chain with the given name. Returns true if a Chain was removed. Remove the Goal by name. Remove settings for the given Bone/Solver. Does nothing if Bone doesn't have setting in this Solver. Move the solver at the given index to the target index. Returns true if the provided skeletal mesh could be used with this IK Rig. Returns true if the given Goal is connected to the given Solver. False otherwise. Returns true if the given Goal is connected to ANY solver. False otherwise. Get enabled status of the given solver. Get access to the given solver. Get the skeletal mesh this asset is initialized with Get the name of the root bone on a given solver. (not all solvers support root bones, checks CanSetRootBone() first) Get the name of the Root Bone of the retargeting (can only be one). Get the End Bone name for the given Chain. Get read-only access to the list of Chains. Get the Goal name for the given Chain. Get the Start Bone name for the given Chain. Get the global-space retarget pose transform of the given Bone. Get the number of solvers in the stack. Get access to the given solver. Get the UObject for the settings associated with the given Goal in the given Solver. Solvers can define their own per-Goal settings depending on their needs. These are termed \"Effectors\". Get the Goal associated with the given Bone (may be NAME_None) Get read-write access to the Goal with the given name. Get the name of the end bone on a given solver. (not all solvers require extra end bones, checks CanSetEndBone() first) Use this to get the controller for the given IKRig",
    "parameters": [
      {
        "name": "InIKRigDefinition",
        "type": "UIKRigDefinition",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "IsValid",
    "description": "",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "GetWidth",
    "description": "Returns -1 if Image is invalid",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "GetSize",
    "description": "Returns (-1, -1) if Image is invalid",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2f"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "GetPixelValue",
    "description": "Returns the value in the texture for the given pixel as a float vector. If the input position is invalid, the format is invalid, or the reference isn't set, bValid will be false and the function will return FVector4(0,0,0,0). Pixel values are directly returned with no gamma transformation to allow for lookup tables. Also note that 8 bit formats that you might normally expect to be normalized to 0..1 will return their values directly as 0..256. This supports all image formats. G8 is replicated to X/Y/Z/1. R16/R32 is returned as R/0/0/1. Do not use this for full image processing as it will be extremely slow, contact support if you need such functionality.",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FVector4f"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "GetPixelLinearColor",
    "description": "Returns the color value for the given pixel. If the input position is invalid, the format is invalid, or the reference isn't set, bValid will be false and the function will return FailureColor. The color is converted using the image's gamma space in to linear space. Do not use this for full image processing as it will be extremely slow, contact support if you need such functionality.",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "X",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Y",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bValid",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "FailureColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "USharedImageConstRefBlueprintFns",
    "name": "GetHeight",
    "description": "Returns -1 if Image is invalid",
    "parameters": [
      {
        "name": "Image",
        "type": "FSharedImageConstRefBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UImageWriteBlueprintLibrary",
    "name": "ExportToDisk",
    "description": "Function library containing utility methods for writing images on a global async queue Export the specified texture to disk",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FImageWriteOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "RemoveUserDefinedAttribute",
    "description": "UInterchangeUserDefinedAttributesAPI is used to store and retrieve user-defined attributes such as DCC node attributes, so that pipelines have access to those attributes. Every user-defined attribute has a name, a value, and an optional AnimationPayloadKey: an FRichCurve that is a float curve. The value type must be supported by the UE::Interchange::EAttributeTypes enumeration. Remove the specified user-defined attribute. Note - User-defined attributes are the user custom attributes from the DCC translated node (for example, extra attributes in Maya). The payload key points to an FRichCurve payload.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttributeInfos",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeInfos",
        "type": "TArray_FInterchangeUserDefinedAttributeInfo_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttribute_Int32",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPayloadKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttribute_FString",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPayloadKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttribute_Float",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPayloadKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttribute_Double",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPayloadKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "GetUserDefinedAttribute_Boolean",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPayloadKey",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "DuplicateAllUserDefinedAttribute",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeSourceNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InterchangeDestinationNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "bAddSourceNodeName",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "CreateUserDefinedAttribute_Int32",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiresDelegate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "CreateUserDefinedAttribute_FString",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiresDelegate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "CreateUserDefinedAttribute_Float",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiresDelegate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "CreateUserDefinedAttribute_Double",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiresDelegate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeUserDefinedAttributesAPI",
    "name": "CreateUserDefinedAttribute_Boolean",
    "description": "",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "UserDefinedAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "PayloadKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RequiresDelegate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeManager",
    "name": "GetInterchangeManagerScripted",
    "description": "Call this to start a asynchronous scene import process. This process can import many different assets and their transforms (USceneComponent). Call this from blueprint or python to start an asynchronous asset import process. This process can import many different assets into the game content. Call this to start a synchronous scene import process. This process can import many different assets and their transforms (USceneComponent). Call this to start a synchronous asset import process. This process can import many different assets into the game content. Script helper to get a registered factory for a specified class. Return the pointer to the Interchange Manager singleton.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeManager",
    "name": "CreateSourceData",
    "description": "Call this to start a scene export process. The caller must specify a source data. Call this to start an asset export process. The caller must specify a source data. * Script helper to create a source data object that points to a file on disk. * @@Param InFilename: Specify a file on disk. * @@return: A new UInterchangeSourceData.",
    "parameters": [
      {
        "name": "InFileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "MakeInputValueKey",
    "description": "The Shader Ports API manages a set of inputs and outputs attributes. This API can be used over any InterchangeBaseNode that wants to support shader ports as attributes. Makes an attribute key to represent a value being given to an input (that is, Inputs:InputName:Value).",
    "parameters": [
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "MakeInputParameterKey",
    "description": "Makes an attribute key to represent a parameter being given to an input (that is, Inputs:InputName:Parameter). This is more relevant to Materials, but could be used to differentiate between constant values and parameters.",
    "parameters": [
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "MakeInputName",
    "description": "From an attribute key associated with an input (that is, Inputs:InputName:Value), retrieves the input name.",
    "parameters": [
      {
        "name": "InputKey",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "MakeInputConnectionKey",
    "description": "Makes an attribute key to represent a node being connected to an input (that is, Inputs:InputName:Connect).",
    "parameters": [
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "IsAParameter",
    "description": "Returns true if the attribute key is an input that represents parameters (ends with \":Parameter\").",
    "parameters": [
      {
        "name": "AttributeKey",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "IsAnInput",
    "description": "Returns true if the attribute key is associated with an input (starts with \"Inputs:\").",
    "parameters": [
      {
        "name": "AttributeKey",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "HasParameter",
    "description": "Checks whether a particular input exists as a parameter on a given node.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "HasInput",
    "description": "Checks whether a particular input exists on a given node.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "GetInputConnection",
    "description": "Retrieves the node unique id and the output name connected to a given input, if any.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutExpressionUid",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutputName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "GatherInputs",
    "description": "Retrieves the names of all the inputs for a given node.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "OutInputNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "ConnectOuputToInputByName",
    "description": "Adds an input connection attribute.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpressionUid",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "ConnectOuputToInputByIndex",
    "description": "Adds an input connection attribute. OutputIndex is encoded in a string in the following pattern: ExpressionUid:OutputByIndex:FString::FromInt(OutputIndex) The index should be retrieved using UInterchangeShaderPortsAPI::GetOutputIndexFromName().",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpressionUid",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangeShaderPortsAPI",
    "name": "ConnectDefaultOuputToInput",
    "description": "Adds an input connection attribute.",
    "parameters": [
      {
        "name": "InterchangeNode",
        "type": "UInterchangeBaseNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpressionUid",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UInterchangePipelineMeshesUtilities",
    "name": "CreateInterchangePipelineMeshesUtilities",
    "description": "Return true if there is an existing FInterchangeMeshInstance that matches the MeshInstanceUid key. Return true if there is an existing FInterchangeMeshGeometry that matches the MeshInstanceUid key. Return the skeleton root node UID. This is the UID for a UInterchangeSceneNode that has a \"Joint\" specialized type. Return an empty string if the MeshInstanceUid parameter points to nothing. Get the instanced mesh from the unique ID. Return the skeleton root node UID. This is the UID for a UInterchangeSceneNode that has a \"Joint\" specialized type. Return an empty string if the MeshGeometryUid parameter points to nothing. Get the geometry mesh from the unique ID. Get the unique IDs of all static mesh instances. Get the unique IDs of all static mesh geometry. Get the unique IDs of all skinned mesh instances. Get the unique IDs of all skinned mesh geometry. Get all instanced mesh UIDs that use the mesh geometry unique ID. Get the unique IDs of all mesh instances. Get the unique IDs of all non-instanced mesh geometry. Get the unique IDs of all mesh geometry. Create an instance of UInterchangePipelineMeshesUtilities.",
    "parameters": [
      {
        "name": "BaseNodeContainer",
        "type": "UInterchangeBaseNodeContainer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UActorImportTestFunctions",
    "name": "CheckImportedActorCount",
    "description": "Check whether the expected number of actors are imported",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedActors",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UActorImportTestFunctions",
    "name": "CheckComponentPropertyValue",
    "description": "Check whether the generic property (with a given name) in the imported actor component (with the given name) has the expected value (or matches with it using regex)",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseRegexToMatchValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UActorImportTestFunctions",
    "name": "CheckActorPropertyValue",
    "description": "Check whether the generic property (with a given name) in the imported actor has the expected value (or matches with it using regex)",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseRegexToMatchValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UActorImportTestFunctions",
    "name": "CheckActorClassCount",
    "description": "Check whether the expected number of actors with a given class are imported",
    "parameters": [
      {
        "name": "Actors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "Class",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfActors",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UActorImportTestFunctions",
    "name": "CheckActorClass",
    "description": "Check whether the imported actor has the expected class",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedClass",
        "type": "TSubclassOf_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckImportedAnimSequenceCount",
    "description": "Check whether the expected number of anim sequences are imported",
    "parameters": [
      {
        "name": "AnimSequences",
        "type": "TArray_UAnimSequence_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedAnimSequences",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyValue",
    "description": "Check whether the given curve key value for the given curve name has the expected value",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyTime",
    "description": "Check whether the given curve key time(sec) for the given curve name has the expected time(sec)",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyLeaveTangentWeight",
    "description": "Check whether the given curve key leave tangent weight for the given curve name has the expected leave tangent weight",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyLeaveTangentWeight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyLeaveTangent",
    "description": "Check whether the given curve key leave tangent for the given curve name has the expected leave tangent",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyLeaveTangent",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyArriveTangentWeight",
    "description": "Check whether the given curve key arrive tangent weight for the given curve name has the expected arrive tangent weight",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyArriveTangentWeight",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckCurveKeyArriveTangent",
    "description": "Check whether the given curve key arrive tangent for the given curve name has the expected arrive tangent",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "CurveName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCurveKeyArriveTangent",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckAnimationLength",
    "description": "Check whether the animation length (second) is as expected",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedAnimationLength",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAnimationImportTestFunctions",
    "name": "CheckAnimationFrameNumber",
    "description": "Check whether the animation frame number is as expected",
    "parameters": [
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedFrameNumber",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAssetImportTestFunctions",
    "name": "CheckMetadataValue",
    "description": "Check whether the expected object metadata value is imported.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMetadataKey",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMetadataValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAssetImportTestFunctions",
    "name": "CheckMetadataExist",
    "description": "Check whether the expected object metadata key exist.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMetadataKey",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UAssetImportTestFunctions",
    "name": "CheckImportedMetadataCount",
    "description": "Check whether the expected number of metadata for the object are imported",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfMetadataForThisObject",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UInterchangeResultImportTestFunctions",
    "name": "CheckIfErrorOrWarningWasGenerated",
    "description": "Check whether the specified InterchangeResult was emitted during import",
    "parameters": [
      {
        "name": "ResultsContainer",
        "type": "UInterchangeResultsContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "ErrorOrWarningClass",
        "type": "TSubclassOf_UInterchangeResult_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelSequenceImportTestFunctions",
    "name": "CheckSequenceLength",
    "description": "Check whether the level sequence length (second) is as expected",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLevelSequenceLength",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelSequenceImportTestFunctions",
    "name": "CheckSectionInterpolationMode",
    "description": "Check whether the imported level sequence has the expected interpolation mode for the given section",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedInterpolationMode",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelSequenceImportTestFunctions",
    "name": "CheckSectionCount",
    "description": "Check whether the imported level sequence has the expected number of sections",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfSections",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelSequenceImportTestFunctions",
    "name": "CheckLevelSequenceCount",
    "description": "Check whether the expected number of level sequences are imported",
    "parameters": [
      {
        "name": "LevelSequences",
        "type": "TArray_ULevelSequence_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfLevelSequences",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelVariantSetsImportTestFunctions",
    "name": "CheckVariantSetsCount",
    "description": "Check whether the imported LevelVariantSets has the expected number of variant sets",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfVariantSets",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelVariantSetsImportTestFunctions",
    "name": "CheckVariantsCount",
    "description": "Check whether the imported LevelVariantSets has the expected number of variants for the given variant set",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantSetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfVariants",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelVariantSetsImportTestFunctions",
    "name": "CheckLevelVariantSetsCount",
    "description": "Check whether the expected number of LevelVariantSets are imported",
    "parameters": [
      {
        "name": "LevelVariantSetsAssets",
        "type": "TArray_ULevelVariantSets_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfLevelVariantSets",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULevelVariantSetsImportTestFunctions",
    "name": "CheckBindingsCount",
    "description": "Check whether the imported LevelVariantSets has the expected number of bindings for the given variant in the given set",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantSetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfBindings",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULightImportTestFunctions",
    "name": "CheckLightPosition",
    "description": "Check whether the light position is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ALight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULightImportTestFunctions",
    "name": "CheckLightIntensity",
    "description": "Check whether the light intensity is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ALight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightIntensity",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULightImportTestFunctions",
    "name": "CheckLightDirection",
    "description": "Check whether the light direction is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ALight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightDirection",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "ULightImportTestFunctions",
    "name": "CheckLightColor",
    "description": "Check whether the light color is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ALight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckVectorParameter",
    "description": "Check whether the imported material has the expected vector parameter value",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedParameterValue",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckShadingModel",
    "description": "Check whether the imported material has the expected shading model",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedShadingModel",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckScalarParameter",
    "description": "Check whether the imported material has the expected scalar parameter value",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedParameterValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckOpacityMaskClipValue",
    "description": "Check whether the imported material has the expected opacity mask clip value",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedOpacityMaskClipValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckIsTwoSided",
    "description": "Check whether the imported material has the expected two-sided setting",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedIsTwoSided",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckImportedMaterialInstanceCount",
    "description": "Check whether the expected number of material instances are imported",
    "parameters": [
      {
        "name": "MaterialInterfaces",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedMaterialInstances",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckImportedMaterialCount",
    "description": "Check whether the expected number of materials are imported",
    "parameters": [
      {
        "name": "MaterialInterfaces",
        "type": "TArray_UMaterialInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedMaterials",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialImportTestFunctions",
    "name": "CheckBlendMode",
    "description": "Check whether the imported material has the expected blend mode",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedBlendMode",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialXTestFunctions",
    "name": "CheckInputConnected",
    "description": "Check whether a specific input of the MX_StandardSurface material function is connected or not",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "InputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsConnected",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UMaterialXTestFunctions",
    "name": "CheckConnectedInputCount",
    "description": "Check whether the expected number of inputs are connected to the MX_StandardSurface material function",
    "parameters": [
      {
        "name": "MaterialInterface",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumber",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UPointLightImportTestFunctions",
    "name": "CheckLightFalloffExponent",
    "description": "Check whether the light falloff exponent is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "APointLight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightFalloff",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckVertexIndexPosition",
    "description": "Check whether the vertex of the given index is at the expected position",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedVertexPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckVertexIndexNormal",
    "description": "Check whether the vertex of the given index is at the expected normal",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedVertexNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckUVChannelCount",
    "description": "Check whether the mesh has the expected number of UV channels",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfUVChannels",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckTriangleCountInSection",
    "description": "Check whether the given section in the built render data for the given LOD has the expected number of triangles",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfTriangles",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckSkinnedVertexCountForBone",
    "description": "Check that the specified bone name is skinned with the expected number of vertices",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bTestFirstAlternateProfile",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSkinnedVertexCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckSectionMaterialName",
    "description": "Check whether the material name for the given section in the render data for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMaterialName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckSectionImportedMaterialSlotName",
    "description": "Check whether the imported material slot name for the given section in the render data for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedImportedMaterialSlotName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckSectionCount",
    "description": "Check whether the built render data for the given mesh LOD has the expected number of sections",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfSections",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckRenderVertexCount",
    "description": "Check whether the vertex count in the built render data for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfRenderVertices",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckRenderTriangleCount",
    "description": "Check whether the triangle count in the built render data for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfRenderTriangles",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckMaterialSlotCount",
    "description": "Check whether the mesh has the expected number of material slots",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfMaterialSlots",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckLodCount",
    "description": "Check whether the mesh has the expected number of LODs",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfLods",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckImportedSkeletalMeshCount",
    "description": "Check whether the expected number of skeletal meshes are imported",
    "parameters": [
      {
        "name": "Meshes",
        "type": "TArray_USkeletalMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedSkeletalMeshes",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckBonePosition",
    "description": "Check that the bone of the specified index has the expected position",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedBonePosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USkeletalMeshImportTestFunctions",
    "name": "CheckBoneCount",
    "description": "Check whether the mesh has the expected number of bones",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfBones",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USpotLightImportTestFunctions",
    "name": "CheckLightOuterConeAngle",
    "description": "Check whether the light outer cone angle is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ASpotLight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightOuterConeAngle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "USpotLightImportTestFunctions",
    "name": "CheckLightInnerConeAngle",
    "description": "Check whether the light inner cone angle is correct",
    "parameters": [
      {
        "name": "Light",
        "type": "ASpotLight",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedLightInnerConeAngle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckVertexIndexPosition",
    "description": "Check whether the mesh description vertex of the given index is at the expected position",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedVertexPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckVertexCount",
    "description": "Check whether the mesh description vertex count for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfVertices",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckUVChannelCount",
    "description": "Check whether the mesh description has the expected number of UV channels",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfUVChannels",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckTriangleCountInPolygonGroup",
    "description": "Check whether the given mesh description polygon group of the given LOD has the expected number of triangles",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonGroupIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfTriangles",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckTriangleCount",
    "description": "Check whether the mesh description has the expected number of triangles for the given LOD",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTotalNumberOfTriangles",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckThatMeshHasQuadsOrNgons",
    "description": "Check whether the mesh description contains any quads or ngons",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bMeshHasQuadsOrNgons",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSocketName",
    "description": "Check whether the static mesh given socket index has the expected name",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSocketName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSocketLocation",
    "description": "Check whether the static mesh given socket index has the expected location",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "SocketIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSocketLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSocketCount",
    "description": "Check whether the static mesh expected number of sockets were imported",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSocketCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSimpleCollisionPrimitiveCount",
    "description": "Check whether the static mesh expected number of simple collision primitives were imported",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSphereElementCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedBoxElementCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedCapsuleElementCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedConvexElementCount",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTaperedCapsuleElementCount",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSectionMaterialName",
    "description": "Check whether the section index in the built render data for the given LOD is referencing the expected material",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMaterialName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSectionMaterialIndex",
    "description": "Check whether the section index in the built render data for the given LOD is referencing the expected material index",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedMaterialIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSectionImportedMaterialSlotName",
    "description": "Check whether the section index in the built render data for the given LOD is referencing the expected imported material slot name",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedImportedMaterialSlotName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckSectionCount",
    "description": "Check whether the render data for the given mesh LOD has the expected number of sections",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfSections",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderVertexIndexNormal",
    "description": "Check whether the render data vertex index of the given LOD has the expected vertex normal",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedVertexNormal",
        "type": "FVector4f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderVertexIndexColor",
    "description": "Check whether the render data vertex index of the given LOD has the expected vertex color",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "VertexIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedVertexColor",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderVertexCount",
    "description": "Check whether the render data vertex count for the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfRenderVertices",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderUVChannelCount",
    "description": "Check whether the render data has the expected number of UV channels",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfUVChannels",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderTriangleCount",
    "description": "Check whether the render data has the expected number of triangles for the given LOD",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTotalNumberOfTriangles",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckRenderHasVertexColors",
    "description": "Check whether the render data contains any vertex colors of the given LOD",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bExpectedHasVertexColors",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckPolygonGroupImportedMaterialSlotName",
    "description": "Check whether the mesh description material slot name for the given polygon group in the given LOD is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonGroupIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedImportedMaterialSlotName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckPolygonGroupCount",
    "description": "Check whether the mesh description has the expected number of polygon groups for the given LOD",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfPolygonGroups",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckPolygonCountInPolygonGroup",
    "description": "Check whether the given mesh description polygon group of the given LOD has the expected number of polygons",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PolygonGroupIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfPolygons",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckPolygonCount",
    "description": "Check whether the mesh description has the expected number of polygons for the given LOD",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfPolygons",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckNaniteSettings",
    "description": "Check whether the static mesh has the expected Nanite settings",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNaniteSettings",
        "type": "FMeshNaniteSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckMaterialSlotCount",
    "description": "Check whether the static mesh has the expected number of material slots",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfMaterialSlots",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckLodCount",
    "description": "Check whether the static mesh has the expected number of LODs",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfLods",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckImportedStaticMeshCount",
    "description": "Check whether the expected number of static meshes are imported",
    "parameters": [
      {
        "name": "Meshes",
        "type": "TArray_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedStaticMeshes",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckImportedMaterialSlotName",
    "description": "Check whether the static mesh imported material slot name for the given material index is as expected",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedImportedMaterialSlotName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckBuildSettings",
    "description": "Check whether the static mesh source model has the expected build settings",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedBuildSettings",
        "type": "FMeshBuildSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckBoundingBoxSizeLessThan",
    "description": "Check whether the bounding box size is less than given value",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LessThanSize",
        "type": "FVector3f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckBoundingBoxSizeGreaterThan",
    "description": "Check whether the bounding box size is greater than given value",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "GreaterThanSize",
        "type": "FVector3f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckBoundingBoxSize",
    "description": "Check whether the bounding box size is equal to given value",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedSize",
        "type": "FVector3f",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UStaticMeshImportTestFunctions",
    "name": "CheckAgainstGroundTruth",
    "description": "Check whether the static mesh is equivalent to a ground truth asset",
    "parameters": [
      {
        "name": "Mesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "MeshToCompare",
        "type": "TSoftObjectPtr_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "bCheckVertexCountEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckTriangleCountEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckUVChannelCountEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckCollisionPrimitiveCountEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckVertexPositionsEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckNormalsEqual",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UTextureImportTestFunctions",
    "name": "CheckTextureFilter",
    "description": "Check whether the imported texture has the expected filtering mode",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTextureFilter",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UTextureImportTestFunctions",
    "name": "CheckTextureAddressZ",
    "description": "Check whether the imported texture has the expected addressing mode for Z-axis",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTextureAddressZ",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UTextureImportTestFunctions",
    "name": "CheckTextureAddressY",
    "description": "Check whether the imported texture has the expected addressing mode for Y-axis",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTextureAddressY",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UTextureImportTestFunctions",
    "name": "CheckTextureAddressX",
    "description": "Check whether the imported texture has the expected addressing mode for X-axis",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedTextureAddressX",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UTextureImportTestFunctions",
    "name": "CheckImportedTextureCount",
    "description": "Check whether the expected number of textures are imported",
    "parameters": [
      {
        "name": "Textures",
        "type": "TArray_UTexture_",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedNumberOfImportedTextures",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInterchangeTestFunctionResult"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "ToString",
    "description": "Creates a Json string from the provided JsonObject.",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "ToFile",
    "description": "Creates a file from the provided JsonObject.",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "File",
        "type": "FFilePath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "StructToJsonString",
    "description": "",
    "parameters": [
      {
        "name": "Struct",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "SetField",
    "description": "Adds (new) or sets (existing) the value of the specified field.",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "HasField",
    "description": "Checks if the field exists on the object.",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "GetFieldNames",
    "description": "Gets all field names on the JsonObject",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "GetField",
    "description": "Gets the value of the specified field.",
    "parameters": [
      {
        "name": "JsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "FieldName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "FromString",
    "description": "Creates a JsonObject from the provided Json string.",
    "parameters": [
      {
        "name": "JsonString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonBlueprintFunctionLibrary",
    "name": "FromFile",
    "description": "Creates a JsonObject from the provided Json file.",
    "parameters": [
      {
        "name": "File",
        "type": "FFilePath",
        "optional": false,
        "out": false
      },
      {
        "name": "OutJsonObject",
        "type": "FJsonObjectWrapper",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryBlueprintHelpers",
    "name": "StructToJson",
    "description": "",
    "parameters": [
      {
        "name": "StructType",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "Struct",
        "type": "FStructBase",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryBlueprintHelpers",
    "name": "StructFromJson",
    "description": "",
    "parameters": [
      {
        "name": "StructType",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OutStruct",
        "type": "FStructBase",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryBlueprintHelpers",
    "name": "IsValidObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryBlueprintHelpers",
    "name": "ConstructInvalidObject",
    "description": "",
    "parameters": [],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToVectorMap",
    "description": "Copy this value to a map of vectors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FVector_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToVectorArray",
    "description": "Copy this value to an array of vectors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToVector",
    "description": "Convert a JSON value to a vector.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToTransformMap",
    "description": "Copy this value to a map of transforms.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FTransform_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToTransformArray",
    "description": "Copy this value to an array of transforms.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FTransform_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToTransform",
    "description": "Convert a JSON value to a transform.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToStringMap",
    "description": "Copy this value to a map of strings.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__string_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToStringArray",
    "description": "Copy this value to an array of strings.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToString",
    "description": "Convert a JSON value to a string.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToRotatorMap",
    "description": "Copy this value to a map of rotators.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FRotator_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToRotatorArray",
    "description": "Copy this value to an array of rotators.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FRotator_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToRotator",
    "description": "Convert a JSON value to a rotator.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToObjectArray",
    "description": "Copy this value to an array of JSON objects.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryObject_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToObject",
    "description": "Convert a JSON value to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToMap",
    "description": "Copy this value to a map of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToList",
    "description": "Convert a JSON value to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToLinearColorMap",
    "description": "Copy this value to a map of linear colors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FLinearColor_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToLinearColorArray",
    "description": "Copy this value to an array of linear colors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FLinearColor_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToLinearColor",
    "description": "Convert a JSON value to a linear color.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToIntegerMap",
    "description": "Copy this value to a map of integers.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__integer_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToIntegerArray",
    "description": "Copy this value to an array of integers.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToInteger",
    "description": "Convert a JSON value to an integer.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToGuidMap",
    "description": "Copy this value to a map of GUIDs.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FGuid_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToGuidArray",
    "description": "Copy this value to an array of GUIDs.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FGuid_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToGuid",
    "description": "Convert a JSON value to a GUID.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGuid"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToFloatMap",
    "description": "Copy this value to a map of floats.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__number_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToFloatArray",
    "description": "Copy this value to an array of floats.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_number_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToFloat",
    "description": "Convert a JSON value to a float.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToDateTimeMap",
    "description": "Copy this value to a map of date/times.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FDateTime_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToDateTimeArray",
    "description": "Copy this value to an array of date/times.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FDateTime_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToDateTime",
    "description": "Convert a JSON value to a date/time.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToColorMap",
    "description": "Copy this value to a map of colors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FColor_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToColorArray",
    "description": "Copy this value to an array of colors.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FColor_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToColor",
    "description": "Convert a JSON value to a color.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToBooleanMap",
    "description": "Copy this value to a map of booleans.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__boolean_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToBooleanArray",
    "description": "Copy this value to an array of booleans.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_boolean_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToBoolean",
    "description": "Convert a JSON value to a boolean.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ToArray",
    "description": "Copy this value to an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "StripCommentsOrCommas",
    "description": "",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bComments",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTrailingCommas",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ParseObject",
    "description": "Parse a JSON object string.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Notify",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ParseList",
    "description": "Parse a JSON array string.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Notify",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "Parse",
    "description": "Parse a JSON string.",
    "parameters": [
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bComments",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTrailingCommas",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_Stringify",
    "description": "Stringify this value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      },
      {
        "name": "bCondensed",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_IsVector",
    "description": "Check if this value is a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_IsValid",
    "description": "Check if this value is valid.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_IsTransform",
    "description": "Check if this value is a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_IsRotator",
    "description": "Check if this value is a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_IsGuid",
    "description": "Check if this value is a GUID.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_GetType",
    "description": "Get the JSON type of this value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EJsonLibraryType"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonValue_Equals",
    "description": "Check if this value equals another value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_Stringify",
    "description": "Stringify this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bCondensed",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetVector",
    "description": "Set a property as a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetValue",
    "description": "Set a property as a JSON value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetTransform",
    "description": "Set a property as a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetString",
    "description": "Set a property as a string.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetRotator",
    "description": "Set a property as a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetObject",
    "description": "Set a property as a JSON object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetMap",
    "description": "Set a property as a map of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetList",
    "description": "Set a property as a JSON array.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetLinearColor",
    "description": "Set a property as a linear color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetInteger",
    "description": "Set a property as an integer.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetGuid",
    "description": "Set a property as a GUID.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetFloat",
    "description": "Set a property as a float.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetDateTime",
    "description": "Set a property as a date/time.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetColor",
    "description": "Set a property as a color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetBoolean",
    "description": "Set a property as a boolean.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_SetArray",
    "description": "Set a property as an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_RemoveKey",
    "description": "Remove a property from this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_IsVector",
    "description": "Check if this object is a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_IsValid",
    "description": "Check if this object is valid.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_IsTransform",
    "description": "Check if this object is a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_IsRotator",
    "description": "Check if this object is a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_IsEmpty",
    "description": "Check if this object is empty.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_HasKey",
    "description": "Check if this object has a property.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetVector",
    "description": "Get a property as a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetValues",
    "description": "Get the values of this object as an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetValue",
    "description": "Get a property as a JSON value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetTransform",
    "description": "Get a property as a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetString",
    "description": "Get a property as a string.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetRotator",
    "description": "Get a property as a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetObject",
    "description": "Get a property as a JSON object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetMap",
    "description": "Get a property as a map of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetList",
    "description": "Get a property as a JSON array.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetLinearColor",
    "description": "Get a property as a linear color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetKeys",
    "description": "Get the keys of this object as an array of strings.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetInteger",
    "description": "Get a property as an integer.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetGuid",
    "description": "Get a property as a GUID.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGuid"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetFloat",
    "description": "Get a property as a number.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetDateTime",
    "description": "Get a property as a date/time.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetColor",
    "description": "Get a property as a color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetBoolean",
    "description": "Get a property as a boolean.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_GetArray",
    "description": "Get a property as an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_Equals",
    "description": "Check if this object equals another object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_Count",
    "description": "Get the number of properties in this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_Clear",
    "description": "Clear the properties in this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddVectorMap",
    "description": "Add a map of vectors to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddTransformMap",
    "description": "Add a map of transforms to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddStringMap",
    "description": "Add a map of strings to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddRotatorMap",
    "description": "Add a map of rotators to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddLinearColorMap",
    "description": "Add a map of linear colors to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddIntegerMap",
    "description": "Add a map of integers to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddGuidMap",
    "description": "Add a map of GUIDs to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddFloatMap",
    "description": "Add a map of floats to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddDateTimeMap",
    "description": "Add a map of date/times to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddColorMap",
    "description": "Add a map of colors to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_AddBooleanMap",
    "description": "Add a map of booleans to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Map",
        "type": "TMap_string__boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonObject_Add",
    "description": "Add a JSON object to this object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": true
      },
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Swap",
    "description": "Swap two items in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "IndexA",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "IndexB",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Stringify",
    "description": "Stringify this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "bCondensed",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetVector",
    "description": "Set an item as a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetValue",
    "description": "Set an item as a JSON value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetTransform",
    "description": "Set an item as a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetString",
    "description": "Set an item as a string.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetRotator",
    "description": "Set an item as a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetObject",
    "description": "Set an item as a JSON object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetMap",
    "description": "Set an item as a map of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetList",
    "description": "Set an item as a JSON array.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetLinearColor",
    "description": "Set an item as a linear color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetInteger",
    "description": "Set an item as an integer.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetGuid",
    "description": "Set an item as a GUID.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetFloat",
    "description": "Set an item as a number.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetDateTime",
    "description": "Set an item as a date/time.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetColor",
    "description": "Set an item as a color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetBoolean",
    "description": "Set an item as a boolean.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_SetArray",
    "description": "Set an item as an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveVector",
    "description": "Remove a vector from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveValue",
    "description": "Remove a JSON value from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveTransform",
    "description": "Remove a transform from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveString",
    "description": "Remove a string from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveRotator",
    "description": "Remove a rotator from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveObject",
    "description": "Remove a JSON object from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveList",
    "description": "Remove a JSON array from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveLinearColor",
    "description": "Remove a linear color from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveInteger",
    "description": "Remove an integer from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveGuid",
    "description": "Remove a GUID from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveFloat",
    "description": "Remove a float from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveDateTime",
    "description": "Remove a date/time from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveColor",
    "description": "Remove a color from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_RemoveBoolean",
    "description": "Remove a boolean from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Remove",
    "description": "Remove an item from this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_IsValid",
    "description": "Check if this list is valid.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_IsEmpty",
    "description": "Check if this list is empty.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertVector",
    "description": "Insert a vector into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertValue",
    "description": "Insert a JSON value into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertTransform",
    "description": "Insert a transform into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertString",
    "description": "Insert a string into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertRotator",
    "description": "Insert a rotator into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertObject",
    "description": "Insert a JSON object into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertMap",
    "description": "Insert a map of JSON values into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertList",
    "description": "Insert a JSON array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertLinearColor",
    "description": "Insert a linear color into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertInteger",
    "description": "Insert an integer into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertGuid",
    "description": "Insert a GUID into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertFloat",
    "description": "Insert a number into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertDateTime",
    "description": "Insert a date/time into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertColor",
    "description": "Insert a color into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertBoolean",
    "description": "Insert a boolean into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InsertArray",
    "description": "Insert an array of JSON values into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectVectorArray",
    "description": "Inject the items of a vector array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectTransformArray",
    "description": "Inject the items of a transform array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectStringArray",
    "description": "Inject the items of a string array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectRotatorArray",
    "description": "Inject the items of a rotator array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectObjectArray",
    "description": "Inject the items of an array of JSON objects into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FJsonLibraryObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectLinearColorArray",
    "description": "Inject the items of a linear color array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectIntegerArray",
    "description": "Inject the items of an integer array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectGuidArray",
    "description": "Inject the items of a GUID array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectFloatArray",
    "description": "Inject the items of a float array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectDateTimeArray",
    "description": "Inject the items of a date/time array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectColorArray",
    "description": "Inject the items of a color array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_InjectBooleanArray",
    "description": "Inject the items of a boolean array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Array",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Inject",
    "description": "Inject the items of a JSON array into this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "List",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetVector",
    "description": "Get an item as a vector.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetValue",
    "description": "Get an item as a JSON value.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetTransform",
    "description": "Get an item as a transform.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetString",
    "description": "Get an item as a string.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetRotator",
    "description": "Get an item as a rotator.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetObject",
    "description": "Get an item as a JSON object.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetMap",
    "description": "Copy an item to a map of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetList",
    "description": "Get an item as a JSON array.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetLinearColor",
    "description": "Get an item as a linear color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetInteger",
    "description": "Get an item as an integer.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetGuid",
    "description": "Get an item as a GUID.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGuid"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetFloat",
    "description": "Get an item as a number.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetDateTime",
    "description": "Get an item as a date/time.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetColor",
    "description": "Get an item as a color.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetBoolean",
    "description": "Get an item as a boolean.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_GetArray",
    "description": "Copy an item to an array of JSON values.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindVector",
    "description": "Find a vector in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindValue",
    "description": "Find a JSON value in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindTransform",
    "description": "Find a transform in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindString",
    "description": "Find a string in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindRotator",
    "description": "Find a rotator in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindObject",
    "description": "Find a JSON object in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindList",
    "description": "Find a JSON array in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindLinearColor",
    "description": "Find a linear color in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindInteger",
    "description": "Find an integer in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindGuid",
    "description": "Find a GUID in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindFloat",
    "description": "Find a float in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindDateTime",
    "description": "Find a date/time in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindColor",
    "description": "Find a color in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_FindBoolean",
    "description": "Find a boolean in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Equals",
    "description": "Check if this list equals another list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      },
      {
        "name": "List",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Count",
    "description": "Get the number of items in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Clear",
    "description": "Clear the items in this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendVectorArray",
    "description": "Append an array of vectors to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendTransformArray",
    "description": "Append an array of transforms to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendStringArray",
    "description": "Append an array of strings to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendRotatorArray",
    "description": "Append an array of rotators to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendObjectArray",
    "description": "Append an array of JSON objects to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FJsonLibraryObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendLinearColorArray",
    "description": "Append an array of linear colors to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendIntegerArray",
    "description": "Append an array of integers to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendGuidArray",
    "description": "Append an array of GUIDs to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendFloatArray",
    "description": "Append an array of floats to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendDateTimeArray",
    "description": "Append an array of date/times to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendColorArray",
    "description": "Append an array of colors to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AppendBooleanArray",
    "description": "Append an array of booleans to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Array",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_Append",
    "description": "Append a JSON array to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "List",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddVector",
    "description": "Add a vector to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddValue",
    "description": "Add a JSON value to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddTransform",
    "description": "Add a transform to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddString",
    "description": "Add a string to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddRotator",
    "description": "Add a rotator to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddObject",
    "description": "Add a JSON object to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddMap",
    "description": "Add a map of JSON values to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddList",
    "description": "Add a JSON array to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddLinearColor",
    "description": "Add a linear color to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddInteger",
    "description": "Add an integer to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddGuid",
    "description": "Add a GUID to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddFloat",
    "description": "Add a number to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddDateTime",
    "description": "Add a date/time to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddColor",
    "description": "Add a color to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddBoolean",
    "description": "Add a boolean to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "JsonList_AddArray",
    "description": "Add an array of JSON values to this list.",
    "parameters": [
      {
        "name": "Target",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": true
      },
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromVectorMap",
    "description": "Copy a map of vectors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromVectorArray",
    "description": "Copy an array of vectors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromVector",
    "description": "Convert a vector to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromTransformMap",
    "description": "Copy a map of transforms to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromTransformArray",
    "description": "Copy an array of transforms to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromTransform",
    "description": "Convert a transform to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromStringMap",
    "description": "Copy a map of strings to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromStringArray",
    "description": "Copy an array of strings to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromString",
    "description": "Convert a string to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromRotatorMap",
    "description": "Copy a map of rotators to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromRotatorArray",
    "description": "Copy an array of rotators to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromRotator",
    "description": "Convert a rotator to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromObjectArray",
    "description": "Copy an array of JSON objects to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromObject",
    "description": "Convert a JSON object to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromMap",
    "description": "Copy a map of JSON values to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromList",
    "description": "Convert a JSON array to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromLinearColorMap",
    "description": "Copy a map of linear colors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromLinearColorArray",
    "description": "Copy an array of linear colors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromLinearColor",
    "description": "Convert a linear color to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromIntegerMap",
    "description": "Copy a map of integers to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromIntegerArray",
    "description": "Copy an array of integers to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromInteger",
    "description": "Convert an integer to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromGuidMap",
    "description": "Copy a map of GUIDs to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromGuidArray",
    "description": "Copy an array of GUIDs to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromGuid",
    "description": "Convert a GUID to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromFloatMap",
    "description": "Copy a map of floats to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromFloatArray",
    "description": "Copy an array of floats to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromFloat",
    "description": "Convert a float to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromDateTimeMap",
    "description": "Copy a map of date/times to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromDateTimeArray",
    "description": "Copy an array of date/times to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromDateTime",
    "description": "Convert a date/time to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FDateTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromColorMap",
    "description": "Copy a map of colors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromColorArray",
    "description": "Copy an array of colors to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromColor",
    "description": "Convert a color to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromBooleanMap",
    "description": "Copy a map of booleans to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromBooleanArray",
    "description": "Copy an array of booleans to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromBoolean",
    "description": "Convert a boolean to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "FromArray",
    "description": "Copy an array of JSON values to a JSON value.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertVectorToObject",
    "description": "Convert a vector to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertVectorMapToObject",
    "description": "Copy a map of vectors to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertVectorArrayToList",
    "description": "Copy an array of vectors to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertTransformToObject",
    "description": "Convert a transform to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertTransformMapToObject",
    "description": "Copy a map of transforms to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertTransformArrayToList",
    "description": "Copy an array of transforms to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FTransform_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertStringMapToObject",
    "description": "Copy a map of strings to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertStringArrayToList",
    "description": "Copy an array of strings to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertRotatorToObject",
    "description": "Convert a rotator to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertRotatorMapToObject",
    "description": "Copy a map of rotators to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertRotatorArrayToList",
    "description": "Copy an array of rotators to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FRotator_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectToVector",
    "description": "Convert a JSON object to a vector.",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectToTransform",
    "description": "Convert a JSON object to a transform.",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectToRotator",
    "description": "Convert a JSON object to a rotator.",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectToMap",
    "description": "Copy a JSON object to a map of JSON values.",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_string__FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectToLinearColor",
    "description": "Convert a JSON object to a linear color.",
    "parameters": [
      {
        "name": "Object",
        "type": "FJsonLibraryObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertObjectArrayToList",
    "description": "Copy an array of JSON objects to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertMapToObject",
    "description": "Copy a map of JSON values to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertListToArray",
    "description": "Copy a JSON array to an array of JSON values.",
    "parameters": [
      {
        "name": "List",
        "type": "FJsonLibraryList",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertLinearColorToObject",
    "description": "Convert a linear color to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertLinearColorMapToObject",
    "description": "Copy a map of linear colors to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertLinearColorArrayToList",
    "description": "Copy an array of linear colors to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertIntegerMapToObject",
    "description": "Copy a map of integers to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertIntegerArrayToList",
    "description": "Copy an array of integers to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertGuidMapToObject",
    "description": "Copy a map of GUIDs to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertGuidArrayToList",
    "description": "Copy an array of GUIDs to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FGuid_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertFloatMapToObject",
    "description": "Copy a map of floats to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertFloatArrayToList",
    "description": "Copy an array of floats to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertDateTimeMapToObject",
    "description": "Copy a map of date/times to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertDateTimeArrayToList",
    "description": "Copy an array of date/times to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FDateTime_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertColorMapToObject",
    "description": "Copy a map of colors to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertColorArrayToList",
    "description": "Copy an array of colors to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertBooleanMapToObject",
    "description": "Copy a map of booleans to a JSON object.",
    "parameters": [
      {
        "name": "Value",
        "type": "TMap_string__boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertBooleanArrayToList",
    "description": "Copy an array of booleans to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConvertArrayToList",
    "description": "Copy an array of JSON values to a JSON array.",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_FJsonLibraryValue_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConstructObject",
    "description": "Construct a JSON object.",
    "parameters": [
      {
        "name": "Notify",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryObject"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConstructNull",
    "description": "Construct a JSON null.",
    "parameters": [],
    "returnType": "FJsonLibraryValue"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConstructMap",
    "description": "Construct a map of JSON values.",
    "parameters": [],
    "returnType": "TMap_string__FJsonLibraryValue_"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConstructList",
    "description": "Construct a JSON array.",
    "parameters": [
      {
        "name": "Notify",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FJsonLibraryList"
  },
  {
    "class": "UJsonLibraryHelpers",
    "name": "ConstructArray",
    "description": "Construct an array of JSON values.",
    "parameters": [],
    "returnType": "TArray_FJsonLibraryValue_"
  },
  {
    "class": "UJsonObjectGraphFunctionLibrary",
    "name": "WritePackageToTempFile",
    "description": "! EXPERIMENTAL ! Writes all objects in the provided object's package to a temporary file using the JsonObjectGraph format.",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FJsonStringifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFilename",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UJsonObjectGraphFunctionLibrary",
    "name": "WriteBlueprintClassToTempFile",
    "description": "! EXPERIMENTAL ! Writes only the provided blueprint's Class and CDO to a temporary file using the JsonObjectGraph format. Always excludes editor only data.",
    "parameters": [
      {
        "name": "BP",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FJsonStringifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFilename",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UJsonObjectGraphFunctionLibrary",
    "name": "Stringify",
    "description": "! EXPERIMENTAL ! Writes the provided objects to a string output, using the JsonObjectGraph format. Reachable nested objects will be included automatically. Objects not within a root should be included in RootObjects if they want to be deeply represented in the result string Examples of invocation from python: Print an object: print( unreal.JsonObjectGraphFunctionLibrary.stringify([object], tuple()) ) Print a list objects: print( unreal.JsonObjectGraphFunctionLibrary.stringify(objects, tuple()) ) Print an object's entire package: print( unreal.JsonObjectGraphFunctionLibrary.stringify([unreal.EditorAssetLibrary.get_package_for_object(object)], tuple()) )",
    "parameters": [
      {
        "name": "RootObjects",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Options",
        "type": "FJsonStringifyOptions",
        "optional": false,
        "out": false
      },
      {
        "name": "ResultString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULandmassBlueprintFunctionLibrary",
    "name": "WorldExtentsToCanvasCoordinates",
    "description": "",
    "parameters": [
      {
        "name": "WorldExtents",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "LandscapeInfo",
        "type": "FLandmassLandscapeInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "ScreenSize",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "CoordinatePosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "CoordinateSize",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULandmassBlueprintFunctionLibrary",
    "name": "GetCursorWorldRay",
    "description": "",
    "parameters": [
      {
        "name": "CameraLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "RayOrigin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "RayDirection",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULandmassBlueprintFunctionLibrary",
    "name": "ForceUpdateTexture",
    "description": "",
    "parameters": [
      {
        "name": "InTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULandmassBlueprintFunctionLibrary",
    "name": "CombineWorldExtents",
    "description": "",
    "parameters": [
      {
        "name": "ExtentsA",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "ExtentsB",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "CombinedExtents",
        "type": "FVector4",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequencePlayer",
    "name": "CreateLevelSequencePlayer",
    "description": "ULevelSequencePlayer is used to actually \"play\" an level sequence asset at runtime. This class keeps track of playback state and provides functions for manipulating an level sequence while its playing. Get the active camera cut camera Create a new level sequence player.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Settings",
        "type": "FMovieSceneSequencePlaybackSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActor",
        "type": "ALevelSequenceActor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UCameraComponent"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetTrackFilterEnabled",
    "description": "",
    "parameters": [
      {
        "name": "TrackFilterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetTrackFilterActive",
    "description": "Sets the specified track filter to be on or off",
    "parameters": [
      {
        "name": "TrackFilterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bActive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetSelectionRangeStart",
    "description": "Set the selection range start frame.",
    "parameters": [
      {
        "name": "NewFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetSelectionRangeEnd",
    "description": "Set the selection range end frame.",
    "parameters": [
      {
        "name": "NewFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetRandomColorForChannels",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifiers",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetPlaybackSpeed",
    "description": "Set playback speed of the current level sequence",
    "parameters": [
      {
        "name": "NewPlaybackSpeed",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetLoopMode",
    "description": "Set loop mode (note this is a per user preference)",
    "parameters": [
      {
        "name": "NewLoopMode",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetLockLevelSequence",
    "description": "Sets the lock for the current level sequence and its descendants for editing.",
    "parameters": [
      {
        "name": "bLock",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetLockCameraCutToViewport",
    "description": "Sets the lock for the viewport to the camera cuts.",
    "parameters": [
      {
        "name": "bLock",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetLocalPosition",
    "description": "Set local playhead position for the current level sequence. If the requested time is the same as the current time, an evaluation will be forced.",
    "parameters": [
      {
        "name": "PlaybackParams",
        "type": "FMovieSceneSequencePlaybackParams",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetGlobalPosition",
    "description": "Set global playhead position for the current level sequence. If the requested time is the same as the current time, an evaluation will be forced.",
    "parameters": [
      {
        "name": "PlaybackParams",
        "type": "FMovieSceneSequencePlaybackParams",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetCustomColorForChannels",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifiers",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewColors",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetCustomColorForChannel",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifier",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetCurrentTime",
    "description": "",
    "parameters": [
      {
        "name": "NewFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SetCurrentLocalTime",
    "description": "",
    "parameters": [
      {
        "name": "NewFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectTracks",
    "description": "Select tracks",
    "parameters": [
      {
        "name": "Tracks",
        "type": "TArray_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectSections",
    "description": "Select sections",
    "parameters": [
      {
        "name": "Sections",
        "type": "TArray_UMovieSceneSection_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectKeys",
    "description": "Select keys from indices",
    "parameters": [
      {
        "name": "Channel",
        "type": "FSequencerChannelProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Indices",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectFolders",
    "description": "Select folders",
    "parameters": [
      {
        "name": "Folders",
        "type": "TArray_UMovieSceneFolder_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectChannels",
    "description": "Select channels",
    "parameters": [
      {
        "name": "Channels",
        "type": "TArray_FSequencerChannelProxy_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "SelectBindings",
    "description": "Select bindings",
    "parameters": [
      {
        "name": "ObjectBindings",
        "type": "TArray_FMovieSceneBindingProxy_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "RefreshCurrentLevelSequence",
    "description": "Refresh Sequencer UI on next tick",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "PlayTo",
    "description": "Play from the current time to the requested time in frames",
    "parameters": [
      {
        "name": "PlaybackParams",
        "type": "FMovieSceneSequencePlaybackParams",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "Play",
    "description": "Play the current level sequence",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "Pause",
    "description": "Pause the current level sequence",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "OpenLevelSequence",
    "description": "* Open a level sequence asset",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "IsTrackFilterEnabled",
    "description": "",
    "parameters": [
      {
        "name": "TrackFilterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "IsTrackFilterActive",
    "description": "Gets whether the specified track filter is on/off",
    "parameters": [
      {
        "name": "TrackFilterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "IsPlaying",
    "description": "Check whether the sequence is actively playing.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "IsLevelSequenceLocked",
    "description": "Check whether the current level sequence and its descendants are locked for editing.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "IsCameraCutLockedToViewport",
    "description": "Check whether the lock for the viewport to the camera cuts is enabled.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "HasCustomColorForChannel",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifier",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetTrackFilterNames",
    "description": "Gets all the available track filter names",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSubSequenceHierarchy",
    "description": "* Get the current sub section hierarchy from the current sequence to the section associated with the focused sequence.",
    "parameters": [],
    "returnType": "TArray_UMovieSceneSubSection_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectionRangeStart",
    "description": "Get the selection range start frame.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectionRangeEnd",
    "description": "Get the selection range end frame.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedTracks",
    "description": "Gets the currently selected tracks.",
    "parameters": [],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedSections",
    "description": "Gets the currently selected sections.",
    "parameters": [],
    "returnType": "TArray_UMovieSceneSection_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedKeys",
    "description": "Gets the selected key indices with this channel",
    "parameters": [
      {
        "name": "ChannelProxy",
        "type": "FSequencerChannelProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedFolders",
    "description": "Gets the currently selected folders.",
    "parameters": [],
    "returnType": "TArray_UMovieSceneFolder_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedChannels",
    "description": "Gets the currently selected channels.",
    "parameters": [],
    "returnType": "TArray_FSequencerChannelProxy_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetSelectedBindings",
    "description": "Gets the currently selected object bindings",
    "parameters": [],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetPlaybackSpeed",
    "description": "Get playback speed of the current level sequence",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetLoopMode",
    "description": "Get loop mode (note this is a per user preference)",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetLocalPosition",
    "description": "Get the current local playhead position",
    "parameters": [
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FMovieSceneSequencePlaybackParams"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetGlobalPosition",
    "description": "Get the current global playhead position",
    "parameters": [
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FMovieSceneSequencePlaybackParams"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetFocusedLevelSequence",
    "description": "* Get the currently focused/viewed level sequence asset if there is a hierarchy of sequences.",
    "parameters": [],
    "returnType": "ULevelSequence"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetCustomColorForChannel",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifier",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetCurrentTime",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetCurrentLocalTime",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetCurrentLevelSequence",
    "description": "* Get the currently opened root level sequence asset",
    "parameters": [],
    "returnType": "ULevelSequence"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetChannelsWithSelectedKeys",
    "description": "Gets the channel with selected keys.",
    "parameters": [],
    "returnType": "TArray_FSequencerChannelProxy_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "GetBoundObjects",
    "description": "Get the object bound to the given binding ID with the current level sequence editor",
    "parameters": [
      {
        "name": "ObjectBinding",
        "type": "FMovieSceneObjectBindingID",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "ForceUpdate",
    "description": "Force sequencer evaluation and UI update immediately",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "FocusParentSequence",
    "description": "* Focus/view the parent sequence, popping out of the current sub sequence section.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "FocusLevelSequence",
    "description": "* Focus/view the sequence associated to the given sub sequence section.",
    "parameters": [
      {
        "name": "SubSection",
        "type": "UMovieSceneSubSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "EmptySelection",
    "description": "Empties the current selection.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "DeleteColorForChannels",
    "description": "",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "Identifier",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULevelSequenceEditorBlueprintLibrary",
    "name": "CloseLevelSequence",
    "description": "* Close",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "TransformNames",
    "description": "Returns an array of Transform Names stored in the Subject Frame",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "TransformNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "TransformName",
    "description": "Returns the Name of a given LiveLink Transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "SetLiveLinkSubjectEnabled",
    "description": "Set the subject's from a specific source to enabled, disabling the other in the process. Only 1 subject with the same name can be enabled. At the start of the frame, a snapshot of the enabled subjects will be made. That snapshot dictate which subject will be used for the duration of that frame. SetSubjectEnabled will take effect on the next frame.",
    "parameters": [
      {
        "name": "SubjectKey",
        "type": "FLiveLinkSubjectKey",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "RemoveSource",
    "description": "Requests the given LiveLink Source to shut down via its handle",
    "parameters": [
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "ParentBoneSpaceTransform",
    "description": "Returns the Transform value in Parent Space for a given LiveLink Transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "NumberOfTransforms",
    "description": "Returns the number of Transforms stored in the Subject Frame",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "IsSpecificLiveLinkSubjectEnabled",
    "description": "Whether or not a subject from the specific source is the enabled subject. Only 1 subject with the same name can be enabled. At the start of the frame, a snapshot of the enabled subjects will be made. That snapshot dictate which subject will be used for the duration of that frame.",
    "parameters": [
      {
        "name": "SubjectKey",
        "type": "FLiveLinkSubjectKey",
        "optional": false,
        "out": false
      },
      {
        "name": "bForThisFrame",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "IsSourceStillValid",
    "description": "Checks whether the LiveLink Source is valid via its handle",
    "parameters": [
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "IsLiveLinkSubjectEnabled",
    "description": "Whether or not the client has a subject with this name enabled Only 1 subject with the same name can be enabled. At the start of the frame, a snapshot of the enabled subjects will be made. That snapshot dictate which subject will be used for the duration of that frame.",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "HasParent",
    "description": "Returns whether a given LiveLink Transform has a parent transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetTransformByName",
    "description": "Returns the LiveLink Transform stored in a Subject Frame with a given name. Returns an Identity transform if Transform Name is invalid.",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "TransformName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetTransformByIndex",
    "description": "Returns the LiveLink Transform stored in a Subject Frame at a given index. Returns an Identity transform if Transform Index is invalid.",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "TransformIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetSpecificLiveLinkSubjectRole",
    "description": "Get the role of a subject from a specific source",
    "parameters": [
      {
        "name": "SubjectKey",
        "type": "FLiveLinkSubjectKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_ULiveLinkRole_"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetSourceTypeFromGuid",
    "description": "Get the type of a source from the given GUID",
    "parameters": [
      {
        "name": "SourceGuid",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetSourceType",
    "description": "Get the type of a LiveLink Source via its handle",
    "parameters": [
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetSourceStatus",
    "description": "Get the text status of a LiveLink Source via its handle",
    "parameters": [
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetSourceMachineName",
    "description": "Get the machine name of a LiveLink Source via its handle",
    "parameters": [
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetRootTransform",
    "description": "Returns the Root Transform for the Subject Frame as a LiveLink Transform or the Identity if there are no transforms.",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetPropertyValue",
    "description": "Returns the value of a property stored in the Subject Frame",
    "parameters": [
      {
        "name": "BasicData",
        "type": "FLiveLinkBasicBlueprintData",
        "optional": false,
        "out": true
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetParent",
    "description": "Returns the Parent LiveLink Transform if one exists or an Identity transform if no parent exists",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Parent",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetMetadata",
    "description": "Returns the Subject Metadata structure stored in the Subject Frame",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "FSubjectMetadata",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetLiveLinkSubjectState",
    "description": "Returns the state of the subject with the given name.",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ELiveLinkSubjectState"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetLiveLinkSubjects",
    "description": "Get a list of all subjects",
    "parameters": [
      {
        "name": "bIncludeDisabledSubject",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeVirtualSubject",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FLiveLinkSubjectKey_"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetLiveLinkSubjectRole",
    "description": "Get the role of the subject with this name",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_ULiveLinkRole_"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetLiveLinkEnabledSubjectNames",
    "description": "Get a list of all enabled subject names",
    "parameters": [
      {
        "name": "bIncludeVirtualSubject",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FLiveLinkSubjectName_"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetCurves",
    "description": "Returns the float curves stored in the Subject Frame as a map",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "Curves",
        "type": "TMap_string__number_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetChildren",
    "description": "Returns an array of Child LiveLink Transforms for a given LiveLink Transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Children",
        "type": "TArray_FLiveLinkTransform_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetBasicData",
    "description": "Returns the Subject base structure stored in the Subject Frame",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "BasicBlueprintData",
        "type": "FLiveLinkBasicBlueprintData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetAnimationStaticData",
    "description": "Returns the Subject's static data stored in the Subject Frame. Returns false if no valid data found.",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "AnimationStaticData",
        "type": "FLiveLinkSkeletonStaticData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "GetAnimationFrameData",
    "description": "Returns the Subject's frame data stored in the Subject Frame. Returns false if no valid data found.",
    "parameters": [
      {
        "name": "SubjectFrameHandle",
        "type": "FSubjectFrameHandle",
        "optional": false,
        "out": true
      },
      {
        "name": "AnimationFrameData",
        "type": "FLiveLinkAnimationFrameData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "EvaluateLiveLinkFrameWithSpecificRole",
    "description": "Fetches a frame on a subject for a specific role. Output is evaluated based on the role",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "TSubclassOf_ULiveLinkRole_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBlueprintData",
        "type": "FLiveLinkBaseBlueprintData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "EvaluateLiveLinkFrameAtWorldTimeOffset",
    "description": "Fetches a frame on a subject for a specific role at an offset from the application current time. Output is evaluated based on the role",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "TSubclassOf_ULiveLinkRole_",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldTimeOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBlueprintData",
        "type": "FLiveLinkBaseBlueprintData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "EvaluateLiveLinkFrameAtSceneTime",
    "description": "Fetches a frame on a subject for a specific role at a specified scene time (timecode). The Timecode should be at the frame rate as the engine timecode. Output is evaluated based on the role",
    "parameters": [
      {
        "name": "SubjectName",
        "type": "FLiveLinkSubjectName",
        "optional": false,
        "out": false
      },
      {
        "name": "Role",
        "type": "TSubclassOf_ULiveLinkRole_",
        "optional": false,
        "out": false
      },
      {
        "name": "SceneTime",
        "type": "FTimecode",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBlueprintData",
        "type": "FLiveLinkBaseBlueprintData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "EvaluateLiveLinkFrame",
    "description": "",
    "parameters": [
      {
        "name": "SubjectRepresentation",
        "type": "FLiveLinkSubjectRepresentation",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBlueprintData",
        "type": "FLiveLinkBaseBlueprintData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "ComponentSpaceTransform",
    "description": "Returns the Transform value in Root Space for a given LiveLink Transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "Transform",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULiveLinkBlueprintLibrary",
    "name": "ChildCount",
    "description": "Returns the number of Children for a given LiveLink Transform",
    "parameters": [
      {
        "name": "LiveLinkTransform",
        "type": "FLiveLinkTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "ULiveLinkMessageBusFinder",
    "name": "ConstructMessageBusFinder",
    "description": "Asset for finding available Message Bus Sources. * Broadcasts a message to the network and returns a list of all providers who replied within a set amount of time. * * @@param AvailableProviders Will contain the collection of found Message Bus Providers. * @@param Duration The amount of time to wait for replies in seconds * Constructs a new Message Bus Finder which enables you to detect available Message Bus Providers on the network * * @@return The newly constructed Message Bus Finder",
    "parameters": [],
    "returnType": "ULiveLinkMessageBusFinder"
  },
  {
    "class": "ULiveLinkMessageBusFinder",
    "name": "ConnectToProvider",
    "description": "* Connects to a given Message Bus Provider and returns a handle to the created LiveLink Source * * @@param Provider The provider to connect to. * @@param SourceHandle A handle to the created LiveLink Source, lets you query information about the created source and request a shutdown",
    "parameters": [
      {
        "name": "Provider",
        "type": "FProviderPollResult",
        "optional": false,
        "out": true
      },
      {
        "name": "SourceHandle",
        "type": "FLiveLinkSourceHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULocalizableMessageLibrary",
    "name": "Reset_LocalizableMessage",
    "description": "BlueprintFunctionLibrary for LocalizableMessage Resets the Localizable Message",
    "parameters": [
      {
        "name": "Message",
        "type": "FLocalizableMessage",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULocalizableMessageLibrary",
    "name": "IsEmpty_LocalizableMessage",
    "description": "Returns true if the message is empty",
    "parameters": [
      {
        "name": "Message",
        "type": "FLocalizableMessage",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULocalizableMessageLibrary",
    "name": "Conv_LocalizableMessageToText",
    "description": "Conversion function from LocalizableMessage to FText.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Message",
        "type": "FLocalizableMessage",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "ULocationServices",
    "name": "StopLocationServices",
    "description": "Stops the updates of location from the Location Service that was started with StartLocationService",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULocationServices",
    "name": "StartLocationServices",
    "description": "Starts requesting location updates from the appropriate Location Service",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULocationServices",
    "name": "IsLocationAccuracyAvailable",
    "description": "Checks if the supplied Accuracy is available on the current device.",
    "parameters": [
      {
        "name": "Accuracy",
        "type": "ELocationAccuracy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULocationServices",
    "name": "InitLocationServices",
    "description": "Called to set up the Location Service before use",
    "parameters": [
      {
        "name": "Accuracy",
        "type": "ELocationAccuracy",
        "optional": false,
        "out": false
      },
      {
        "name": "UpdateFrequency",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "MinDistanceFilter",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULocationServices",
    "name": "GetLocationServicesImpl",
    "description": "* Returns the Location Services implementation object. Intended to be used to set up the FLocationServicesData_OnLocationChanged * delegate in Blueprints. * @@return - the Android or IOS impl object",
    "parameters": [],
    "returnType": "ULocationServicesImpl"
  },
  {
    "class": "ULocationServices",
    "name": "GetLastKnownLocation",
    "description": "Returns the last location information returned by the location service. If no location update has been made, will return a default-value-filled struct.",
    "parameters": [],
    "returnType": "FLocationServicesData"
  },
  {
    "class": "ULocationServices",
    "name": "AreLocationServicesEnabled",
    "description": "Checks if the Location Services on the mobile device are enabled for this application",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UBPFunctionLibrary",
    "name": "ChangeMeshMaterials",
    "description": "",
    "parameters": [
      {
        "name": "Mesh",
        "type": "TArray_UStaticMesh_",
        "optional": false,
        "out": false
      },
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UXcodeProjectSettings",
    "name": "ShouldDisableIOSSettings",
    "description": "Implements the settings for Xcode projects",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "RemoveCurvesByName",
    "description": "",
    "parameters": [
      {
        "name": "Skeleton",
        "type": "USkeleton",
        "optional": false,
        "out": false
      },
      {
        "name": "NameContains",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "MergeSkeletalMeshes_Runtime",
    "description": "",
    "parameters": [
      {
        "name": "Params",
        "type": "FMagicMeshMergeParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "MergeSkeletalMeshes_EditorOnly",
    "description": "this will do nothing in a packaged game. Editor only",
    "parameters": [
      {
        "name": "Params",
        "type": "FMagicMeshMergeParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "MergeSections_BakedMaterials",
    "description": "this will do nothing in a packaged game. Editor only",
    "parameters": [
      {
        "name": "Options",
        "type": "UMagicMergeMeshSectionMergeOptions_BakedMaterials",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "MergePhysicsAssets",
    "description": "Merges physics assets into a single physics asset. earlier assets in the array will take precedence over later ones if there are constraint conflicts BaseAsset is optional",
    "parameters": [
      {
        "name": "PhysicsAssets",
        "type": "TArray_UPhysicsAsset_",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneBodiesToOmit",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseAsset",
        "type": "UPhysicsAsset",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UPhysicsAsset"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "MergeIdenticalSections",
    "description": "this will do nothing in a packaged game. Editor only",
    "parameters": [
      {
        "name": "MeshToMerge",
        "type": "UStreamableRenderAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "bMakeCopy",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UStreamableRenderAsset"
  },
  {
    "class": "UMagicMergeBPLibrary",
    "name": "BakeUDIMSection",
    "description": "this will do nothing in a packaged game. Editor only",
    "parameters": [
      {
        "name": "Options",
        "type": "UMagicMergeUDIMBakeOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TMap_EMagicMergeTextureType__UTexture2D_"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "SendSignalToEntity",
    "description": "Function library for interfacing with EntityInfo inside blueprints. Sends the input Signal to the Entity defined by EntityInfo.EntityHandle using the UMassSignalSubsystem.",
    "parameters": [
      {
        "name": "Owner",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EntityInfo",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "Signal",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "GetEnviromentQueryResultAsEntityInfo",
    "description": "Outputs an array filled with resulting EntityInfos. Note that it makes sense only if ItemType is a EnvQueryItemType_MassEntityHandle-derived type.",
    "parameters": [
      {
        "name": "QueryInstance",
        "type": "UEnvQueryInstanceBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMassEnvQueryEntityInfoBlueprintWrapper_"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "GetCurrentEntityPosition",
    "description": "",
    "parameters": [
      {
        "name": "Owner",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "EntityInfo",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "GetCachedEntityPosition",
    "description": "",
    "parameters": [
      {
        "name": "EntityInfo",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "EntityToString",
    "description": "Utils",
    "parameters": [
      {
        "name": "EntityInfo",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "EntityComparison",
    "description": "Custom comparison function, as the Blueprint Equals did not seem to work.",
    "parameters": [
      {
        "name": "A",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMassEQSBlueprintLibrary",
    "name": "ContainsEntity",
    "description": "Custom array-contains function, as the Blueprint version did not seem to work.",
    "parameters": [
      {
        "name": "EntityList",
        "type": "TArray_FMassEnvQueryEntityInfoBlueprintWrapper_",
        "optional": false,
        "out": false
      },
      {
        "name": "EntityInfo",
        "type": "FMassEnvQueryEntityInfoBlueprintWrapper",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "UpdateMaterialInstance",
    "description": "Blueprint library for creating/editing Materials Called after making modifications to a Material Instance to recompile shaders etc.",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "UpdateMaterialFunction",
    "description": "Update a Material Function after edits have been made. Will recompile any Materials that use the supplied Material Function.",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunctionInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "PreviewMaterial",
        "type": "UMaterial",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialUsage",
    "description": "Enable a particular usage for the supplied material (e.g. SkeletalMesh, ParticleSprite etc)",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "Usage",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bNeedsRecompile",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceVectorParameterValue",
    "description": "Set the vector parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceTextureParameterValue",
    "description": "Set the texture parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceStaticSwitchParameterValue",
    "description": "Set the static switch parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceSparseVolumeTextureParameterValue",
    "description": "Set the texture parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "USparseVolumeTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceScalarParameterValue",
    "description": "Set the scalar (float) parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceRuntimeVirtualTextureParameterValue",
    "description": "Set the texture parameter value for a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "URuntimeVirtualTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "SetMaterialInstanceParent",
    "description": "Set the parent Material or Material Instance to use for this Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "NewParent",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "RecompileMaterial",
    "description": "Trigger a recompile of a material. Must be performed after making changes to the graph to have changes reflected.",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "LayoutMaterialFunctionExpressions",
    "description": "Layouts the expressions in a grid pattern",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "LayoutMaterialExpressions",
    "description": "Layouts the expressions in a grid pattern",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "HasMaterialUsage",
    "description": "Check if a particular usage is enabled for the supplied material (e.g. SkeletalMesh, ParticleSprite etc)",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "Usage",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetVectorParameterSource",
    "description": "Returns the path of the asset where the parameter originated, as well as true/false if it was found",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterSource",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetVectorParameterNames",
    "description": "Gets all vector parameter names",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetUsedTextures",
    "description": "Get the list of textures used by a material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UTexture_"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetTextureParameterSource",
    "description": "Returns the path of the asset where the parameter originated, as well as true/false if it was found",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterSource",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetTextureParameterNames",
    "description": "Gets all texture parameter names",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetStatistics",
    "description": "Returns statistics about the given material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMaterialStatistics"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetStaticSwitchParameterSource",
    "description": "Returns the path of the asset where the parameter originated, as well as true/false if it was found",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterSource",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetStaticSwitchParameterNames",
    "description": "Gets all static switch parameter names",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetScalarParameterSource",
    "description": "Returns the path of the asset where the parameter originated, as well as true/false if it was found",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterSource",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetScalarParameterNames",
    "description": "Gets all scalar parameter names",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterNames",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetNumMaterialExpressionsInFunction",
    "description": "Returns number of material expressions in the supplied material",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetNumMaterialExpressions",
    "description": "Returns number of material expressions in the supplied material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetNaniteOverrideMaterial",
    "description": "Returns any nanite override material for the given material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMaterialInterface"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialSelectedNodes",
    "description": "Get the set of selected nodes from an active material editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSet_UObject_"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialPropertyInputNodeOutputName",
    "description": "Get the node output name providing the output for a given material property from an active material editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "Property",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialPropertyInputNode",
    "description": "Get the node providing the output for a given material property from an active material editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "Property",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMaterialExpression"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceVectorParameterValue",
    "description": "Get the current vector parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceTextureParameterValue",
    "description": "Get the current texture parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTexture"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceStaticSwitchParameterValue",
    "description": "Get the current static switch parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceSparseVolumeTextureParameterValue",
    "description": "Get the current texture parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "USparseVolumeTexture"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceScalarParameterValue",
    "description": "Get the current scalar (float) parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialInstanceRuntimeVirtualTextureParameterValue",
    "description": "Get the current texture parameter value from a Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Association",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "URuntimeVirtualTexture"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialExpressionNodePosition",
    "description": "Get the position of the MaterialExpression node.",
    "parameters": [
      {
        "name": "MaterialExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "NodePosX",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "NodePosY",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialExpressionInputTypes",
    "description": "Get the array of input pin types for a material expression",
    "parameters": [
      {
        "name": "MaterialExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialExpressionInputNames",
    "description": "Get the array of input pin names for a material expression",
    "parameters": [
      {
        "name": "MaterialExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialDefaultVectorParameterValue",
    "description": "Get the default vector parameter value from a Material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialDefaultTextureParameterValue",
    "description": "Get the default texture parameter value from a Material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialDefaultStaticSwitchParameterValue",
    "description": "Get the default static switch parameter value from a Material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetMaterialDefaultScalarParameterValue",
    "description": "Get the default scalar (float) parameter value from a Material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetInputsForMaterialExpression",
    "description": "Get the set of nodes acting as inputs to a node from an active material editor",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMaterialExpression_"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetInputNodeOutputNameForMaterialExpression",
    "description": "Get the output name of input node connected to MaterialExpression from an active material editor",
    "parameters": [
      {
        "name": "MaterialExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "InputNode",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "GetChildInstances",
    "description": "Gets all direct child mat instances",
    "parameters": [
      {
        "name": "Parent",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "ChildInstances",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "DuplicateMaterialExpression",
    "description": "Duplicates the provided material expression adding it to the same material / material function, and copying parameters. Note: Does not duplicate transient properties (Ex: GraphNode).",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      },
      {
        "name": "Expression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMaterialExpression"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "DeleteMaterialExpressionInFunction",
    "description": "Delete a specific expression from a material function. Will disconnect from other expressions.",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      },
      {
        "name": "Expression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "DeleteMaterialExpression",
    "description": "Delete a specific expression from a material. Will disconnect from other expressions.",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "Expression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "DeleteAllMaterialExpressionsInFunction",
    "description": "Delete all material expressions in the supplied material function",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "DeleteAllMaterialExpressions",
    "description": "Delete all material expressions in the supplied material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "CreateMaterialExpressionInFunction",
    "description": "Create a new material expression node within the supplied material function",
    "parameters": [
      {
        "name": "MaterialFunction",
        "type": "UMaterialFunction",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpressionClass",
        "type": "TSubclassOf_UMaterialExpression_",
        "optional": false,
        "out": false
      },
      {
        "name": "NodePosX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "NodePosY",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UMaterialExpression"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "CreateMaterialExpression",
    "description": "Create a new material expression node within the supplied material",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterial",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpressionClass",
        "type": "TSubclassOf_UMaterialExpression_",
        "optional": false,
        "out": false
      },
      {
        "name": "NodePosX",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "NodePosY",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UMaterialExpression"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "ConnectMaterialProperty",
    "description": "Connect a material expression output to one of the material property inputs (e.g. diffuse color, opacity etc)",
    "parameters": [
      {
        "name": "FromExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "FromOutputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Property",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "ConnectMaterialExpressions",
    "description": "Create connection between two material expressions",
    "parameters": [
      {
        "name": "FromExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "FromOutputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ToExpression",
        "type": "UMaterialExpression",
        "optional": false,
        "out": false
      },
      {
        "name": "ToInputName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMaterialEditingLibrary",
    "name": "ClearAllMaterialInstanceParameters",
    "description": "Clears all material parameters set by this Material Instance",
    "parameters": [
      {
        "name": "Instance",
        "type": "UMaterialInstanceConstant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMediaBlueprintFunctionLibrary",
    "name": "EnumerateWebcamCaptureDevices",
    "description": "Blueprint library for Media related functions. Enumerate available audio capture devices. To filter for a specific subset of devices, use the MakeBitmask node with EMediaWebcamCaptureDeviceFilter as the Bitmask Enum.",
    "parameters": [
      {
        "name": "OutDevices",
        "type": "TArray_FMediaCaptureDevice_",
        "optional": false,
        "out": true
      },
      {
        "name": "Filter",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMediaBlueprintFunctionLibrary",
    "name": "EnumerateVideoCaptureDevices",
    "description": "Enumerate available audio capture devices. To filter for a specific subset of devices, use the MakeBitmask node with EMediaVideoCaptureDeviceFilter as the Bitmask Enum.",
    "parameters": [
      {
        "name": "OutDevices",
        "type": "TArray_FMediaCaptureDevice_",
        "optional": false,
        "out": true
      },
      {
        "name": "Filter",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMediaBlueprintFunctionLibrary",
    "name": "EnumerateAudioCaptureDevices",
    "description": "Enumerate available audio capture devices. To filter for a specific subset of devices, use the MakeBitmask node with EMediaAudioCaptureDeviceFilter as the Bitmask Enum.",
    "parameters": [
      {
        "name": "OutDevices",
        "type": "TArray_FMediaCaptureDevice_",
        "optional": false,
        "out": true
      },
      {
        "name": "Filter",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVersionInfoHandler",
    "name": "Get",
    "description": "",
    "parameters": [],
    "returnType": "UVersionInfoHandler"
  },
  {
    "class": "UMetasoundEditorSettings",
    "name": "GetAuditionPlatformNames",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMetasoundEditorSettings",
    "name": "GetAuditionPageNames",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateStringMetaSoundLiteral",
    "description": "Blueprint support for FMetasoundFrontendLiteral",
    "parameters": [
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateStringArrayMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateObjectMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateObjectArrayMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateMetaSoundLiteralFromParam",
    "description": "",
    "parameters": [
      {
        "name": "Param",
        "type": "FAudioParameter",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateIntMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateIntArrayMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateFloatMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateFloatArrayMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateBoolMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundFrontendLiteralBlueprintAccess",
    "name": "CreateBoolArrayMetaSoundLiteral",
    "description": "",
    "parameters": [
      {
        "name": "Value",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMetasoundFrontendLiteral"
  },
  {
    "class": "UMetasoundGeneratorHandle",
    "name": "CreateMetaSoundGeneratorHandle",
    "description": "Blueprint-facing interface to a FMetasoundGenerator on a UAudioComponent. Watch an output value. Get the CPU usage as \"fraction of real time\" used to render this metasound. NOTE: The MetasoundSource asset MUST have had its EnableRenderTiming function called before the metasound is started! Enable the profiling of the MetaSound render for this playing instance. You must call this before calling \"GetRuntimeCPUCoreUtilization\" (below) or you will just get 0.0 back for core utilization.",
    "parameters": [
      {
        "name": "OnComponent",
        "type": "UAudioComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "IsTime",
    "description": "Blueprint support for core types. If you want to support more core types, add them here. If you want to support types introduced in other plugins, create a blueprint library in that plugin.",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "IsString",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "IsInt32",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "IsFloat",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "IsBool",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "GetTimeSeconds",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "GetString",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "GetInt32",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "GetFloat",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMetasoundOutputBlueprintAccess",
    "name": "GetBool",
    "description": "",
    "parameters": [
      {
        "name": "Output",
        "type": "FMetaSoundOutput",
        "optional": false,
        "out": false
      },
      {
        "name": "Success",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMetaSoundQualityHelper",
    "name": "GetQualityNames",
    "description": "Returns a list of quality settings to present to a combobox",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMetaSoundSettings",
    "name": "GetQualityNames",
    "description": "Returns an array of quality setting names. Can be used to present to a combobox. Ex: * UPROPERTY(... meta=(GetOptions=\"MetasoundEngine.MetaSoundSettings.GetQualityNames\")) * FName QualitySetting;",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMetaSoundSettings",
    "name": "GetPageNames",
    "description": "Returns an array of page names. Can be used to present to a combobox. Ex: * UPROPERTY(... meta=(GetOptions=\"MetasoundEngine.MetaSoundSettings.GetPageNames\")) * FName Page;",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMetasoundParameterPack",
    "name": "MakeMetasoundParameterPack",
    "description": "Here is the UObject BlueprintType that can be used in c++ and blueprint code. It holds a FMetasoundParamStorage instance and can pass it along to the audio system's SetObjectParameter function via an AudioProxy.",
    "parameters": [],
    "returnType": "ESetParamResult"
  },
  {
    "class": "UMobilePatchingLibrary",
    "name": "RequestContent",
    "description": "Attempt to download manifest file using specified manifest URL. On success it will return an object that represents remote content. This object can be queried for additional information, like total content size, download size, etc. User can choose to download and install remote content.",
    "parameters": [
      {
        "name": "RemoteManifestURL",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CloudURL",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InstallDirectory",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OnSucceeded",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "OnFailed",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMobilePatchingLibrary",
    "name": "HasActiveWiFiConnection",
    "description": "Whether WiFi connection is currently available",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UMobilePatchingLibrary",
    "name": "GetSupportedPlatformNames",
    "description": "Get the list of supported platform names on this device. Example: Android_ETC2, Android_ASTC",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMobilePatchingLibrary",
    "name": "GetInstalledContent",
    "description": "Get the installed content. Will return non-null object if there is an installed content at specified directory User can choose to mount installed content into the game",
    "parameters": [
      {
        "name": "InstallDirectory",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMobileInstalledContent"
  },
  {
    "class": "UMobilePatchingLibrary",
    "name": "GetActiveDeviceProfileName",
    "description": "Get the name of currently selected device profile name",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UModularMovementComponent",
    "name": "SetSleepOnBody",
    "description": "Gather wheels. Can be used to attach additional wheels such as semi truck trailers Set input functions",
    "parameters": [
      {
        "name": "PrimitiveComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Sleep",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "UpdateWheelState",
    "description": "ADVANCED: Update wheel state on the wheel (Better to use a previous wheel state and update it and set it on the wheel )",
    "parameters": [
      {
        "name": "Wheel",
        "type": "UModularWheel",
        "optional": false,
        "out": false
      },
      {
        "name": "NewWheelState",
        "type": "FModularWheelState",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "SetupWheelLocationFromBone",
    "description": "",
    "parameters": [
      {
        "name": "Mesh",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Wheels",
        "type": "TArray_UTrackableComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "BoneNamePrefix",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "SetThrottleInputOnModularVehicle",
    "description": "Will ignore if movementComponent was not Modular Vehicle",
    "parameters": [
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Throttle",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "SetSteerInputOnModularVehicle",
    "description": "Will ignore if movementComponent was not Modular Vehicle",
    "parameters": [
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Steer",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "SetHandBrakeInputOnModularVehicle",
    "description": "Will ignore if movementComponent was not Modular Vehicle",
    "parameters": [
      {
        "name": "Pawn",
        "type": "APawn",
        "optional": false,
        "out": false
      },
      {
        "name": "Brake",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetWheelsTouchingGround",
    "description": "Wheels",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetWheelAnimationData",
    "description": "actual rotation does not give you acuurate steering and rotation values its has some corrections applied to it so get steering from dedicated values (additional data returned don't affect performance )",
    "parameters": [
      {
        "name": "Wheel",
        "type": "UModularWheel",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "DeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetGearBox",
    "description": "",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UModularGearBox"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetForwardSpeedMPH",
    "description": "",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetForwardSpeedKMH",
    "description": "",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetForwardSpeedCMs",
    "description": "",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetEngineRpmRatio",
    "description": "Returns rpm ranged from 0-1 Do not use for audio without interpolation",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "GetEngineRpm",
    "description": "Do not use for audio without interpolation",
    "parameters": [
      {
        "name": "MovementComponent",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "DrawDebugSphereWithDepth",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Depth",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UModularVehicleFunctionLibrary",
    "name": "CapsuleTraceSingleWithRotation",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Start",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rot",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HalfHeight",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHit",
        "type": "FHitResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UVehicleInputProcessor",
    "name": "IsDrifting",
    "description": "Class for manipulating input based on vehicle state Main drift assistance functions",
    "parameters": [
      {
        "name": "ModularMovement",
        "type": "UModularMovementComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionWarpingUtilities",
    "name": "GetMotionWarpingWindowsFromAnimation",
    "description": "",
    "parameters": [
      {
        "name": "Animation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "OutWindows",
        "type": "TArray_FMotionWarpingWindowData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionWarpingUtilities",
    "name": "GetMotionWarpingWindowsForWarpTargetFromAnimation",
    "description": "",
    "parameters": [
      {
        "name": "Animation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "WarpTargetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutWindows",
        "type": "TArray_FMotionWarpingWindowData_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionWarpingUtilities",
    "name": "ExtractRootMotionFromAnimation",
    "description": "Extract Root Motion transform from a contiguous position range",
    "parameters": [
      {
        "name": "Animation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "URootMotionModifier_Scale",
    "name": "AddRootMotionModifierScale",
    "description": "URootMotionModifier_Scale",
    "parameters": [
      {
        "name": "InMotionWarpingComp",
        "type": "UMotionWarpingComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InAnimation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "InStartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InEndTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InScale",
        "type": "FVector",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "URootMotionModifier_Scale"
  },
  {
    "class": "URootMotionModifier_SkewWarp",
    "name": "AddRootMotionModifierSkewWarp",
    "description": "",
    "parameters": [
      {
        "name": "InMotionWarpingComp",
        "type": "UMotionWarpingComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "InAnimation",
        "type": "UAnimSequenceBase",
        "optional": false,
        "out": false
      },
      {
        "name": "InStartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InEndTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InWarpTargetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InWarpPointAnimProvider",
        "type": "EWarpPointAnimProvider",
        "optional": false,
        "out": false
      },
      {
        "name": "InWarpPointAnimTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "InWarpPointAnimBoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInWarpTranslation",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bInIgnoreZAxis",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bInWarpRotation",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InRotationType",
        "type": "EMotionWarpRotationType",
        "optional": true,
        "out": false
      },
      {
        "name": "InRotationMethod",
        "type": "EMotionWarpRotationMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "InWarpRotationTimeMultiplier",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InWarpMaxRotationRate",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "URootMotionModifier_SkewWarp"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "ResolveVersionNumber",
    "description": "If the version number is explicitly specified on the Output Setting node, returns that. Otherwise searches the output directory for the highest version that already exists (and increments it by one if bGetNextVersion is true). Returns -1 if the version could not be resolved.",
    "parameters": [
      {
        "name": "InParams",
        "type": "FMovieGraphFilenameResolveParams",
        "optional": false,
        "out": false
      },
      {
        "name": "bGetNextVersion",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "ResolveFilenameFormatArguments",
    "description": "Takes a Movie Graph format string (in the form of {token}), a list of parameters (which normally come from the running UMovieGraphPipeline) and resolves them into a string. Unknown tokens are ignored. Which tokens can be resolved depends on the contents of InParams, tokens from settings rely on a evaluated config being provided, etc. - but takes (mostly) POD here to allow using this function outside of the render runtime. - needed to do your own string resolving with the final dataset.",
    "parameters": [
      {
        "name": "InFormatString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InParams",
        "type": "FMovieGraphFilenameResolveParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutMergedFormatArgs",
        "type": "FMovieGraphResolveArgs",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "NamedResolutionFromSize",
    "description": "Create a Named Resolution from the given resolution. Given named resolution will be named \"Custom\".",
    "parameters": [
      {
        "name": "InResX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InResY",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieGraphNamedResolution"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "NamedResolutionFromProfile",
    "description": "Create a Named Resolution from the profile name. Throws a Kismet Exception if the profile name isn't found. The known profiles can be found in UMovieGraphProjectSettings's CDO.",
    "parameters": [
      {
        "name": "InResolutionProfileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieGraphNamedResolution"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "IsNamedResolutionValid",
    "description": "Utility function for checking if a given resolution profile name is valid, since NamedResolutionFromProfile will throw a kismet exception, but blueprints can't actually try/catch them.",
    "parameters": [
      {
        "name": "InResolutionProfileName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetRootTimecode",
    "description": "Gets the timecode of the current render at the root (sequence) level.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimecode"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetRootFrameNumber",
    "description": "Gets the frame number of the current render at the root (sequence) level.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetPipelineState",
    "description": "Get the current state of the specified pipeline. See EMovieRenderPipelineState for more detail about each state.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMovieRenderPipelineState"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetOverallSegmentCounts",
    "description": "Gets the number of segments (shots) that will be rendered.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCurrentIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTotalCount",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetOverallOutputFrames",
    "description": "Determines the overall current frame number and total number of frames.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCurrentIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTotalCount",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetJobName",
    "description": "Gets the name of the current job.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetJobInitializationTime",
    "description": "Gets the time the job was initialized.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetJobAuthor",
    "description": "Gets the author of the current job, or the logged in user's username if the job has no specified author.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetEstimatedTimeRemaining",
    "description": "Get the estimated amount of time remaining for the current pipeline. Based on looking at the total amount of samples to render vs. how many have been completed so far. Inaccurate when Time Dilation is used, and gets more accurate over the course of the render.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutEstimate",
        "type": "FTimespan",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetEffectiveOutputResolution",
    "description": "In case of overscan percentage being higher than 0, additional pixels are rendered. This function returns the resolution with overscan taken into account.",
    "parameters": [
      {
        "name": "InEvaluatedGraph",
        "type": "UMovieGraphEvaluatedConfig",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultOverscan",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetEffectiveFrameRate",
    "description": "If InNode is valid, inspects the provided OutputsettingNode to determine if it wants to override the Frame Rate, and if so, returns the overwritten frame rate. If nullptr, or it does not have the bOverride_bUseCustomFrameRate flag set, then InDefaultrate is returned.",
    "parameters": [
      {
        "name": "InNode",
        "type": "UMovieGraphGlobalOutputSettingNode",
        "optional": false,
        "out": false
      },
      {
        "name": "InDefaultRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameRate"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentVersionNumber",
    "description": "Retrieves the cached version number calculated for the current shot, which depends on where the version token was used in the File Name Output ie: If {version} comes before {shot_name} then all shots will use the same version number, but if it comes afterwards then each shot may have a different version (which is the highest number found of that particular shot). This function should retrieve what is used in the filename writing step either way.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentShotTimecode",
    "description": "Gets the timecode of the current render at the shot level.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimecode"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentShotFrameNumber",
    "description": "Gets the frame number of the current render at the shot level.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentSegmentWorkMetrics",
    "description": "Gets the work metrics for the segment (shot) that is currently being rendered.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMoviePipelineSegmentWorkMetrics"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentSegmentState",
    "description": "Gets the state of the segment (shot) currently being rendered.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMovieRenderShotState"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentSegmentName",
    "description": "Gets the name of the segment (shot) currently being rendered.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOuterName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutInnerName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentFocusDistance",
    "description": "Gets the focus distance for the camera currently in use.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "InCameraIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentFocalLength",
    "description": "Gets the focal length for the camera currently in use.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "InCameraIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentExecutorShot",
    "description": "Gets the current shot being rendered by the graph (could be nullptr if rendering hasn't started or has moved to Finalize!)",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMoviePipelineExecutorShot"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentCineCamera",
    "description": "Gets the currently active cine camera, or nullptr if one was not found.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "InCameraIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UCineCameraComponent"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCurrentAperture",
    "description": "Gets the aperture for the camera currently in use.",
    "parameters": [
      {
        "name": "InMovieGraphPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "InCameraIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieGraphBlueprintLibrary",
    "name": "GetCompletionPercentage",
    "description": "Gets the completion percent of the Pipeline in 0-1",
    "parameters": [
      {
        "name": "InPipeline",
        "type": "UMovieGraphPipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieGraphRenderLayerSubsystem",
    "name": "GetFromWorld",
    "description": "The primary means of controlling render layers in MRQ. Render layers can be added/registered with the subsystem, then made active in order to view them. Collections and modifiers can also be viewed, but they do not need to be added to the subsystem ahead of time. Applies the given layer. The layer does not need to have been registered with AddRenderLayer(). Applies the layer with the given name. The layer needs to have been registered with AddRenderLayer(). Clear out all tracked render layers and collections. Removes the render layer with the given name. After removal it can no longer be made active with SetActiveRenderLayerBy*(). Gets all render layers which are currently tracked by the system. Get this subsystem for a specific world. Handy for use from Python.",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieGraphRenderLayer_"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "UpdateJobShotListFromSequence",
    "description": "Scan the provided sequence in the job to see which camera cut sections we would try to render and update the job's shotlist.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InJob",
        "type": "UMoviePipelineExecutorJob",
        "optional": false,
        "out": false
      },
      {
        "name": "bShotsChanged",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "ResolveVersionNumber",
    "description": "If version number is manually specified by the Job, returns that. Otherwise search the Output Directory for the highest version already existing (and increment it by one if bGetNextVersion is true).",
    "parameters": [
      {
        "name": "InParams",
        "type": "FMoviePipelineFilenameResolveParams",
        "optional": false,
        "out": false
      },
      {
        "name": "bGetNextVersion",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "ResolveFilenameFormatArguments",
    "description": "Resolves the provided InFormatString by converting {format_strings} into settings provided by the primary config. Expected that you fill out all of the parameters so that they can be used to resolve strings, otherwise default values may be used.",
    "parameters": [
      {
        "name": "InFormatString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InParams",
        "type": "FMoviePipelineFilenameResolveParams",
        "optional": false,
        "out": false
      },
      {
        "name": "OutFinalPath",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutMergedFormatArgs",
        "type": "FMoviePipelineFormatArgs",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "LoadManifestFileFromString",
    "description": "Loads the specified manifest file and converts it into an UMoviePipelineQueue. Use in combination with SaveQueueToManifestFile.",
    "parameters": [
      {
        "name": "InManifestFilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMoviePipelineQueue"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetRootTimecode",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimecode"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetRootFrameNumber",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetPipelineState",
    "description": "Get the current state of the specified Pipeline. See EMovieRenderPipelineState for more detail about each state.",
    "parameters": [
      {
        "name": "InPipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMovieRenderPipelineState"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetOverallSegmentCounts",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCurrentIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTotalCount",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetOverallOutputFrames",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutCurrentIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTotalCount",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetMoviePipelineEngineChangelistLabel",
    "description": "Get a string to represent the Changelist Number for the burn in. This can be driven by a Modular Feature if you want to permanently replace it with different information.",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetMapPackageName",
    "description": "Get the package name for the map in this job. The level travel command requires the package path and not the asset path.",
    "parameters": [
      {
        "name": "InJob",
        "type": "UMoviePipelineExecutorJob",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetJobName",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetJobInitializationTime",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FDateTime"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetJobAuthor",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetEstimatedTimeRemaining",
    "description": "Get the estimated amount of time remaining for the current pipeline. Based on looking at the total amount of samples to render vs. how many have been completed so far. Inaccurate when Time Dilation is used, and gets more accurate over the course of the render.",
    "parameters": [
      {
        "name": "InPipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutEstimate",
        "type": "FTimespan",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetEffectiveOutputResolution",
    "description": "In case of Overscan percentage being higher than 0 we render additional pixels. This function returns the resolution with overscan taken into account.",
    "parameters": [
      {
        "name": "InPrimaryConfig",
        "type": "UMoviePipelinePrimaryConfig",
        "optional": false,
        "out": false
      },
      {
        "name": "InPipelineExecutorShot",
        "type": "UMoviePipelineExecutorShot",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultOverscan",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentVersionNumber",
    "description": "Retrieves the cached version number calculated for the current shot, which depends on where the version token was used in the File Name Output ie: If {version} comes before {shot_name} then all shots will use the same version number, but if it comes afterwards then each shot may have a different version (which is the highest number found of that particular shot). This function should retrieve what is used in the filename writing step either way.",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentShotTimecode",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTimecode"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentShotFrameNumber",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentSequence",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelSequence"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentSegmentWorkMetrics",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMoviePipelineSegmentWorkMetrics"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentSegmentState",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMovieRenderShotState"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentSegmentName",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOuterName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "OutInnerName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentFocusDistance",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentFocalLength",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentExecutorShot",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMoviePipelineExecutorShot"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCurrentAperture",
    "description": "",
    "parameters": [
      {
        "name": "InMoviePipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "GetCompletionPercentage",
    "description": "Gets the completion percent of the Pipeline in 0-1",
    "parameters": [
      {
        "name": "InPipeline",
        "type": "UMoviePipeline",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "FindOrGetDefaultSettingForShot",
    "description": "Allows access to a setting of provided type for specific shot.",
    "parameters": [
      {
        "name": "InSettingType",
        "type": "TSubclassOf_UMoviePipelineSetting_",
        "optional": false,
        "out": false
      },
      {
        "name": "InPrimaryConfig",
        "type": "UMoviePipelinePrimaryConfig",
        "optional": false,
        "out": false
      },
      {
        "name": "InShot",
        "type": "UMoviePipelineExecutorShot",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMoviePipelineSetting"
  },
  {
    "class": "UMoviePipelineBlueprintLibrary",
    "name": "DuplicateSequence",
    "description": "Duplicates the specified sequence using a medium depth copy. Standard duplication will only duplicate the top level Sequence (since shots and sub-sequences are other standalone assets) so this function recursively duplicates the given sequence, shot and subsequence and then fixes up the references to point to newly duplicated sequences. Use at your own risk. Some features may not work when duplicated (complex object binding arrangements, blueprint GetSequenceBinding nodes, etc.) but can be useful when wanting to create a bunch of variations with minor differences (such as swapping out an actor, track, etc.) This does not duplicate any assets that the sequence points to outside of Shots/Subsequences.",
    "parameters": [
      {
        "name": "Outer",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneSequence"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "WarnUserOfUnsavedMap",
    "description": "Pop a dialog box that specifies that they cannot render due to never saved map. Only shows OK button.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "SaveQueueToManifestFile",
    "description": "Take the specified Queue, duplicate it and write it to disk in the ../Saved/MovieRenderPipeline/ folder. Returns the duplicated queue.",
    "parameters": [
      {
        "name": "InPipelineQueue",
        "type": "UMoviePipelineQueue",
        "optional": false,
        "out": false
      },
      {
        "name": "OutManifestFilePath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UMoviePipelineQueue"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "ResolveOutputDirectoryFromJob",
    "description": "Resolves as much of the output directory for this job into a usable directory path as possible. Cannot resolve anything that relies on shot name, frame numbers, etc.",
    "parameters": [
      {
        "name": "InJob",
        "type": "UMoviePipelineExecutorJob",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "IsMapValidForRemoteRender",
    "description": "Checks to see if any of the Jobs try to point to maps that wouldn't be valid on a remote render (ie: unsaved maps)",
    "parameters": [
      {
        "name": "InJobs",
        "type": "TArray_UMoviePipelineExecutorJob_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "GetDisplayOutputPathFromJob",
    "description": "Returns display string for output directory for this job. Does not resolve the full path from tokens.",
    "parameters": [
      {
        "name": "InJob",
        "type": "UMoviePipelineExecutorJob",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOutputPath",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "ExportConfigToAsset",
    "description": "",
    "parameters": [
      {
        "name": "InConfig",
        "type": "UMoviePipelinePrimaryConfig",
        "optional": false,
        "out": false
      },
      {
        "name": "InPackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InFileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInSaveAsset",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutAsset",
        "type": "UMoviePipelinePrimaryConfig",
        "optional": false,
        "out": true
      },
      {
        "name": "OutErrorReason",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "EnsureJobHasDefaultSettings",
    "description": "Ensure the job has the settings specified by the project settings added. If they're already added we don't modify the object so that we don't make it confused about whether or not you've modified the preset.",
    "parameters": [
      {
        "name": "InJob",
        "type": "UMoviePipelineExecutorJob",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "CreateJobFromSequence",
    "description": "Create a job from a level sequence. Sets the map as the currently editor world, the author, the sequence and the job name as the sequence name on the new job. Returns the newly created job.",
    "parameters": [
      {
        "name": "InPipelineQueue",
        "type": "UMoviePipelineQueue",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMoviePipelineExecutorJob"
  },
  {
    "class": "UMoviePipelineEditorBlueprintLibrary",
    "name": "ConvertManifestFileToString",
    "description": "Loads the specified manifest file and converts it into an FString to be embedded with HTTP REST requests. Use in combination with SaveQueueToManifestFile.",
    "parameters": [
      {
        "name": "InManifestFilePath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UBuiltInDynamicBindingResolverLibrary",
    "name": "ResolveToPlayerPawn",
    "description": "Default dynamic binding resolver library, with several basic resolver functions. Resolve the bound object to the player's pawn",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerControllerIndex",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FMovieSceneDynamicBindingResolveResult"
  },
  {
    "class": "UMovieSceneCustomBinding",
    "name": "GetBaseEnginePriority",
    "description": "A custom binding. Allows users to define their own binding resolution types, including dynamic 'Replaceable' bindings with previews in editor, as well as Spawnable types.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneCustomBinding",
    "name": "GetBaseCustomPriority",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneCaptureEnvironment",
    "name": "IsCaptureInProgress",
    "description": "Return true if there is any capture currently active (even in a warm-up state). Useful for checking whether to do certain operations in BeginPlay",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneCaptureEnvironment",
    "name": "GetCaptureFrameNumber",
    "description": "Get the frame number of the current capture",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneCaptureEnvironment",
    "name": "GetCaptureElapsedTime",
    "description": "Get the total elapsed time of the current capture in seconds",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneCaptureEnvironment",
    "name": "FindImageCaptureProtocol",
    "description": "Attempt to locate a capture protocol - may not be in a capturing state",
    "parameters": [],
    "returnType": "UMovieSceneImageCaptureProtocolBase"
  },
  {
    "class": "UMovieSceneCaptureEnvironment",
    "name": "FindAudioCaptureProtocol",
    "description": "Attempt to locate a capture protocol - may not be in a capturing state",
    "parameters": [],
    "returnType": "UMovieSceneAudioCaptureProtocolBase"
  },
  {
    "class": "UMovieSceneAsyncAction_SequencePrediction",
    "name": "PredictWorldTransformAtTime",
    "description": "Async BP action that represents a pending prediction that is dispatched on a playing sequence. Initiate an asynchronous prediction for the specified component's world transform at a specific time in a sequence Changes in attachment between the sequence's current time, and the predicted time are not accounted for Calling this function on a stopped sequence player is undefined.",
    "parameters": [
      {
        "name": "Player",
        "type": "UMovieSceneSequencePlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneAsyncAction_SequencePrediction"
  },
  {
    "class": "UMovieSceneAsyncAction_SequencePrediction",
    "name": "PredictWorldTransformAtFrame",
    "description": "Initiate an asynchronous prediction for the specified component's world transform at a specific time in a sequence Changes in attachment between the sequence's current time, and the predicted time are not accounted for Calling this function on a stopped sequence player is undefined.",
    "parameters": [
      {
        "name": "Player",
        "type": "UMovieSceneSequencePlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "FrameTime",
        "type": "FFrameTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneAsyncAction_SequencePrediction"
  },
  {
    "class": "UMovieSceneAsyncAction_SequencePrediction",
    "name": "PredictLocalTransformAtTime",
    "description": "Initiate an asynchronous prediction for the specified component's local transform at a specific time in a sequence Changes in attachment between the sequence's current time, and the predicted time are not accounted for Calling this function on a stopped sequence player is undefined.",
    "parameters": [
      {
        "name": "Player",
        "type": "UMovieSceneSequencePlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneAsyncAction_SequencePrediction"
  },
  {
    "class": "UMovieSceneAsyncAction_SequencePrediction",
    "name": "PredictLocalTransformAtFrame",
    "description": "Initiate an asynchronous prediction for the specified component's local transform at a specific time in a sequence Changes in attachment between the sequence's current time, and the predicted time are not accounted for Calling this function on a stopped sequence player is undefined.",
    "parameters": [
      {
        "name": "Player",
        "type": "UMovieSceneSequencePlayer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "FrameTime",
        "type": "FFrameTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneAsyncAction_SequencePrediction"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "NavigationRaycast",
    "description": "Removes given actor from the list of active navigation enforcers. @@see RegisterNavigationInvoker for more details will limit the number of simultaneously running navmesh tile generation jobs to specified number. @@param MaxNumberOfJobs gets trimmed to be at least 1. You cannot use this function to pause navmesh generation Brings limit of simultaneous navmesh tile generation jobs back to Project Setting's default value Registers given actor as a \"navigation enforcer\" which means navigation system will make sure navigation is being generated in specified radius around it. @@note: you need NavigationSystem's GenerateNavigationOnlyAroundNavigationInvokers to be set to true to take advantage of this feature Performs navigation raycast on NavigationData appropriate for given Querier. @@param Querier if not passed default navigation data will be used @@param HitLocation if line was obstructed this will be set to hit location. Otherwise it contains SegmentEnd @@return true if line from RayStart to RayEnd was obstructed. Also, true when no navigation data present",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "RayStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RayEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "HitLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      },
      {
        "name": "Querier",
        "type": "AController",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "K2_ProjectPointToNavigation",
    "description": "Project a point onto the NavigationData",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Point",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ProjectedLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": false,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": false,
        "out": false
      },
      {
        "name": "QueryExtent",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "K2_GetRandomReachablePointInRadius",
    "description": "Generates a random location reachable from given Origin location. @@return Return Value represents if the call was successful",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RandomLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "K2_GetRandomPointInNavigableRadius",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RandomLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "K2_GetRandomLocationInNavigableRadius",
    "description": "Generates a random location in navigable space within given radius of Origin. @@return Return Value represents if the call was successful",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "RandomLocation",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "IsNavigationBeingBuiltOrLocked",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "IsNavigationBeingBuilt",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "GetPathLength",
    "description": "Potentially expensive. Use with caution",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PathStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathLength",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "GetPathCost",
    "description": "Potentially expensive. Use with caution. Consider using UPathFollowingComponent::GetRemainingPathCost instead",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PathStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathCost",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "NavData",
        "type": "ANavigationData",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "GetNavigationSystem",
    "description": "Blueprint functions",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNavigationSystemV1"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "FindPathToLocationSynchronously",
    "description": "Finds path instantly, in a FindPath Synchronously. @@param PathfindingContext could be one of following: NavigationData (like Navmesh actor), Pawn or Controller. This parameter determines parameters of specific pathfinding query",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PathStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathEnd",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PathfindingContext",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UNavigationPath"
  },
  {
    "class": "UNavigationSystemV1",
    "name": "FindPathToActorSynchronously",
    "description": "Finds path instantly, in a FindPath Synchronously. Main advantage over FindPathToLocationSynchronously is that the resulting path will automatically get updated if goal actor moves more than TetherDistance away from last path node @@param PathfindingContext could be one of following: NavigationData (like Navmesh actor), Pawn or Controller. This parameter determines parameters of specific pathfinding query",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PathStart",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "GoalActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TetherDistance",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "PathfindingContext",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "FilterClass",
        "type": "TSubclassOf_UNavigationQueryFilter_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UNavigationPath"
  },
  {
    "class": "UAsyncNiagaraCaptureSimCache",
    "name": "CaptureNiagaraSimCacheUntilComplete",
    "description": "Capture frames from the provided simulation into a SimCache until the simulation becomes inactive or completes. Capture occurs at the end of each frame with the first frame being this frame. CaptureRate allows you to reduce the rate of capture, i.e. a rate of 2 would capture frames 0, 2, 4, etc. When AdvanceSimulation is true we will manually advance the simulation until the capture is complete inside a loop, rather than reading from the component each frame.",
    "parameters": [
      {
        "name": "SimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": false
      },
      {
        "name": "CreateParameters",
        "type": "FNiagaraSimCacheCreateParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "NiagaraComponent",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": true
      },
      {
        "name": "CaptureRate",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bAdvanceSimulation",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AdvanceDeltaTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncNiagaraCaptureSimCache"
  },
  {
    "class": "UAsyncNiagaraCaptureSimCache",
    "name": "CaptureNiagaraSimCacheMultiFrame",
    "description": "Capture multiple frames from the provided simulation into a SimCache until the simulation becomes inactive, completes or we hit the NumFrames limit. Capture occurs at the end of each frame with the first frame being this frame. CaptureRate allows you to reduce the rate of capture, i.e. a rate of 2 would capture frames 0, 2, 4, etc. When AdvanceSimulation is true we will manually advance the simulation in a loop until we have captured the number of frames request, rather than reading from the component each frame.",
    "parameters": [
      {
        "name": "SimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": false
      },
      {
        "name": "CreateParameters",
        "type": "FNiagaraSimCacheCreateParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "NiagaraComponent",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": true
      },
      {
        "name": "NumFrames",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "CaptureRate",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bAdvanceSimulation",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AdvanceDeltaTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAsyncNiagaraCaptureSimCache"
  },
  {
    "class": "UAsyncNiagaraCaptureSimCache",
    "name": "CaptureNiagaraSimCache",
    "description": "Capture a simulation cache with customizable capture parameters.",
    "parameters": [
      {
        "name": "SimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": false
      },
      {
        "name": "CreateParameters",
        "type": "FNiagaraSimCacheCreateParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "NiagaraComponent",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CaptureParameters",
        "type": "FNiagaraSimCacheCaptureParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UAsyncNiagaraCaptureSimCache"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "WriteToNiagaraDataChannelSingle",
    "description": "A C++ and Blueprint accessible library of utility functions for accessing Niagara DataChannel Writes a single element to a Niagara Data Channel. The element won't be immediately visible to readers, as it needs to be processed first. The earliest point it can be read is in the next tick group.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchParams",
        "type": "FNiagaraDataChannelSearchParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToBlueprint",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToNiagaraCPU",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToNiagaraGPU",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "WriteToNiagaraDataChannel",
    "description": "Initializes and returns the Niagara Data Channel writer to write N elements to the given data channel.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchParams",
        "type": "FNiagaraDataChannelSearchParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "Count",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToGame",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToCPU",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bVisibleToGPU",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "DebugSource",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraDataChannelWriter"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "ReadFromNiagaraDataChannelSingle",
    "description": "Reads a single entry from the given data channel, if possible. Reading the current frame allows for zero latency reads, but any data elements that are generated after this reader is used are missed. Reading the previous frame's data introduces a frame of latency but ensures we never miss any data as we have access to the whole frame.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchParams",
        "type": "FNiagaraDataChannelSearchParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "bReadPreviousFrame",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ReadResult",
        "type": "ENiagartaDataChannelReadResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "ReadFromNiagaraDataChannel",
    "description": "Initializes and returns the Niagara Data Channel reader for the given data channel. Reading the current frame allows for zero latency reads, but any data elements that are generated after this reader is used are missed. Reading the previous frame's data introduces a frame of latency but ensures we never miss any data as we have access to the whole frame.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchParams",
        "type": "FNiagaraDataChannelSearchParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "bReadPreviousFrame",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraDataChannelReader"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "GetNiagaraDataChannel",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraDataChannelHandler"
  },
  {
    "class": "UNiagaraDataChannelLibrary",
    "name": "GetDataChannelElementCount",
    "description": "Returns the number of readable elements in the given data channel Reading the current frame allows for zero latency reads, but any data elements that are generated after this reader is used are missed. Reading the previous frame's data introduces a frame of latency but ensures we never miss any data as we have access to the whole frame.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Channel",
        "type": "UNiagaraDataChannelAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchParams",
        "type": "FNiagaraDataChannelSearchParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "bReadPreviousFrame",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVectorValue",
    "description": "C++ and Blueprint library for accessing array types Sets a single value within a Niagara Array FVector.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVector4Value",
    "description": "Sets a single value within a Niagara Array FVector4.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector4",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVector4",
    "description": "Sets Niagara Array FVector4 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FVector4_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVector2DValue",
    "description": "Sets a single value within a Niagara Array FVector2D.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVector2D",
    "description": "Sets Niagara Array FVector2D Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayVector",
    "description": "Sets Niagara Array FVector Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayUInt8Value",
    "description": "Sets a single value within a Niagara Array UInt8.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayUInt8",
    "description": "Sets Niagara Array UInt8 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayQuatValue",
    "description": "Sets a single value within a Niagara Array FQuat.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FQuat",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayQuat",
    "description": "Sets Niagara Array FQuat Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FQuat_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayPositionValue",
    "description": "",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayPosition",
    "description": "Sets Niagara Array FVector Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayMatrixValue",
    "description": "Sets a single value within a Niagara Array FMatrix.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FMatrix",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyLWCRebase",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayMatrix",
    "description": "Sets Niagara Array FMatrix Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FMatrix_",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyLWCRebase",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayInt32Value",
    "description": "Sets a single value within a Niagara Array Int32.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayInt32",
    "description": "Sets Niagara Array Int32 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayFloatValue",
    "description": "Sets a single value within a Niagara Array Float.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayFloat",
    "description": "Sets Niagara Array Float Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_number_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayColorValue",
    "description": "Sets a single value within a Niagara Array FLinearColor.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayColor",
    "description": "Sets Niagara Array FLinearColor Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_FLinearColor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayBoolValue",
    "description": "Sets a single value within a Niagara Array Bool.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bSizeToFit",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "SetNiagaraArrayBool",
    "description": "Sets Niagara Array Bool Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ArrayData",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVectorValue",
    "description": "Gets a single value within a Niagara Array FVector.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVector4Value",
    "description": "Gets a single value within a Niagara Array FVector4.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVector4",
    "description": "Gets a copy of Niagara FVector4 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector4_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVector2DValue",
    "description": "Gets a single value within a Niagara Array FVector2D.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVector2D",
    "description": "Gets a copy of Niagara FVector2D Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector2D_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayVector",
    "description": "Gets a copy of Niagara FVector Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayUInt8Value",
    "description": "Gets a single value within a Niagara Array UInt8.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayUInt8",
    "description": "Gets a copy of Niagara UInt8 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayQuatValue",
    "description": "Gets a single value within a Niagara Array FQuat.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayQuat",
    "description": "Gets a copy of Niagara FQuat Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FQuat_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayPositionValue",
    "description": "Gets a single value within a Niagara Array Position.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayPosition",
    "description": "Gets a copy of Niagara Position Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FVector_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayMatrixValue",
    "description": "Gets a single value within a Niagara Array FMatrix.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyLWCRebase",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FMatrix"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayMatrix",
    "description": "Gets a copy of Niagara FMatrix Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyLWCRebase",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FMatrix_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayInt32Value",
    "description": "Gets a single value within a Niagara Array Int32.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayInt32",
    "description": "Gets a copy of Niagara Int32 Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayFloatValue",
    "description": "Gets a single value within a Niagara Array Float.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayFloat",
    "description": "Gets a copy of Niagara Float Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_number_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayColorValue",
    "description": "Gets a single value within a Niagara Array FLinearColor.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayColor",
    "description": "Gets a copy of Niagara FLinearColor Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FLinearColor_"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayBoolValue",
    "description": "Gets a single value within a Niagara Array Bool.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNiagaraDataInterfaceArrayFunctionLibrary",
    "name": "GetNiagaraArrayBool",
    "description": "Gets a copy of Niagara Bool Data.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_boolean_"
  },
  {
    "class": "UNiagaraDataInterfaceSceneCapture2D",
    "name": "SetSceneCapture2DManagedShowOnlyActors",
    "description": "Data Interface which can control or read from a scene capture component. Allows you to set the show only actors when Niagara manages the component.  If Niagara does not manage the component use the regular BP methods.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowOnlyActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceStaticMesh",
    "name": "SetNiagaraStaticMeshDIInstanceIndex",
    "description": "Data Interface allowing sampling of static meshes.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "UserParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewInstanceIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDataInterfaceUObjectPropertyReader",
    "name": "SetUObjectReaderPropertyRemap",
    "description": "Data interface to read properties from UObjects. Rather than having BP tick functions that push data into Niagara this data interface will instead pull them. Remaps a property reader, where the",
    "parameters": [
      {
        "name": "NiagaraComponent",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "UserParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "GraphName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RemapName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraDIRigidMeshCollisionFunctionLibrary",
    "name": "SetSourceActors",
    "description": "C++ and Blueprint library for accessing array types",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SpawnSystemAttachedWithParams",
    "description": "A C++ and Blueprint accessible library of utility functions for accessing Niagara simulations All positions & orientations are returned in Unreal reference frame & units, assuming the Leap device is located at the origin.",
    "parameters": [
      {
        "name": "SpawnParams",
        "type": "FFXSystemSpawnParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraComponent"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SpawnSystemAttached",
    "description": "",
    "parameters": [
      {
        "name": "SystemTemplate",
        "type": "UNiagaraSystem",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachToComponent",
        "type": "USceneComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "AttachPointName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bAutoActivate",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "PoolingMethod",
        "type": "ENCPoolMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "bPreCullCheck",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UNiagaraComponent"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SpawnSystemAtLocationWithParams",
    "description": "",
    "parameters": [
      {
        "name": "SpawnParams",
        "type": "FFXSystemSpawnParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraComponent"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SpawnSystemAtLocation",
    "description": "Spawns a Niagara System at the specified world location/rotation",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SystemTemplate",
        "type": "UNiagaraSystem",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoDestroy",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bAutoActivate",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "PoolingMethod",
        "type": "ENCPoolMethod",
        "optional": true,
        "out": false
      },
      {
        "name": "bPreCullCheck",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UNiagaraComponent"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetVolumeTextureObject",
    "description": "Overrides the Volume Texture for a Niagara Volume Texture Data Interface User Parameter.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UVolumeTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetTextureObject",
    "description": "Overrides the Texture Object for a Niagara Texture Data Interface User Parameter.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetTexture2DArrayObject",
    "description": "Overrides the 2D Array Texture for a Niagara 2D Array Texture Data Interface User Parameter.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Texture",
        "type": "UTexture2DArray",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetSkeletalMeshDataInterfaceSamplingRegions",
    "description": "Sets the SamplingRegion to use on the skeletal mesh data interface, this is destructive as it modifies the data interface.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SamplingRegions",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetSkeletalMeshDataInterfaceFilteredSockets",
    "description": "Sets the Filtered Sockets to use on the skeletal mesh data interface, this is destructive as it modifies the data interface.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FilteredSockets",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetSkeletalMeshDataInterfaceFilteredBones",
    "description": "Sets the Filtered Bones to use on the skeletal mesh data interface, this is destructive as it modifies the data interface.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "FilteredBones",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetSceneCapture2DDataInterfaceManagedMode",
    "description": "Sets managed mode parameters for the Scene capture 2D  data interface, this is destructive as it modifies the data interface.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "DIName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedCaptureSource",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedTextureSize",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedTextureFormat",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedProjectionType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedFOVAngle",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "ManagedOrthoWidth",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bManagedCaptureEveryFrame",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bManagedCaptureOnMovement",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowOnlyActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetComponentNiagaraGPURayTracedCollisionGroup",
    "description": "Sets the Niagara GPU ray traced collision group for the give primitive component.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Primitive",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionGroup",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "SetActorNiagaraGPURayTracedCollisionGroup",
    "description": "Sets the Niagara GPU ray traced collision group for all primitive components on the given actor.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionGroup",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "ReleaseNiagaraGPURayTracedCollisionGroup",
    "description": "Releases a collision group back to the system for use by ohers.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionGroup",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "OverrideSystemUserVariableStaticMeshComponent",
    "description": "Sets a Niagara StaticMesh parameter by name, overriding locally if necessary.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "OverrideSystemUserVariableStaticMesh",
    "description": "",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StaticMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "OverrideSystemUserVariableSkeletalMeshComponent",
    "description": "Sets a Niagara StaticMesh parameter by name, overriding locally if necessary.",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SkeletalMeshComponent",
        "type": "USkeletalMeshComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "GetNiagaraParameterCollection",
    "description": "This is gonna be totally reworked UFUNCTION(BlueprintCallable, Category = Niagara, meta = (Keywords = \"niagara System\", UnsafeDuringActorConstruction = \"true\")) static void SetUpdateScriptConstant(UNiagaraComponent* Component, FName EmitterName, FName ConstantName, FVector Value);",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Collection",
        "type": "UNiagaraParameterCollection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraParameterCollectionInstance"
  },
  {
    "class": "UNiagaraFunctionLibrary",
    "name": "AcquireNiagaraGPURayTracedCollisionGroup",
    "description": "Returns a free collision group for use in HWRT collision group filtering. Returns -1 on failure.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UNiagaraSimCacheFunctionLibrary",
    "name": "CreateNiagaraSimCache",
    "description": "Captures the simulation cache object that can be captured into using the various API calls.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraSimCache"
  },
  {
    "class": "UNiagaraSimCacheFunctionLibrary",
    "name": "CaptureNiagaraSimCacheImmediate",
    "description": "Captures the simulations current frame data into the SimCache. This happens immediately so you may need to be careful with tick order of the component you are capturing from. The return can be invalid if the component can not be captured for some reason (i.e. not active). When AdvanceSimulation is true we will manually advance the simulation one frame using the provided AdvanceDeltaTime before capturing.",
    "parameters": [
      {
        "name": "SimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": false
      },
      {
        "name": "CreateParameters",
        "type": "FNiagaraSimCacheCreateParameters",
        "optional": false,
        "out": false
      },
      {
        "name": "NiagaraComponent",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutSimCache",
        "type": "UNiagaraSimCache",
        "optional": false,
        "out": true
      },
      {
        "name": "bAdvanceSimulation",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "AdvanceDeltaTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "TrySetLocalValueAsInt",
    "description": "",
    "parameters": [
      {
        "name": "InInput",
        "type": "UNiagaraClipboardFunctionInput",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSucceeded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "InValue",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bLooseTyping",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "TryGetLocalValueAsInt",
    "description": "",
    "parameters": [
      {
        "name": "InInput",
        "type": "UNiagaraClipboardFunctionInput",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSucceeded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValue",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "TryGetLocalValueAsFloat",
    "description": "",
    "parameters": [
      {
        "name": "InInput",
        "type": "UNiagaraClipboardFunctionInput",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSucceeded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutValue",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "TryGetInputByName",
    "description": "",
    "parameters": [
      {
        "name": "InInputs",
        "type": "TArray_UNiagaraClipboardFunctionInput_",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutSucceeded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutInput",
        "type": "UNiagaraClipboardFunctionInput",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "GetTypeName",
    "description": "",
    "parameters": [
      {
        "name": "InInput",
        "type": "UNiagaraClipboardFunctionInput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateVec3LocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InVec3Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateVec2LocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InVec2Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateStructLocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InStructValue",
        "type": "UUserDefinedStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateLinkedValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputTypeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InLinkedValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateIntLocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InLocalValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateFloatLocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InLocalValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateExpressionValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputTypeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InExpressionValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateEnumLocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditCoditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InEnumType",
        "type": "UUserDefinedEnum",
        "optional": false,
        "out": false
      },
      {
        "name": "InEnumValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateDynamicValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputTypeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InDynamicValueName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDynamicValue",
        "type": "UNiagaraScript",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateDataValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InDataValue",
        "type": "UNiagaraDataInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UNiagaraClipboardEditorScriptingUtilities",
    "name": "CreateBoolLocalValueInput",
    "description": "",
    "parameters": [
      {
        "name": "InOuter",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InInputName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bInHasEditCondition",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bInEditConditionValue",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InBoolValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UNiagaraClipboardFunctionInput"
  },
  {
    "class": "UAchievementBlueprintLibrary",
    "name": "GetCachedAchievementProgress",
    "description": "Library of synchronous achievement calls out",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "AchievementID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bFoundID",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Progress",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAchievementBlueprintLibrary",
    "name": "GetCachedAchievementDescription",
    "description": "out",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "AchievementID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bFoundID",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Title",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "LockedDescription",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "UnlockedDescription",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "bHidden",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAchievementQueryCallbackProxy",
    "name": "CacheAchievements",
    "description": "Fetches and caches achievement progress from the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAchievementQueryCallbackProxy"
  },
  {
    "class": "UAchievementQueryCallbackProxy",
    "name": "CacheAchievementDescriptions",
    "description": "Fetches and caches achievement descriptions from the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAchievementQueryCallbackProxy"
  },
  {
    "class": "UAchievementWriteCallbackProxy",
    "name": "WriteProgress",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "AchievementName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Progress",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "UserTag",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAchievementWriteCallbackProxy"
  },
  {
    "class": "UAchievementWriteCallbackProxy",
    "name": "WriteAchievementProgress",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "AchievementName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Progress",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "UserTag",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAchievementWriteCallbackProxy"
  },
  {
    "class": "UConnectionCallbackProxy",
    "name": "ConnectToService",
    "description": "Connects to an online service such as Google Play",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UConnectionCallbackProxy"
  },
  {
    "class": "UCreateSessionCallbackProxy",
    "name": "CreateSession",
    "description": "Creates a session with the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "PublicConnections",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseLAN",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseLobbiesIfAvailable",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UCreateSessionCallbackProxy"
  },
  {
    "class": "UDestroySessionCallbackProxy",
    "name": "DestroySession",
    "description": "Destroys a session previously created by the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UDestroySessionCallbackProxy"
  },
  {
    "class": "UEndMatchCallbackProxy",
    "name": "EndMatch",
    "description": "End a match that is in progress while it is the current player's turn",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchActor",
        "type": "TScriptInterface_UTurnBasedMatchInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalPlayerOutcome",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherPlayersOutcome",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEndMatchCallbackProxy"
  },
  {
    "class": "UEndTurnCallbackProxy",
    "name": "EndTurn",
    "description": "Ends the turn for the current player",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TurnBasedMatchInterface",
        "type": "TScriptInterface_UTurnBasedMatchInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEndTurnCallbackProxy"
  },
  {
    "class": "UFindSessionsCallbackProxy",
    "name": "GetServerName",
    "description": "",
    "parameters": [
      {
        "name": "Result",
        "type": "FBlueprintSessionResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UFindSessionsCallbackProxy",
    "name": "GetPingInMs",
    "description": "",
    "parameters": [
      {
        "name": "Result",
        "type": "FBlueprintSessionResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UFindSessionsCallbackProxy",
    "name": "GetMaxPlayers",
    "description": "",
    "parameters": [
      {
        "name": "Result",
        "type": "FBlueprintSessionResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UFindSessionsCallbackProxy",
    "name": "GetCurrentPlayers",
    "description": "",
    "parameters": [
      {
        "name": "Result",
        "type": "FBlueprintSessionResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UFindSessionsCallbackProxy",
    "name": "FindSessions",
    "description": "Searches for advertised sessions with the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxResults",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseLAN",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseLobbies",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UFindSessionsCallbackProxy"
  },
  {
    "class": "UFindTurnBasedMatchCallbackProxy",
    "name": "FindTurnBasedMatch",
    "description": "Use the platform matchmaking service (like Game Center) to find a match.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchActor",
        "type": "TScriptInterface_UTurnBasedMatchInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "MinPlayers",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MaxPlayers",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerGroup",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowExistingMatches",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UFindTurnBasedMatchCallbackProxy"
  },
  {
    "class": "UInAppPurchaseCallbackProxy2",
    "name": "CreateProxyObjectForInAppPurchaseUnprocessedPurchases",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseCallbackProxy2"
  },
  {
    "class": "UInAppPurchaseCallbackProxy2",
    "name": "CreateProxyObjectForInAppPurchaseQueryOwned",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseCallbackProxy2"
  },
  {
    "class": "UInAppPurchaseCallbackProxy2",
    "name": "CreateProxyObjectForInAppPurchase",
    "description": "Kicks off a transaction for the provided product identifier",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "ProductRequest",
        "type": "FInAppPurchaseProductRequest2",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseCallbackProxy2"
  },
  {
    "class": "UInAppPurchaseCheckoutCallbackProxy",
    "name": "CreateProxyObjectForInAppPurchaseCheckout",
    "description": "Kicks off a transaction for the provided product identifier",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "ProductRequest",
        "type": "FInAppPurchaseProductRequest2",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseCheckoutCallbackProxy"
  },
  {
    "class": "UInAppPurchaseFinalizeProxy",
    "name": "CreateProxyObjectForInAppPurchaseFinalize",
    "description": "Finalizes a transaction for the provided transaction identifier",
    "parameters": [
      {
        "name": "InAppPurchaseReceipt",
        "type": "FInAppPurchaseReceiptInfo2",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseFinalizeProxy"
  },
  {
    "class": "UInAppPurchaseQueryCallbackProxy2",
    "name": "CreateProxyObjectForInAppPurchaseQuery",
    "description": "Queries a InAppPurchase for an integer value",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "ProductIdentifiers",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseQueryCallbackProxy2"
  },
  {
    "class": "UInAppPurchaseReceiptsCallbackProxy",
    "name": "CreateProxyObjectForInAppPurchaseRestoreOwnedProducts",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseReceiptsCallbackProxy"
  },
  {
    "class": "UInAppPurchaseReceiptsCallbackProxy",
    "name": "CreateProxyObjectForInAppPurchaseQueryOwnedProducts",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseReceiptsCallbackProxy"
  },
  {
    "class": "UInAppPurchaseReceiptsCallbackProxy",
    "name": "CreateProxyObjectForInAppPurchaseGetKnownReceipts",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseReceiptsCallbackProxy"
  },
  {
    "class": "UInAppPurchaseRestoreCallbackProxy2",
    "name": "CreateProxyObjectForInAppPurchaseRestore",
    "description": "Kicks off a transaction for the provided product identifier",
    "parameters": [
      {
        "name": "ConsumableProductFlags",
        "type": "TArray_FInAppPurchaseProductRequest2_",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UInAppPurchaseRestoreCallbackProxy2"
  },
  {
    "class": "UJoinSessionCallbackProxy",
    "name": "JoinSession",
    "description": "Joins a remote session with the default online subsystem",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchResult",
        "type": "FBlueprintSessionResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UJoinSessionCallbackProxy"
  },
  {
    "class": "ULeaderboardBlueprintLibrary",
    "name": "WriteLeaderboardInteger",
    "description": "A beacon host used for taking reservations for an existing game session Writes an integer value to the specified leaderboard",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StatValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULeaderboardFlushCallbackProxy",
    "name": "CreateProxyObjectForFlush",
    "description": "Called to perform the query internally",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "SessionName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULeaderboardFlushCallbackProxy"
  },
  {
    "class": "ULeaderboardQueryCallbackProxy",
    "name": "CreateProxyObjectForIntQuery",
    "description": "Queries a leaderboard for an integer value",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "StatName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULeaderboardQueryCallbackProxy"
  },
  {
    "class": "ULogoutCallbackProxy",
    "name": "Logout",
    "description": "Logs out of the online service",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULogoutCallbackProxy"
  },
  {
    "class": "UQuitMatchCallbackProxy",
    "name": "QuitMatch",
    "description": "Quits the turn based match",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Outcome",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TurnTimeoutInSeconds",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UQuitMatchCallbackProxy"
  },
  {
    "class": "UShowLoginUICallbackProxy",
    "name": "ShowExternalLoginUI",
    "description": "Shows the login UI for the currently active online subsystem, if the subsystem supports a login UI.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InPlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UShowLoginUICallbackProxy"
  },
  {
    "class": "UTurnBasedBlueprintLibrary",
    "name": "RegisterTurnBasedMatchInterfaceObject",
    "description": "Library of synchronous achievement calls",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTurnBasedBlueprintLibrary",
    "name": "GetPlayerDisplayName",
    "description": "out",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerDisplayName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTurnBasedBlueprintLibrary",
    "name": "GetMyPlayerIndex",
    "description": "out",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTurnBasedBlueprintLibrary",
    "name": "GetIsMyTurn",
    "description": "out",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "MatchID",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsMyTurn",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UOpenColorIOBlueprintLibrary",
    "name": "ApplyColorSpaceTransform",
    "description": "Applies a rendering pass of the color transform described in the settings",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ConversionSettings",
        "type": "FOpenColorIOColorConversionSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InputTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "OutputRenderTarget",
        "type": "UTextureRenderTarget2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UOpenColorIODisplayExtensionWrapper",
    "name": "CreateOpenColorIODisplayExtension",
    "description": "This Blueprintable object can hold an OCIO Scene View Extension. You can change its OCIO config, and specify the context in which you want it to be active on. Sets an array of activation functions. Will remove any others. Sets a single activation function. Will remove any others. Sets the display extension OCIO configuration. Removes the extension. Gets the display extension OCIO configuration. Creates an instance of this object, configured with the given arguments (OCIO and activation function).",
    "parameters": [
      {
        "name": "InDisplayConfiguration",
        "type": "FOpenColorIODisplayConfiguration",
        "optional": false,
        "out": false
      },
      {
        "name": "IsActiveFunction",
        "type": "FSceneViewExtensionIsActiveFunctor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FOpenColorIODisplayConfiguration"
  },
  {
    "class": "UOpenColorIODisplayExtensionWrapper",
    "name": "CreateInGameOpenColorIODisplayExtension",
    "description": "Creates an instance of this object, configured for use in game with the given OCIO configuration.",
    "parameters": [
      {
        "name": "InDisplayConfiguration",
        "type": "FOpenColorIODisplayConfiguration",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UOpenColorIODisplayExtensionWrapper"
  },
  {
    "class": "UOpenColorIOEditorBlueprintLibrary",
    "name": "SetActiveViewportConfiguration",
    "description": "Set the active editor viewport's display configuration color transform .",
    "parameters": [
      {
        "name": "InConfiguration",
        "type": "FOpenColorIODisplayConfiguration",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UOpenColorIOEditorBlueprintLibrary",
    "name": "ApplyColorSpaceTransformToTextureCompressed",
    "description": "Apply a color space transform with a target compression setting to a texture asset.",
    "parameters": [
      {
        "name": "ConversionSettings",
        "type": "FOpenColorIOColorConversionSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetCompression",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UOpenColorIOEditorBlueprintLibrary",
    "name": "ApplyColorSpaceTransformToTexture",
    "description": "Apply a color space transform to a texture asset.",
    "parameters": [
      {
        "name": "ConversionSettings",
        "type": "FOpenColorIOColorConversionSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UOpenColorIOEditorBlueprintLibrary",
    "name": "ApplyColorSpaceTransformToColor",
    "description": "Apply a color space transform to a color value.",
    "parameters": [
      {
        "name": "ConversionSettings",
        "type": "FOpenColorIOColorConversionSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InColor",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "OutColor",
        "type": "FLinearColor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPaperSpriteBlueprintLibrary",
    "name": "MakeBrushFromSprite",
    "description": "",
    "parameters": [
      {
        "name": "Sprite",
        "type": "UPaperSprite",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSlateBrush"
  },
  {
    "class": "UTileMapBlueprintLibrary",
    "name": "MakeTile",
    "description": "A collection of utility methods for working with tile map components Creates a tile from the specified information",
    "parameters": [
      {
        "name": "TileIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TileSet",
        "type": "UPaperTileSet",
        "optional": false,
        "out": false
      },
      {
        "name": "bFlipH",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bFlipV",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bFlipD",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPaperTileInfo"
  },
  {
    "class": "UTileMapBlueprintLibrary",
    "name": "GetTileUserData",
    "description": "Returns the user data name for the specified tile, or NAME_None if there is no user-specified data",
    "parameters": [
      {
        "name": "Tile",
        "type": "FPaperTileInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UTileMapBlueprintLibrary",
    "name": "GetTileTransform",
    "description": "Returns the transform for a tile",
    "parameters": [
      {
        "name": "Tile",
        "type": "FPaperTileInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UTileMapBlueprintLibrary",
    "name": "BreakTile",
    "description": "Breaks out the information for a tile",
    "parameters": [
      {
        "name": "Tile",
        "type": "FPaperTileInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "TileIndex",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "TileSet",
        "type": "UPaperTileSet",
        "optional": false,
        "out": true
      },
      {
        "name": "bFlipH",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bFlipV",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bFlipD",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGAssetExporterUtils",
    "name": "UpdateAssets",
    "description": "Asset export utils - will work only in editor builds. Updates assets based on their embedded exporter & metadata.",
    "parameters": [
      {
        "name": "PCGAssets",
        "type": "TArray_FAssetData_",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FPCGAssetExporterParameters",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGAssetExporterUtils",
    "name": "CreateAsset",
    "description": "Exports an asset from the given exporter. When calling this function, the exporter should be able to create its own data and as such needs prior information (world, etc.) before calling this method.",
    "parameters": [
      {
        "name": "Exporter",
        "type": "UPCGAssetExporter",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FPCGAssetExporterParameters",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UPackage"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "SetPointProperty",
    "description": "Helper class to allow the BP to call the custom setters and getters on FPCGAttributePropertySelector.",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": true
      },
      {
        "name": "InPointProperty",
        "type": "EPCGPointProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "SetExtraProperty",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": true
      },
      {
        "name": "InExtraProperty",
        "type": "EPCGExtraProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "SetAttributeName",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": true
      },
      {
        "name": "InAttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetSelection",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EPCGAttributePropertySelection"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetPointProperty",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EPCGPointProperties"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetName",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetExtraProperty",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EPCGExtraProperties"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetExtraNames",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "GetAttributeName",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "CopyAndFixSource",
    "description": "",
    "parameters": [
      {
        "name": "OutputSelector",
        "type": "FPCGAttributePropertyOutputSelector",
        "optional": false,
        "out": false
      },
      {
        "name": "InputSelector",
        "type": "FPCGAttributePropertyInputSelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPCGAttributePropertyOutputSelector"
  },
  {
    "class": "UPCGAttributePropertySelectorBlueprintHelpers",
    "name": "CopyAndFixLast",
    "description": "",
    "parameters": [
      {
        "name": "Selector",
        "type": "FPCGAttributePropertyInputSelector",
        "optional": false,
        "out": false
      },
      {
        "name": "InData",
        "type": "UPCGData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPCGAttributePropertyInputSelector"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "SetSeedFromPosition",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "SetLocalCenter",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InLocalCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "SetExtents",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InExtents",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "RefreshPCGRuntimeComponent",
    "description": "Refresh a component set to Generate At Runtime, if some parameters changed. Can also flush the cache.",
    "parameters": [
      {
        "name": "InComponent",
        "type": "UPCGComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bFlushCache",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetTransformedBounds",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetTaskId",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetTargetActor",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      },
      {
        "name": "SpatialData",
        "type": "UPCGSpatialData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetSettings",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPCGSettings"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetRandomStreamFromTwoPoints",
    "description": "Creates a random stream from using the random seeds from two points, as well as settings/component's seed (optional)",
    "parameters": [
      {
        "name": "InPointA",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "InPointB",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalSettings",
        "type": "UPCGSettings",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalComponent",
        "type": "UPCGComponent",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRandomStream"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetRandomStreamFromPoint",
    "description": "Creates a random stream from a point's seed and settings/component's seed (optional)",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalSettings",
        "type": "UPCGSettings",
        "optional": true,
        "out": false
      },
      {
        "name": "OptionalComponent",
        "type": "UPCGComponent",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FRandomStream"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetOriginalComponent",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPCGComponent"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetLocalCenter",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetInterpolatedPCGLandscapeLayerWeights",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGLandscapeLayerWeight_"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetInputData",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPCGData"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetExtents",
    "description": "",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetComponent",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPCGComponent"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetActorLocalBoundsPCG",
    "description": "",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnorePCGCreatedComponents",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetActorData",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPCGData"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "GetActorBoundsPCG",
    "description": "",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnorePCGCreatedComponents",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FBox"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "FlushPCGCache",
    "description": "Flush the cache, to be used if you have changed something PCG depends on at runtime. Same as `pcg.FlushCache` command. Returns true if it succeeded.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "DuplicateData",
    "description": "Return a copy of the data, with Metadata inheritance for spatial data.",
    "parameters": [
      {
        "name": "InData",
        "type": "UPCGData",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "FPCGContext",
        "optional": false,
        "out": true
      },
      {
        "name": "bInitializeMetadata",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UPCGData"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "CreatePCGDataFromActor",
    "description": "",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bParseActor",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UPCGData"
  },
  {
    "class": "UPCGBlueprintHelpers",
    "name": "ComputeSeedFromPosition",
    "description": "",
    "parameters": [
      {
        "name": "InPosition",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGBlueprintPinHelpers",
    "name": "MakePinProperty",
    "description": "",
    "parameters": [
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowMultipleData",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowMultipleConnections",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsAdvancedPin",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "AllowedType",
        "type": "EPCGExclusiveDataType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FPCGPinProperties"
  },
  {
    "class": "UPCGBlueprintPinHelpers",
    "name": "IsOfType",
    "description": "",
    "parameters": [
      {
        "name": "AllowedTypes",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TypeToCheck",
        "type": "EPCGExclusiveDataType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGBlueprintPinHelpers",
    "name": "IsExactlySameType",
    "description": "",
    "parameters": [
      {
        "name": "AllowedTypes",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TypeToCheck",
        "type": "EPCGExclusiveDataType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGBlueprintPinHelpers",
    "name": "GetCorrespondingDataType",
    "description": "",
    "parameters": [
      {
        "name": "InExclusiveDataType",
        "type": "EPCGExclusiveDataType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGBlueprintPinHelpers",
    "name": "BreakPinProperty",
    "description": "",
    "parameters": [
      {
        "name": "PinProperty",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "bAllowMultipleData",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bAllowMultipleConnections",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsAdvancedPin",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "AllowedType",
        "type": "EPCGExclusiveDataType",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetTypedInputsByTag",
    "description": "Gets all inputs of the given class type and having the provided tag, returning matching tagged data in the OutTaggedData value too",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InTag",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTaggedData",
        "type": "TArray_FPCGTaggedData_",
        "optional": false,
        "out": true
      },
      {
        "name": "InDataTypeClass",
        "type": "TSubclassOf_UPCGData_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UPCGData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetTypedInputsByPinLabel",
    "description": "Gets all inputs of the given class type and on the given pin label, returning matching tagged data in the OutTaggedData value too",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InPinLabel",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTaggedData",
        "type": "TArray_FPCGTaggedData_",
        "optional": false,
        "out": true
      },
      {
        "name": "InDataTypeClass",
        "type": "TSubclassOf_UPCGData_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UPCGData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetTypedInputsByPin",
    "description": "Gets all inputs of the given class type and on the given pin, returning matching tagged data in the OutTaggedData value too",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InPin",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTaggedData",
        "type": "TArray_FPCGTaggedData_",
        "optional": false,
        "out": true
      },
      {
        "name": "InDataTypeClass",
        "type": "TSubclassOf_UPCGData_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UPCGData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetTypedInputs",
    "description": "Gets all inputs of the given class type, returning matching tagged data in the OutTaggedData value too",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTaggedData",
        "type": "TArray_FPCGTaggedData_",
        "optional": false,
        "out": true
      },
      {
        "name": "InDataTypeClass",
        "type": "TSubclassOf_UPCGData_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UPCGData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetParamsByTag",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InTag",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetParamsByPinLabel",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InPinLabel",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetParams",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetInputsByTag",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InTag",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetInputsByPinLabel",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      },
      {
        "name": "InPinLabel",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetInputs",
    "description": "Blueprint methods to support interaction with FPCGDataCollection",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "GetAllSettings",
    "description": "",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGTaggedData_"
  },
  {
    "class": "UPCGDataFunctionLibrary",
    "name": "AddToCollection",
    "description": "Adds a data object to a given collection, simpler usage than making a PCGTaggedData object. InTags can be empty.",
    "parameters": [
      {
        "name": "InCollection",
        "type": "FPCGDataCollection",
        "optional": false,
        "out": true
      },
      {
        "name": "InData",
        "type": "UPCGData",
        "optional": false,
        "out": false
      },
      {
        "name": "InPinLabel",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InTags",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetVectorParameter",
    "description": "Blueprint Library to get or set graph parameters on graphs and graph instances",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetVector4Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetVector2DParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetTransformParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetStringParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetSoftObjectPathParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetSoftObjectParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSoftObjectPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetSoftClassParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSoftClassPtr_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetRotatorParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetQuaternionParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetObjectParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetNameParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetInt64Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetInt32Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetFloatParameter",
    "description": "Setters",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetEnumParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Enum",
        "type": "UEnum",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetDoubleParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetClassParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetByteParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "SetBoolParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "IsOverridden",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetVectorParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetVector4Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetVector2DParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetTransformParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetStringParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetSoftObjectPathParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetSoftObjectParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_UObject_"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetSoftClassParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftClassPtr_UObject_"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetRotatorParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetQuaternionParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetObjectParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetNameParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetInt64Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetInt32Parameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetFloatParameter",
    "description": "Getters",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetEnumParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetDoubleParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetClassParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetByteParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGGraphParametersHelpers",
    "name": "GetBoolParameter",
    "description": "",
    "parameters": [
      {
        "name": "GraphInterface",
        "type": "UPCGGraphInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVectorAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVectorAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVector4AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVector4Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVector2AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetVector2Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetTransformAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetTransformAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetStringAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetStringAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetSoftObjectPathAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetSoftObjectPathAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSoftObjectPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetSoftClassPathAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSoftClassPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetSoftClassPathAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSoftClassPath",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetRotatorAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetRotatorAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetQuatAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetQuatAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetNameAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetInteger64AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetInteger64Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetInteger32AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetInteger32Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetFloatAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetFloatAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetDoubleAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetDoubleAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetBoolAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetBoolAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "SetAttributeFromPropertyByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "InitializeMetadata",
    "description": "Assigns a metadata entry key and will copy attribute values if from an unrelated metadata. Note: a null ParentMetadata assumes this is the same as Metadata",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentMetadata",
        "type": "UPCGMetadata",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "HasAttributeSetByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "HasAttributeSet",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVectorAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVectorAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVector4AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVector4Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVector2AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetVector2Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetTransformAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetTransformAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetStringAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetStringAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetSoftObjectPathAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetSoftObjectPathAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftObjectPath"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetSoftClassPathAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftClassPath"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetSoftClassPathAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSoftClassPath"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetRotatorAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetRotatorAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetQuatAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetQuatAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetNameAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetInteger64AttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetInteger64Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetInteger32AttributeByMetadataKey",
    "description": "Id-based metadata functions",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetInteger32Attribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetFloatAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetFloatAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetDoubleAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetDoubleAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetBoolAttributeByMetadataKey",
    "description": "",
    "parameters": [
      {
        "name": "Key",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "GetBoolAttribute",
    "description": "",
    "parameters": [
      {
        "name": "Point",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "Metadata",
        "type": "UPCGMetadata",
        "optional": false,
        "out": false
      },
      {
        "name": "AttributeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGMetadataAccessorHelpers",
    "name": "CopyPoint",
    "description": "Point functions",
    "parameters": [
      {
        "name": "InPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "bCopyMetadata",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "InMetadata",
        "type": "UPCGMetadata",
        "optional": true,
        "out": false
      },
      {
        "name": "OutMetadata",
        "type": "UPCGMetadata",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetPointsInsideSphere",
    "description": "Query the internal octree to return all the points within some sphere.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "InRadius",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGPoint_"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetPointsInsideBounds",
    "description": "Query the internal octree to return all the points within some bounds.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InBounds",
        "type": "FBox",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FPCGPoint_"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetFarthestPointFromOtherPoint",
    "description": "Get the farthest point from a given point within the search distance. The point is referenced by its point index in this point data.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InPointIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutFound",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InSearchDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetFarthestPoint",
    "description": "Get the farthest point from a given position, within the search distance.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutFound",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InSearchDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetClosestPointFromOtherPoint",
    "description": "Get the nearest point to a given point within the search distance. The point is referenced by its point index in this point data.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InPointIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutFound",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InSearchDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGOctreeQueries",
    "name": "GetClosestPoint",
    "description": "Get the closest point to a given position within the search distance. If bInDiscardCenter is true, will reject any points that is at the center exactly.",
    "parameters": [
      {
        "name": "InPointData",
        "type": "UPCGPointData",
        "optional": false,
        "out": false
      },
      {
        "name": "InCenter",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bInDiscardCenter",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutFound",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPoint",
        "type": "FPCGPoint",
        "optional": false,
        "out": true
      },
      {
        "name": "InSearchDistance",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "SetRequiredPin",
    "description": "Helper class to allow the BP to call the custom functions on FPCGPinProperties.",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "SetNormalPin",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "SetAllowMultipleConnections",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": true
      },
      {
        "name": "bAllowMultipleConnections",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "SetAdvancedPin",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "IsRequiredPin",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "IsNormalPin",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "IsAdvancedPin",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPCGPinPropertiesBlueprintHelpers",
    "name": "AllowsMultipleConnections",
    "description": "",
    "parameters": [
      {
        "name": "PinProperties",
        "type": "FPCGPinProperties",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "SetInterruptMode",
    "description": "Exposes operations that can be run on a Motion Matching node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\". Ignore the continuing pose (the current clip that's playing) and force a new search.",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InterruptMode",
        "type": "EPoseSearchInterruptMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "SetDatabaseToSearch",
    "description": "Set the database to search on the motion matching node. This overrides the Database property on the motion matching node.",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Database",
        "type": "UPoseSearchDatabase",
        "optional": false,
        "out": false
      },
      {
        "name": "InterruptMode",
        "type": "EPoseSearchInterruptMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "SetDatabasesToSearch",
    "description": "Set the database to search on the motion matching node. This overrides the Database property on the motion matching node.",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Databases",
        "type": "TArray_UPoseSearchDatabase_",
        "optional": false,
        "out": false
      },
      {
        "name": "InterruptMode",
        "type": "EPoseSearchInterruptMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "ResetDatabasesToSearch",
    "description": "Clear the effects of SetDatabaseToSearch/SetDatabasesToSearch and resume searching the Database property on the motion matching node.",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "InterruptMode",
        "type": "EPoseSearchInterruptMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "OverrideMotionMatchingBlendSettings",
    "description": "Override current blend settings for motion matching. Note that any pinned parameters will stomp this override on the next update.",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSettings",
        "type": "FMotionMatchingBlueprintBlendSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsResultValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "GetMotionMatchingSearchResult",
    "description": "",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "FPoseSearchBlueprintResult",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsResultValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "GetMotionMatchingBlendSettings",
    "description": "Get current blend settings used when blending into a new asset",
    "parameters": [
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "BlendSettings",
        "type": "FMotionMatchingBlueprintBlendSettings",
        "optional": false,
        "out": true
      },
      {
        "name": "bIsResultValid",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "ConvertToMotionMatchingNodePure",
    "description": "Get a motion matching node context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionMatchingNode",
        "type": "FMotionMatchingAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingAnimNodeLibrary",
    "name": "ConvertToMotionMatchingNode",
    "description": "Get a motion matching node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FMotionMatchingAnimNodeReference"
  },
  {
    "class": "UMotionMatchingInteractionAnimNodeLibrary",
    "name": "SetAvailabilities",
    "description": "",
    "parameters": [
      {
        "name": "MotionMatchingInteractionNode",
        "type": "FMotionMatchingInteractionAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Availabilities",
        "type": "TArray_FPoseSearchInteractionAvailability_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingInteractionAnimNodeLibrary",
    "name": "GetTranslationWarpLerp",
    "description": "",
    "parameters": [
      {
        "name": "MotionMatchingInteractionNode",
        "type": "FMotionMatchingInteractionAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMotionMatchingInteractionAnimNodeLibrary",
    "name": "GetRotationWarpLerp",
    "description": "",
    "parameters": [
      {
        "name": "MotionMatchingInteractionNode",
        "type": "FMotionMatchingInteractionAnimNodeReference",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMotionMatchingInteractionAnimNodeLibrary",
    "name": "ConvertToMotionMatchingInteractionNodePure",
    "description": "",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionMatchingInteractionNode",
        "type": "FMotionMatchingInteractionAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionMatchingInteractionAnimNodeLibrary",
    "name": "ConvertToMotionMatchingInteractionNode",
    "description": "",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FMotionMatchingInteractionAnimNodeReference"
  },
  {
    "class": "UPoseSearchAssetSamplerLibrary",
    "name": "SamplePose",
    "description": "",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "Input",
        "type": "FPoseSearchAssetSamplerInput",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPoseSearchAssetSamplerPose"
  },
  {
    "class": "UPoseSearchAssetSamplerLibrary",
    "name": "GetTransformByName",
    "description": "",
    "parameters": [
      {
        "name": "AssetSamplerPose",
        "type": "FPoseSearchAssetSamplerPose",
        "optional": false,
        "out": true
      },
      {
        "name": "BoneName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Space",
        "type": "EPoseSearchAssetSamplerSpace",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPoseSearchAssetSamplerLibrary",
    "name": "GetTransform",
    "description": "",
    "parameters": [
      {
        "name": "AssetSamplerPose",
        "type": "FPoseSearchAssetSamplerPose",
        "optional": false,
        "out": true
      },
      {
        "name": "BoneIndex",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Space",
        "type": "EPoseSearchAssetSamplerSpace",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPoseSearchAssetSamplerLibrary",
    "name": "Draw",
    "description": "",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetSamplerPose",
        "type": "FPoseSearchAssetSamplerPose",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchHistoryCollectorAnimNodeLibrary",
    "name": "SetPoseHistoryNodeTrajectory",
    "description": "Exposes operations that can be run on a Pose History node via Anim Node Functions such as \"On Become Relevant\" and \"On Update\".",
    "parameters": [
      {
        "name": "PoseSearchHistoryCollectorNode",
        "type": "FPoseSearchHistoryCollectorAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Trajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchHistoryCollectorAnimNodeLibrary",
    "name": "GetPoseHistoryNodeTrajectory",
    "description": "",
    "parameters": [
      {
        "name": "PoseSearchHistoryCollectorNode",
        "type": "FPoseSearchHistoryCollectorAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Trajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchHistoryCollectorAnimNodeLibrary",
    "name": "ConvertToPoseHistoryNodePure",
    "description": "Get a Pose History node context from an anim node context (pure)",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "PoseSearchHistoryCollectorNode",
        "type": "FPoseSearchHistoryCollectorAnimNodeReference",
        "optional": false,
        "out": true
      },
      {
        "name": "Result",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchHistoryCollectorAnimNodeLibrary",
    "name": "ConvertToPoseHistoryNode",
    "description": "Get a Pose History node context from an anim node context",
    "parameters": [
      {
        "name": "Node",
        "type": "FAnimNodeReference",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "EAnimNodeReferenceConversionResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FPoseSearchHistoryCollectorAnimNodeReference"
  },
  {
    "class": "UPoseSearchInteractionLibrary",
    "name": "MotionMatchInteraction_Pure",
    "description": "function publishing this character (via its AnimInstance) FPoseSearchInteractionAvailability to the UPoseSearchInteractionSubsystem, FPoseSearchInteractionAvailability represents the character availability to partecipate in an interaction with other characters for the next frame. that means there will always be one frame delay between publiching availabilities and getting a result back from MotionMatchInteraction_Pure! if FPoseSearchInteractionBlueprintResult has a valid SelectedAnimation, this will be the animation assigned to this character to partecipate in this interaction. additional interaction properties, like assigned role, SelectedAnimation time, SearchCost, etc can be found within the result ContinuingProperties are used to figure out the continuing pose and bias it accordingly. ContinuingProperties can reference directly the UMultiAnimAsset or any of the roled UMultiAnimAsset::GetAnimationAsset, and the UPoseSearchInteractionSubsystem will figure out the related UMultiAnimAsset PoseHistoryName is the name of the pose history node used for the associated motion matching search if bValidateResultAgainstAvailabilities is true, the result will be invalidated if doesn't respect the new availabilities",
    "parameters": [
      {
        "name": "Availabilities",
        "type": "TArray_FPoseSearchInteractionAvailability_",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ContinuingProperties",
        "type": "FPoseSearchContinuingProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "PoseHistoryName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidateResultAgainstAvailabilities",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPoseSearchInteractionBlueprintResult"
  },
  {
    "class": "UPoseSearchInteractionLibrary",
    "name": "MotionMatchInteraction",
    "description": "BlueprintCallable version of MotionMatchInteraction_Pure",
    "parameters": [
      {
        "name": "Availabilities",
        "type": "TArray_FPoseSearchInteractionAvailability_",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ContinuingProperties",
        "type": "FPoseSearchContinuingProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "PoseHistoryName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bValidateResultAgainstAvailabilities",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPoseSearchInteractionBlueprintResult"
  },
  {
    "class": "UPoseSearchInteractionLibrary",
    "name": "GetMontageContinuingProperties",
    "description": "",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPoseSearchContinuingProperties"
  },
  {
    "class": "UPoseSearchLibrary",
    "name": "MotionMatch",
    "description": "Implementation of the core motion matching algorithm",
    "parameters": [
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetsToSearch",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "PoseHistoryName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ContinuingProperties",
        "type": "FPoseSearchContinuingProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "Future",
        "type": "FPoseSearchFutureProperties",
        "optional": false,
        "out": false
      },
      {
        "name": "Result",
        "type": "FPoseSearchBlueprintResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchLibrary",
    "name": "IsAnimationAssetLooping",
    "description": "",
    "parameters": [
      {
        "name": "Asset",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsAssetLooping",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchLibrary",
    "name": "GetDatabaseTags",
    "description": "",
    "parameters": [
      {
        "name": "Database",
        "type": "UPoseSearchDatabase",
        "optional": false,
        "out": false
      },
      {
        "name": "Tags",
        "type": "TArray_string_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "PoseSearchGenerateTrajectory",
    "description": "Set of functions to help populate a FPoseSearchQueryTrajectory for motion matching. Generates a prediction trajectory based of the current character intent. For use with Character actors.",
    "parameters": [
      {
        "name": "InAnimInstance",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrajectoryData",
        "type": "FPoseSearchTrajectoryData",
        "optional": false,
        "out": false
      },
      {
        "name": "InDeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "InOutDesiredControllerYawLastUpdate",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "InHistorySamplingInterval",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InTrajectoryHistoryCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InPredictionSamplingInterval",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InTrajectoryPredictionCount",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "PoseSearchGeneratePredictorTrajectory",
    "description": "Generates a prediction trajectory based of the current movement intent. For use with predictors. InPredictor must implement IPoseSearchTrajectoryPredictorInterface",
    "parameters": [
      {
        "name": "InPredictor",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrajectoryData",
        "type": "FPoseSearchTrajectoryData",
        "optional": false,
        "out": false
      },
      {
        "name": "InDeltaTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InOutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "InOutDesiredControllerYawLastUpdate",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "OutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "InHistorySamplingInterval",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InTrajectoryHistoryCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "InPredictionSamplingInterval",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InTrajectoryPredictionCount",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "HandleTrajectoryWorldCollisionsWithGravity",
    "description": "Experimental: Process InTrajectory to apply gravity and handle collisions. Eventually returns the modified OutTrajectory. If bApplyGravity is true, GravityAccel will be applied. If FloorCollisionsOffset > 0, vertical collision will be performed to every sample of the trajectory to have the samples float over the geometry (by FloorCollisionsOffset).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "StartingVelocity",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyGravity",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "GravityAccel",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "FloorCollisionsOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "CollisionResult",
        "type": "FPoseSearchTrajectory_WorldCollisionResults",
        "optional": false,
        "out": true
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxObstacleHeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "HandleTrajectoryWorldCollisions",
    "description": "Experimental: Process InTrajectory to apply gravity and handle collisions. Eventually returns the modified OutTrajectory. If bApplyGravity is true, gravity from the UCharacterMovementComponent will be applied. If FloorCollisionsOffset > 0, vertical collision will be performed to every sample of the trajectory to have the samples float over the geometry (by FloorCollisionsOffset).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimInstance",
        "type": "UAnimInstance",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "bApplyGravity",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "FloorCollisionsOffset",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": true
      },
      {
        "name": "CollisionResult",
        "type": "FPoseSearchTrajectory_WorldCollisionResults",
        "optional": false,
        "out": true
      },
      {
        "name": "TraceChannel",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bTraceComplex",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorsToIgnore",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DrawDebugType",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bIgnoreSelf",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "MaxObstacleHeight",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "TraceHitColor",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "DrawTime",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "GetTransform",
    "description": "",
    "parameters": [
      {
        "name": "InTrajectorySample",
        "type": "FPoseSearchQueryTrajectorySample",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "GetTrajectoryVelocity",
    "description": "",
    "parameters": [
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "Time1",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Time2",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bExtrapolate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "GetTrajectorySampleAtTime",
    "description": "",
    "parameters": [
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTrajectorySample",
        "type": "FPoseSearchQueryTrajectorySample",
        "optional": false,
        "out": true
      },
      {
        "name": "bExtrapolate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "GetTrajectoryAngularVelocity",
    "description": "",
    "parameters": [
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "Time1",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Time2",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "OutAngularVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bExtrapolate",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPoseSearchTrajectoryLibrary",
    "name": "DrawTrajectory",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrajectory",
        "type": "FPoseSearchQueryTrajectory",
        "optional": false,
        "out": false
      },
      {
        "name": "DebugThickness",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "HeightOffset",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "SliceProceduralMesh",
    "description": "Slice the ProceduralMeshComponent (including simple convex collision) using a plane. Optionally create 'cap' geometry.",
    "parameters": [
      {
        "name": "InProcMesh",
        "type": "UProceduralMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "PlanePosition",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "PlaneNormal",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bCreateOtherHalf",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutOtherHalfProcMesh",
        "type": "UProceduralMeshComponent",
        "optional": false,
        "out": true
      },
      {
        "name": "CapOption",
        "type": "EProcMeshSliceCapOption",
        "optional": false,
        "out": false
      },
      {
        "name": "CapMaterial",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "GetSectionFromStaticMesh",
    "description": "Grab geometry data from a StaticMesh asset.",
    "parameters": [
      {
        "name": "InMesh",
        "type": "UStaticMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Normals",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "Tangents",
        "type": "TArray_FProcMeshTangent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "GetSectionFromProceduralMesh",
    "description": "Grab geometry data from a ProceduralMeshComponent.",
    "parameters": [
      {
        "name": "InProcMesh",
        "type": "UProceduralMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "SectionIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Normals",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "Tangents",
        "type": "TArray_FProcMeshTangent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "GenerateBoxMesh",
    "description": "Generate vertex and index buffer for a simple box, given the supplied dimensions. Normals, UVs and tangents are also generated for each vertex.",
    "parameters": [
      {
        "name": "BoxRadius",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Normals",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "Tangents",
        "type": "TArray_FProcMeshTangent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "CreateGridMeshWelded",
    "description": "Generate a vertex buffer, index buffer and UVs for a tessellated grid mesh.",
    "parameters": [
      {
        "name": "NumX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "GridSpacing",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "CreateGridMeshTriangles",
    "description": "Generate an index buffer for a grid of quads.",
    "parameters": [
      {
        "name": "NumX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "bWinding",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "CreateGridMeshSplit",
    "description": "Generate a vertex buffer, index buffer and UVs for a grid mesh where each quad is split, with standard 0-1 UVs on UV0 and point sampled texel center UVs for UV1.",
    "parameters": [
      {
        "name": "NumX",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "NumY",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "UV1s",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": true
      },
      {
        "name": "GridSpacing",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "CopyProceduralMeshFromStaticMeshComponent",
    "description": "Copy materials from StaticMeshComponent to ProceduralMeshComponent.",
    "parameters": [
      {
        "name": "StaticMeshComponent",
        "type": "UStaticMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ProcMeshComponent",
        "type": "UProceduralMeshComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "bCreateCollision",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "ConvertQuadToTriangles",
    "description": "Add a quad, specified by four indices, to a triangle index buffer as two triangles.",
    "parameters": [
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": true
      },
      {
        "name": "Vert0",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vert1",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vert2",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Vert3",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UKismetProceduralMeshLibrary",
    "name": "CalculateTangentsForMesh",
    "description": "Automatically generate normals and tangent vectors for a mesh UVs are required for correct tangent generation.",
    "parameters": [
      {
        "name": "Vertices",
        "type": "TArray_FVector_",
        "optional": false,
        "out": false
      },
      {
        "name": "Triangles",
        "type": "TArray_integer_",
        "optional": false,
        "out": false
      },
      {
        "name": "UVs",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "Normals",
        "type": "TArray_FVector_",
        "optional": false,
        "out": true
      },
      {
        "name": "Tangents",
        "type": "TArray_FProcMeshTangent_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetWeakObjectPtrFunction",
    "description": "Test object for edit condition property checks Note: Currently only bool functions are supported (Including static). remaining are not used because currently not supported by edit condition parser Used in test cases that should fail, should not be able to execute a void function in edit condition Used in test cases that should fail, should not be able to execute a void function in edit condition",
    "parameters": [],
    "returnType": "TWeakObjectPtr_UObject_"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetUObjectPtrFunction",
    "description": "",
    "parameters": [],
    "returnType": "UObject"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetUintBitfieldFunction",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetSoftClassPtrFunction",
    "description": "",
    "parameters": [],
    "returnType": "TSoftClassPtr_UObject_"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetIntegerFunction",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetEnumFunction",
    "description": "",
    "parameters": [],
    "returnType": "EditConditionTestEnum"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetDoubleFunction",
    "description": "",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetByteEnumFunction",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UEditConditionTestObject",
    "name": "StaticGetBoolFunction",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UProxyTableFunctionLibrary",
    "name": "MakeLookupProxyWithOverrideTable",
    "description": "Proxy Table Function Library",
    "parameters": [
      {
        "name": "Proxy",
        "type": "UProxyAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ProxyTable",
        "type": "UProxyTable",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInstancedStruct"
  },
  {
    "class": "UProxyTableFunctionLibrary",
    "name": "MakeLookupProxy",
    "description": "Create a LookupProxy struct",
    "parameters": [
      {
        "name": "Proxy",
        "type": "UProxyAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInstancedStruct"
  },
  {
    "class": "UProxyTableFunctionLibrary",
    "name": "EvaluateProxyTable",
    "description": "Temporary backwards compatibility function!  please switch to EvaluateProxyAsset",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ProxyTable",
        "type": "UProxyTable",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UProxyTableFunctionLibrary",
    "name": "EvaluateProxyAsset",
    "description": "Resolve a proxy asset and return the selected UObject, or null",
    "parameters": [
      {
        "name": "ContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Proxy",
        "type": "UProxyAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UEditorPythonScriptingLibrary",
    "name": "SetKeepPythonScriptAlive",
    "description": "Utility class for Python scripting functionality. Sets the bKeepPythonScriptAlive flag. If this is false (default), it will close the editor during the next tick (when executing a Python script in the editor-environment using the UnrealEditor-Cmd commandline tool). If this is true, it will not close the editor by itself, and you will have to close it manually, either by setting this value to false again, or by calling a function like unreal.SystemLibrary.quit_editor().",
    "parameters": [
      {
        "name": "bNewKeepAlive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorPythonScriptingLibrary",
    "name": "GetKeepPythonScriptAlive",
    "description": "Returns the value of the bKeepPythonScriptAlive flag. If this is false (default), it will close the editor during the next tick (when executing a Python script in the editor-environment using the UnrealEditor-Cmd commandline tool). If this is true, it will not close the editor by itself, and you will have to close it manually, either by setting this value to false again, or by calling a function like unreal.SystemLibrary.quit_editor().",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UPyTestObject",
    "name": "ReturnSet",
    "description": "Object to allow testing of the various UObject features that are exposed to Python wrapped types.",
    "parameters": [],
    "returnType": "TSet_integer_"
  },
  {
    "class": "UPyTestObject",
    "name": "ReturnMap",
    "description": "",
    "parameters": [],
    "returnType": "TMap_integer__boolean_"
  },
  {
    "class": "UPyTestObject",
    "name": "ReturnFieldPath",
    "description": "",
    "parameters": [],
    "returnType": "Unknown"
  },
  {
    "class": "UPyTestObject",
    "name": "ReturnArray",
    "description": "",
    "parameters": [],
    "returnType": "TArray_integer_"
  },
  {
    "class": "UPyTestObject",
    "name": "GetConstantValue",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UPyTestObject",
    "name": "EmitScriptWarning",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UPyTestObjectLibrary",
    "name": "IsBoolSet",
    "description": "Function library containing methods that should be hoisted onto the test object in Python.",
    "parameters": [
      {
        "name": "InObj",
        "type": "UPyTestObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPyTestObjectLibrary",
    "name": "GetOtherConstantValue",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "SetBoolMutableViaRef",
    "description": "Function library containing methods that should be hoisted onto the test struct in Python.",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "SetBoolMutable",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "LegacyIsBoolSet",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "IsBoolSet",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "GetConstantValue",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "ClearBoolMutableViaRef",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "ClearBoolMutable",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "AddStr",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPyTestStruct"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "AddInt",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPyTestStruct"
  },
  {
    "class": "UPyTestStructLibrary",
    "name": "AddFloat",
    "description": "",
    "parameters": [
      {
        "name": "InStruct",
        "type": "FPyTestStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPyTestStruct"
  },
  {
    "class": "UPyTestTypeHint",
    "name": "GetStringConst",
    "description": "Used to verify if the generated Python stub is correctly type-hinted (if type hint is enabled). The stub is generated * in the project intermediate folder when the Python developer mode is enabled (Editor preferences). The type hints can * be checked in the stub itself or PythonScriptPlugin/Content/Python/test_type_hints.py can be loaded in a Python IDE that * supports type checking and look at the code to verify that there is not problems with the types. Check type hinted constants",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UPyTestTypeHint",
    "name": "GetIntConst",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UPyTestTypeHint",
    "name": "CheckTupleReturnType",
    "description": "",
    "parameters": [
      {
        "name": "InOutString",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UPyTestTypeHint",
    "name": "CheckStaticFunction",
    "description": "",
    "parameters": [
      {
        "name": "Param1",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "Param2",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Param3",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Param4",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPythonScriptLibrary",
    "name": "IsPythonAvailable",
    "description": "Check to see whether Python support is available in the current build.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UPythonScriptLibrary",
    "name": "ExecutePythonScript",
    "description": "Execute a Python script with argument marshaling.",
    "parameters": [
      {
        "name": "PythonScript",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "PythonInputs",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "PythonOutputs",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPythonScriptLibrary",
    "name": "ExecutePythonCommandEx",
    "description": "Execute the given Python command.",
    "parameters": [
      {
        "name": "PythonCommand",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CommandResult",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "LogOutput",
        "type": "TArray_FPythonLogOutputEntry_",
        "optional": false,
        "out": true
      },
      {
        "name": "ExecutionMode",
        "type": "EPythonCommandExecutionMode",
        "optional": true,
        "out": false
      },
      {
        "name": "FileExecutionScope",
        "type": "EPythonFileExecutionScope",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UPythonScriptLibrary",
    "name": "ExecutePythonCommand",
    "description": "Execute the given Python command.",
    "parameters": [
      {
        "name": "PythonCommand",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URigVMHost",
    "name": "FindRigVMHosts",
    "description": "set this to something larger than 0 to profile N runs Returns the value of a given variable as a string Set the current fps Set the current delta time Set the current absolute time Set the current absolute and delta times Requests to run an event once Requests to perform an init during the next execution Removes an event running once Returns true if this host requires the VM memory to be initialized Returns the type of a given variable Returns the value of a given variable as a string Returns the names of variables accessible in scripting Gets the current delta time Returns the current frames per second (this may change over time) Gets the current absolute time",
    "parameters": [
      {
        "name": "Outer",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "OptionalClass",
        "type": "TSubclassOf_URigVMHost_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "URigVMController",
    "name": "GetUnitStructsForTemplate",
    "description": "The Controller is the sole authority to perform changes on the Graph. The Controller itself is stateless. The Controller offers a Modified event to subscribe to for user interface views - so they can be informed about any change that's happening within the Graph. The Controller routes all changes through the Graph itself, so you can have N Controllers performing edits on 1 Graph, and N Views subscribing to 1 Controller. In Python you can also subscribe to this event to be able to react to topological changes of the Graph there. Upgrades a set of nodes with each corresponding next known version Turns a resolved templated node(s) back into its template. Un-does the last action on the stack. Note: This should really only be used for unit tests, use the GEditor's main Undo method instead. Removes the binging of a pin to a variable This causes a PinBoundVariableChanged modified event. Resets the function's guid to a new one and splits it from the former variant set Adds a Function / Struct Node to the edited Graph. UnitNode represent a RIGVM_METHOD declaration on a USTRUCT. This causes a NodeAdded modified event. Sets the schema class on the controller Sets the remapped variable on a function reference node Sets the pin to be watched (or not) This causes a PinWatchedChanged modified event. Changes a pin category's expansion state. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Sets the pin to be expanded or not This causes a PinExpansionChanged modified event. Sets the pin display name. The display name is UI relevant only. Sets the default value of a pin given its pinpath. This causes a PinDefaultValueChanged modified event. Changes a pin category's index. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Changes a pin category's expansion state. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Sets the pin category. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Sets the size of a node in the graph by name. This causes a NodeSizeChanged modified event. Sets the size of a node in the graph. This causes a NodeSizeChanged modified event. Selects the nodes given the selection This might cause several NodeDeselected modified event. Sets the position of a node in the graph by name. This causes a NodePositionChanged modified event. Sets the position of a node in the graph. This causes a NodePositionChanged modified event. Applies a complete node layout to a node Sets the keywords of a node in the graph. This causes a NodeKeywordsChanged modified event. Sets the keywords of a node in the graph. This causes a NodeKeywordsChanged modified event. Sets the keywords of a node in the graph. This causes a NodeDescriptionChanged modified event. Sets the function description of a node in the graph. This causes a NodeDescriptionChanged modified event. Sets the color of a node in the graph by name. This causes a NodeColorChanged modified event. Sets the color of a node in the graph. This causes a NodeColorChanged modified event. Sets the category of a node in the graph. This causes a NodeCategoryChanged modified event. Sets the category of a node in the graph. This causes a NodeCategoryChanged modified event. Sets the type of the local variable Helper function to disable a series of checks that can be ignored during a unit test Sets the currently edited Graph of this controller. This causes a GraphChanged modified event. Sets the index for an exposed pin. This can be used to move the pin up and down on the node. Sets the comment text and properties of a comment node in the graph by name. This causes a CommentTextChanged modified event. Sets the comment text and properties of a comment node in the graph. This causes a CommentTextChanged modified event. Sets the size of the array pin This causes a PinArraySizeChanged modified event. Selects a single node in the graph by name. This causes a NodeSelected / NodeDeselected modified event. Selects a single node in the graph. This causes a NodeSelected / NodeDeselected modified event. Resolves a wildcard pin on any node Resets the default value of a pin given its pinpath. This causes a PinDefaultValueChanged modified event. Refreshes the variable node with the new data Renames a variable in the graph. This causes a VariableRenamed modified event. Renames a pin category. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Renames a parameter in the graph. This causes a ParameterRenamed modified event. Renames a node in the graph This causes a NodeRenamed modified event. Rename a local variable from the graph Renames a function in the function library Renames an exposed pin in the graph controlled by this Removes a trait from a node Adds a tag to a function variant Removes a pin category. The category is UI relevant only and used to order pins in the user interface of the node as well as on the details panel. Removes a list of nodes from the graph given the names This causes a NodeRemoved modified event. Removes a list of nodes from the graph This causes a NodeRemoved modified event. Removes a node from the graph given the node's name. This causes a NodeRemoved modified event. Removes a node from the graph This causes a NodeRemoved modified event. Remove a local variable from the graph Removes an injected node This causes a NodeRemoved modified event. Removes a function from a function library graph Removes an exposed pin from the graph controlled by this Removes an array element pin from an array pin. This causes a PinArraySizeChanged modified event. Refreshes the variable node with the new data Re-does the last action on the stack. Note: This should really only be used for unit tests, use the GEditor's main Undo method instead. Pushes a new graph to the stack This causes a GraphChanged modified event. Promotes a pin to a variable Turns a collapse node into a function node Turns a collapse node into a function node Pops the last graph off the stack This causes a GraphChanged modified event. performs all actions representing the workflow Opens an undo bracket / scoped transaction for a series of actions to be performed as one step on the Undo stack. This is primarily useful for Python. This causes a UndoBracketOpened modified event. Mark a function as public/private in the function library Turns a binding to a variable node creates the options struct for a given workflow Turns a variable node into one or more bindings Copies a series of function declaratioms into this graph's local function library Copies a function declaration into this graph's local function library Merges the function's guid with a provided one to join the variant set Returns true if the controller is currently transacting Returns true if reporting is enabled Returns true if a function is marked as public in the function library Inserts an array element pin into an array pin. This causes a PinArraySizeChanged modified event. Exports the given nodes as text Returns all supported unit structs for a given template notation",
    "parameters": [
      {
        "name": "InNotation",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMNode_"
  },
  {
    "class": "URigVMController",
    "name": "GetTemplateForUnitStruct",
    "description": "Returns the top level graph Returns the template for a given function (or an empty string)",
    "parameters": [
      {
        "name": "InFunction",
        "type": "UScriptStruct",
        "optional": false,
        "out": false
      },
      {
        "name": "InMethodName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "URigVMGraph"
  },
  {
    "class": "URigVMController",
    "name": "GetRegisteredUnitStructs",
    "description": "Returns the schema used by this controller Returns all registered unit structs",
    "parameters": [],
    "returnType": "URigVMSchema"
  },
  {
    "class": "URigVMController",
    "name": "GetRegisteredTemplates",
    "description": "Returns all registered template notations",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "URigVMUserWorkflowRegistry",
    "name": "Get",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "RequestAutoVMRecompilation",
    "description": "",
    "parameters": [
      {
        "name": "InBlueprint",
        "type": "URigVMBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "RecompileVMIfRequired",
    "description": "",
    "parameters": [
      {
        "name": "InBlueprint",
        "type": "URigVMBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "RecompileVM",
    "description": "",
    "parameters": [
      {
        "name": "InBlueprint",
        "type": "URigVMBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsWithNodeFilter_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InNodeFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsWithBlueprintFilter_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InBlueprintFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsWithAssetDataFilter_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InAssetDataFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsWithAssetDataAndNodeFilters_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InAssetDataFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "InNodeFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsWithAssetDataAndBlueprintFilters_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InAssetDataFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "InBlueprintFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssetsByClass",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "LoadAssets",
    "description": "",
    "parameters": [],
    "returnType": "TArray_URigVMBlueprint_"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "GetModel",
    "description": "",
    "parameters": [
      {
        "name": "InBlueprint",
        "type": "URigVMBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "URigVMGraph"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "GetController",
    "description": "",
    "parameters": [
      {
        "name": "InBlueprint",
        "type": "URigVMBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "URigVMController"
  },
  {
    "class": "URigVMEditorBlueprintLibrary",
    "name": "GetAssetsWithFilter_ForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "InClass",
        "type": "TSubclassOf_URigVMBlueprint_",
        "optional": false,
        "out": false
      },
      {
        "name": "InAssetDataFilter",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FAssetData_"
  },
  {
    "class": "ABaseCosmeticVehicle",
    "name": "GetClosestDoorToActorMulti",
    "description": "return -1 if seat is not found If multi seat is on index is ignored and first free seat is returned Driver 0 Passenger 1 Rear Left 2 Rear Right 3 Driver 0 Passenger 1 Rear Left 2 Rear Right 3 To Keep current BP Structure Getters for left/right hand target for steering wheel",
    "parameters": [
      {
        "name": "Options",
        "type": "TArray_FInteractionOption_",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedActor",
        "type": "FInteractionOption",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ALyraWeaponSpawner",
    "name": "GetDefaultStatFromItemDef",
    "description": "Searches an item definition type for a matching stat and returns the value, or 0 if not found",
    "parameters": [
      {
        "name": "WeaponItemClass",
        "type": "TSubclassOf_ULyraInventoryItemDefinition_",
        "optional": false,
        "out": false
      },
      {
        "name": "StatTag",
        "type": "FGameplayTag",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAbilityTask_GrantNearbyInteraction",
    "name": "GrantAbilitiesForNearbyInteractors",
    "description": "Wait until an overlap occurs. This will need to be better fleshed out so we can specify game specific collision requirements",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionScanRange",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionScanRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_GrantNearbyInteraction"
  },
  {
    "class": "UAbilityTask_WaitForInteractableTargets_SingleLineTrace",
    "name": "WaitForInteractableTargets_SingleLineTrace",
    "description": "Wait until we trace new set of interactables.  This task automatically loops.",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionQuery",
        "type": "FInteractionQuery",
        "optional": false,
        "out": false
      },
      {
        "name": "TraceProfile",
        "type": "FCollisionProfileName",
        "optional": false,
        "out": false
      },
      {
        "name": "StartLocation",
        "type": "FGameplayAbilityTargetingLocationInfo",
        "optional": false,
        "out": false
      },
      {
        "name": "InIgnoredTags",
        "type": "FGameplayTagContainer",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionScanRange",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "InteractionScanRate",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "bShowDebug",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bTraceMultipleTargets",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_WaitForInteractableTargets_SingleLineTrace"
  },
  {
    "class": "UAsyncAction_ExperienceReady",
    "name": "WaitForExperienceReady",
    "description": "Asynchronously waits for the game state to be ready and valid and then calls the OnReady event.  Will call OnReady immediately if the game state is valid already. Waits for the experience to be determined and loaded",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ExperienceReady"
  },
  {
    "class": "UAsyncAction_ObserveTeam",
    "name": "ObserveTeam",
    "description": "Watches for team changes in the specified object Watches for team changes on the specified team agent - It will will fire once immediately to give the current team assignment - For anything that can ever belong to a team (implements ILyraTeamAgentInterface), it will also listen for team assignment changes in the future",
    "parameters": [
      {
        "name": "TeamAgent",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ObserveTeam"
  },
  {
    "class": "UAsyncAction_ObserveTeamColors",
    "name": "ObserveTeamColors",
    "description": "Watches for team color changes in the specified object Watches for team changes on the specified team agent - It will will fire once immediately to give the current team assignment - For anything that can ever belong to a team (implements ILyraTeamAgentInterface), it will also listen for team assignment changes in the future",
    "parameters": [
      {
        "name": "TeamAgent",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_ObserveTeamColors"
  },
  {
    "class": "UAsyncAction_QueryReplays",
    "name": "QueryReplays",
    "description": "Watches for team changes in the specified player controller Watches for team changes in the specified player controller",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_QueryReplays"
  },
  {
    "class": "UHBlueprintFunctionLibrary",
    "name": "SetupCustomLoader",
    "description": "",
    "parameters": [
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHelixAbilitySystemGlobals",
    "name": "SendTraversalEventToActor",
    "description": "Global functions related to gameplay ability system and abilities Trigger a traversal action on target actor with provided data",
    "parameters": [
      {
        "name": "TraversingActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TraversalCheckResult",
        "type": "FHelixTraversalCheckResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHelixAbilitySystemGlobals",
    "name": "GetTraversalCheckResultFromTargetData",
    "description": "Extract traversal check result from gameplay event target data",
    "parameters": [
      {
        "name": "TargetData",
        "type": "FGameplayAbilityTargetDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTraversalCheckResult",
        "type": "FHelixTraversalCheckResult",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHelixAbilityTask_MoveToTarget",
    "name": "MoveToLocationWithNavData",
    "description": "Moves AI or Player character towards target with navigation Move to the specified location, using the vector curve (range 0 - 1) if specified, otherwise the float curve (range 0 - 1) or fallback to linear interpolation",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Location",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UHelixAbilityTask_MoveToTarget"
  },
  {
    "class": "UHelixAbilityTask_Tick",
    "name": "Tick",
    "description": "A ticking gameplay ability task Create a tick ability task",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TaskInstanceName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UHelixAbilityTask_Tick"
  },
  {
    "class": "UHelixAbilityTask_WaitEnhancedInputAction",
    "name": "WaitEnhancedInputAction",
    "description": "Task to track enhanced input action events Waits TriggerEvents to trigger for provided InputAction. If OnlyTriggerOnce is true, only triggers once and ends",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "InputAction",
        "type": "UInputAction",
        "optional": false,
        "out": false
      },
      {
        "name": "TriggerEvents",
        "type": "TSet_ETriggerEvent_",
        "optional": false,
        "out": false
      },
      {
        "name": "OnlyTriggerOnce",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UHelixAbilityTask_WaitEnhancedInputAction"
  },
  {
    "class": "UIndicatorLibrary",
    "name": "GetIndicatorManagerComponent",
    "description": "",
    "parameters": [
      {
        "name": "Controller",
        "type": "AController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraIndicatorManagerComponent"
  },
  {
    "class": "UInteractionStatics",
    "name": "GetInteractableTargetsFromActor",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "OutInteractableTargets",
        "type": "TArray_TScriptInterface_UInteractableTarget__",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UInteractionStatics",
    "name": "GetActorFromInteractableTarget",
    "description": "",
    "parameters": [
      {
        "name": "InteractableTarget",
        "type": "TScriptInterface_UInteractableTarget_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "AActor"
  },
  {
    "class": "ULyraActorUtilities",
    "name": "SwitchOnNetMode",
    "description": "Get the network mode (dedicated server, client, standalone, etc...) for an actor or component.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EBlueprintExposedNetMode"
  },
  {
    "class": "ULyraCameraComponent",
    "name": "FindCameraComponent",
    "description": "ULyraCameraComponent The base camera component class used by this project. Returns the camera component if one exists on the specified actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraCameraComponent"
  },
  {
    "class": "ULyraDevelopmentStatics",
    "name": "ShouldSkipDirectlyToGameplay",
    "description": "Should game logic skip directly to gameplay (skipping any match warmup / waiting for players / etc... aspects) Will always return false except when playing in the editor and bTestFullGameFlowInPIE (in Lyra Developer Settings) is false",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULyraDevelopmentStatics",
    "name": "ShouldLoadCosmeticBackgrounds",
    "description": "Should game logic load cosmetic backgrounds in the editor? Will always return true except when playing in the editor and bSkipLoadingCosmeticBackgroundsInPIE (in Lyra Developer Settings) is true",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULyraDevelopmentStatics",
    "name": "CanPlayerBotsAttack",
    "description": "Should game logic load cosmetic backgrounds in the editor? Will always return true except when playing in the editor and bSkipLoadingCosmeticBackgroundsInPIE (in Lyra Developer Settings) is true",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "ULyraHealthComponent",
    "name": "FindHealthComponent",
    "description": "ULyraHealthComponent An actor component used to handle anything related to health. Uninitialize the component, clearing any references to the ability system. Initialize the component using an ability system component. Returns the current maximum health value. Returns the current health in the range [0.0, 1.0]. Returns the current health value. Returns the health component if one exists on the specified actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "ULyraHeroComponent",
    "name": "FindHeroComponent",
    "description": "Component that sets up input and camera handling for player controlled pawns (or bots that simulate players). This depends on a PawnExtensionComponent to coordinate initialization. Ensures the character parts stay spawned even after character unpossesses. Will clear once character is unpossessed Returns the hero component if one exists on the specified actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraHeroComponent"
  },
  {
    "class": "ULyraInventoryFunctionLibrary",
    "name": "FindItemDefinitionFragment",
    "description": "",
    "parameters": [
      {
        "name": "ItemDef",
        "type": "TSubclassOf_ULyraInventoryItemDefinition_",
        "optional": false,
        "out": false
      },
      {
        "name": "FragmentClass",
        "type": "TSubclassOf_ULyraInventoryItemFragment_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraInventoryItemFragment"
  },
  {
    "class": "ULyraPawnExtensionComponent",
    "name": "FindPawnExtensionComponent",
    "description": "Component that adds functionality to all Pawn classes so it can be used for characters/vehicles/etc. This coordinates the initialization of other components. Gets the current ability system component, which may be owned by a different actor Returns the pawn extension component if one exists on the specified actor.",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraAbilitySystemComponent"
  },
  {
    "class": "ULyraReplaySubsystem",
    "name": "DoesPlatformSupportReplays",
    "description": "Subsystem to handle recording/loading replays Move forward or back in currently playing replay Starts recording a client replay, and handles any file cleanup needed Loads the appropriate map and plays a replay Gets length of current replay Gets current playback time Returns true if this platform supports replays at all",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "ULyraRuntimeOptions",
    "name": "GetRuntimeOptions",
    "description": "ULyraRuntimeOptions: Supports checking at runtime whether features are enabled/disabled, changing configuration parameters, console cheats, startup commands. Add a new Property that *defaults* (either naturally or in the constructor) to the desired normal state. (e.g. bDisableSomething). If you ever need to suddenly disable that thing in the live game, you'll be able to. For testing you can run with -ro.bDisableSomething=true to override the defaults. This is only available in non-shipping builds. Variables are registered with the console under the 'ro' namespace. E.g. ro.bDisableSomething",
    "parameters": [],
    "returnType": "ULyraRuntimeOptions"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "SetVectorParameterValueOnAllMeshComponents",
    "description": "Sets ParameterName to ParameterValue on all sections of all mesh components found on the TargetActor",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeChildActors",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "SetScalarParameterValueOnAllMeshComponents",
    "description": "Sets ParameterName to ParameterValue on all sections of all mesh components found on the TargetActor",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeChildActors",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "SetColorParameterValueOnAllMeshComponents",
    "description": "Sets ParameterName to ParameterValue on all sections of all mesh components found on the TargetActor",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterValue",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeChildActors",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "PlayNextGame",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "GetTypedSoftObjectReferenceFromPrimaryAssetId",
    "description": "Returns the soft object reference associated with a Primary Asset Id, this works even if the asset is not loaded",
    "parameters": [
      {
        "name": "PrimaryAssetId",
        "type": "FPrimaryAssetId",
        "optional": false,
        "out": false
      },
      {
        "name": "ExpectedAssetType",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_UObject_"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "GetPrimaryAssetIdFromUserFacingExperienceName",
    "description": "",
    "parameters": [
      {
        "name": "AdvertisedExperienceID",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FPrimaryAssetId"
  },
  {
    "class": "ULyraSystemStatics",
    "name": "FindComponentsByClass",
    "description": "Gets all the components that inherit from the given class",
    "parameters": [
      {
        "name": "TargetActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "ComponentClass",
        "type": "TSubclassOf_UActorComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "bIncludeChildActors",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_UActorComponent_"
  },
  {
    "class": "ULyraTeamStatics",
    "name": "GetTeamTextureWithFallback",
    "description": "A subsystem for easy access to team information for team-based actors (e.g., pawns or player states)",
    "parameters": [
      {
        "name": "DisplayAsset",
        "type": "ULyraTeamDisplayAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture"
  },
  {
    "class": "ULyraTeamStatics",
    "name": "GetTeamScalarWithFallback",
    "description": "",
    "parameters": [
      {
        "name": "DisplayAsset",
        "type": "ULyraTeamDisplayAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "ULyraTeamStatics",
    "name": "GetTeamDisplayAsset",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TeamId",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULyraTeamDisplayAsset"
  },
  {
    "class": "ULyraTeamStatics",
    "name": "GetTeamColorWithFallback",
    "description": "",
    "parameters": [
      {
        "name": "DisplayAsset",
        "type": "ULyraTeamDisplayAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "ParameterName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DefaultValue",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "ULyraTeamStatics",
    "name": "FindTeamFromObject",
    "description": "Returns the team this object belongs to, or INDEX_NONE if it is not part of a team",
    "parameters": [
      {
        "name": "Agent",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsPartOfTeam",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "TeamId",
        "type": "integer",
        "optional": false,
        "out": true
      },
      {
        "name": "DisplayAsset",
        "type": "ULyraTeamDisplayAsset",
        "optional": false,
        "out": true
      },
      {
        "name": "bLogIfNotSet",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "ULyraVerbMessageHelpers",
    "name": "VerbMessageToCueParameters",
    "description": "",
    "parameters": [
      {
        "name": "Message",
        "type": "FLyraVerbMessage",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameplayCueParameters"
  },
  {
    "class": "ULyraVerbMessageHelpers",
    "name": "GetPlayerStateFromObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerState"
  },
  {
    "class": "ULyraVerbMessageHelpers",
    "name": "GetPlayerControllerFromObject",
    "description": "",
    "parameters": [
      {
        "name": "Object",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "APlayerController"
  },
  {
    "class": "ULyraVerbMessageHelpers",
    "name": "CueParametersToVerbMessage",
    "description": "",
    "parameters": [
      {
        "name": "Params",
        "type": "FGameplayCueParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLyraVerbMessage"
  },
  {
    "class": "UPakFileSubsystem",
    "name": "IsRunningPIE",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UPickupableStatics",
    "name": "GetFirstPickupableFromActor",
    "description": "",
    "parameters": [
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TScriptInterface_UPickupable_"
  },
  {
    "class": "UPickupableStatics",
    "name": "AddPickupToInventory",
    "description": "",
    "parameters": [
      {
        "name": "InventoryComponent",
        "type": "ULyraInventoryManagerComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "Pickup",
        "type": "TScriptInterface_UPickupable_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerSettings",
    "name": "ShouldShowThumbnailCaptureSettings",
    "description": "Serializable options for sequencer.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "USequencerViewModelStructExtensions",
    "name": "GetPath",
    "description": "Function library containing methods that should be hoisted onto FSequencerScriptingRanges",
    "parameters": [
      {
        "name": "ViewModel",
        "type": "FSequencerViewModelScriptingStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USequencerViewModelStructExtensions",
    "name": "GetLabel",
    "description": "",
    "parameters": [
      {
        "name": "ViewModel",
        "type": "FSequencerViewModelScriptingStruct",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USequenceRecorderBlueprintLibrary",
    "name": "StopRecordingSequence",
    "description": "Stop recording the current sequence, if any",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "USequenceRecorderBlueprintLibrary",
    "name": "StartRecordingSequence",
    "description": "Start recording the passed-in actors to a level sequence.",
    "parameters": [
      {
        "name": "ActorsToRecord",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequenceRecorderBlueprintLibrary",
    "name": "IsRecordingSequence",
    "description": "Are we currently recording a sequence",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "SetSpawnableBindingID",
    "description": "Function library containing methods that should be hoisted onto FMovieSceneBindingProxies for scripting Set the spawnable id that the possessable binding should possess",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "SpawnableBindingID",
        "type": "FMovieSceneObjectBindingID",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "SetSortingOrder",
    "description": "Set the sorting order for this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "SortingOrder",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "SetParent",
    "description": "Set the parent to this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "InParentBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "SetName",
    "description": "Set this binding's object non-display name",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "SetDisplayName",
    "description": "Set this binding's name",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "InDisplayName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "RemoveTrack",
    "description": "Remove the specified track from this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackToRemove",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "Remove",
    "description": "Remove the specified binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "MoveBindingContents",
    "description": "Move all the contents (tracks, child bindings) of the specified binding ID onto another",
    "parameters": [
      {
        "name": "SourceBindingId",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationBindingId",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "IsValid",
    "description": "Check whether the specified binding is valid",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetTracks",
    "description": "Get all the tracks stored within this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetSortingOrder",
    "description": "Get the sorting order for this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetPossessedObjectClass",
    "description": "Get this binding's possessed object class",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetParent",
    "description": "Get the parent of this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetObjectTemplate",
    "description": "Get this binding's object template",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetName",
    "description": "Get this binding's object non-display name",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetId",
    "description": "Get this binding's ID",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGuid"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetDisplayName",
    "description": "Get this binding's name",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "GetChildPossessables",
    "description": "Get all the children of this binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "FindTracksByType",
    "description": "Find all tracks within a given binding of the specified type",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "FindTracksByExactType",
    "description": "Find all tracks within a given binding of the specified type, not allowing sub-classed types",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneBindingExtensions",
    "name": "AddTrack",
    "description": "Add a new track to the specified binding",
    "parameters": [
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneTrack"
  },
  {
    "class": "UMovieSceneDoubleVectorTrackExtensions",
    "name": "SetNumChannelsUsed",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneDoubleVectorTrack for scripting Set the number of channels used for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneDoubleVectorTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InNumChannelsUsed",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneDoubleVectorTrackExtensions",
    "name": "GetNumChannelsUsed",
    "description": "Get the number of channels used for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneDoubleVectorTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneEventTrackExtensions",
    "name": "GetBoundObjectPropertyClass",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneEventTrack for scripting * Return the class of the bound object property * * @@param EventKey    The event key to get the bound object property from * @@return The class of the bound object property",
    "parameters": [
      {
        "name": "EventKey",
        "type": "FMovieSceneEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UMovieSceneEventTrackExtensions",
    "name": "AddEventTriggerSection",
    "description": "Create a new event trigger section for the given track",
    "parameters": [
      {
        "name": "InTrack",
        "type": "UMovieSceneEventTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneEventTriggerSection"
  },
  {
    "class": "UMovieSceneEventTrackExtensions",
    "name": "AddEventRepeaterSection",
    "description": "Create a new event repeater section for the given track",
    "parameters": [
      {
        "name": "InTrack",
        "type": "UMovieSceneEventTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneEventRepeaterSection"
  },
  {
    "class": "UMovieSceneFloatVectorTrackExtensions",
    "name": "SetNumChannelsUsed",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneFloatVectorTrack for scripting Set the number of channels used for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneFloatVectorTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InNumChannelsUsed",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneFloatVectorTrackExtensions",
    "name": "GetNumChannelsUsed",
    "description": "Get the number of channels used for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneFloatVectorTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "SetFolderName",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneFolders for scripting Set the name of the given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InFolderName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "SetFolderColor",
    "description": "Set the display color of the given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InFolderColor",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "RemoveChildTrack",
    "description": "Remove a track from the given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrack",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "RemoveChildObjectBinding",
    "description": "Remove an object binding from the given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InObjectBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "RemoveChildFolder",
    "description": "Remove a child folder from the given folder",
    "parameters": [
      {
        "name": "TargetFolder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "FolderToRemove",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "GetFolderName",
    "description": "Get the given folder's display name",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "GetFolderColor",
    "description": "Get the display color of the given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "GetChildTracks",
    "description": "Get the tracks contained by this folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "GetChildObjectBindings",
    "description": "Get the object bindings contained by this folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "GetChildFolders",
    "description": "Get the child folders of a given folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneFolder_"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "AddChildTrack",
    "description": "Add a track to this folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InTrack",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "AddChildObjectBinding",
    "description": "Add a guid for an object binding to this folder",
    "parameters": [
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "InObjectBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneFolderExtensions",
    "name": "AddChildFolder",
    "description": "Add a child folder to the target folder",
    "parameters": [
      {
        "name": "TargetFolder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      },
      {
        "name": "FolderToAdd",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneMaterialTrackExtensions",
    "name": "SetMaterialInfo",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneMaterialTrack for scripting Set material info of the component that is animated by the material track.",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneComponentMaterialTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialInfo",
        "type": "FComponentMaterialInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneMaterialTrackExtensions",
    "name": "SetMaterialIndex",
    "description": "",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneComponentMaterialTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneMaterialTrackExtensions",
    "name": "GetMaterialInfo",
    "description": "Get material info of the component that is animated by the material track.",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneComponentMaterialTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FComponentMaterialInfo"
  },
  {
    "class": "UMovieSceneMaterialTrackExtensions",
    "name": "GetMaterialIndex",
    "description": "",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneComponentMaterialTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieScenePrimitiveMaterialTrackExtensions",
    "name": "SetMaterialInfo",
    "description": "Function library containing methods that should be hoisted onto UMovieScenePrimitiveMaterialTrack for scripting Set material info of the component that is animated by the material track.",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePrimitiveMaterialTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialInfo",
        "type": "FComponentMaterialInfo",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieScenePrimitiveMaterialTrackExtensions",
    "name": "SetMaterialIndex",
    "description": "",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePrimitiveMaterialTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieScenePrimitiveMaterialTrackExtensions",
    "name": "GetMaterialInfo",
    "description": "Get material info of the component that is animated by the material track.",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePrimitiveMaterialTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FComponentMaterialInfo"
  },
  {
    "class": "UMovieScenePrimitiveMaterialTrackExtensions",
    "name": "GetMaterialIndex",
    "description": "",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePrimitiveMaterialTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "SetPropertyNameAndPath",
    "description": "Function library containing methods that should be hoisted onto UMovieScenePropertyTrack for scripting Set this track's property name and path",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePropertyTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InPropertyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InPropertyPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "SetObjectPropertyClass",
    "description": "Set this object property track's property class",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneObjectPropertyTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "SetByteTrackEnum",
    "description": "Set this byte track's enum",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneByteTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InEnum",
        "type": "UEnum",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "GetUniqueTrackName",
    "description": "Get this track's unique name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePropertyTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "GetPropertyPath",
    "description": "Get this track's property path",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePropertyTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "GetPropertyName",
    "description": "Get this track's property name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieScenePropertyTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "GetObjectPropertyClass",
    "description": "Get this object property track's property class",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneObjectPropertyTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UMovieScenePropertyTrackExtensions",
    "name": "GetByteTrackEnum",
    "description": "Get this byte track's enum",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneByteTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEnum"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetStartFrameSeconds",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneSections for scripting Set start time in seconds",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetStartFrameBounded",
    "description": "Set start frame bounded",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsBounded",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetStartFrame",
    "description": "Set start frame",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "StartFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetRangeSeconds",
    "description": "Set range in seconds",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetRange",
    "description": "Set range",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "StartFrame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "EndFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetEndFrameSeconds",
    "description": "Set end time in seconds",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetEndFrameBounded",
    "description": "Set end frame bounded",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsBounded",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "SetEndFrame",
    "description": "Set end frame",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "EndFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "HasStartFrame",
    "description": "Has start frame",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "HasEndFrame",
    "description": "Has end frame",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetStartFrameSeconds",
    "description": "Get start time in seconds. Will throw an exception if section has no start frame, use HasStartFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetStartFrame",
    "description": "Get start frame. Will throw an exception if section has no start frame, use HasStartFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetParentSequenceFrame",
    "description": "Get the frame in the space of its parent sequence",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSubSection",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "ParentSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetEndFrameSeconds",
    "description": "Get end time in seconds. Will throw an exception if section has no end frame, use HasEndFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetEndFrame",
    "description": "Get end frame. Will throw an exception if section has no end frame, use HasEndFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetChannelsByType",
    "description": "Find all channels that belong to the specified UMovieSceneSection that match the specific type. This will filter out any children who do not inherit from the specified type for you.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "ChannelType",
        "type": "TSubclassOf_UMovieSceneScriptingChannel_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneScriptingChannel_"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetChannel",
    "description": "Get channel from specified section and channel name",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      },
      {
        "name": "ChannelName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneScriptingChannel"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeStartFrameSeconds",
    "description": "Get start time of the AutoSize in seconds. Will throw an exception if section has no start frame, use GetAutoSizeHasStartFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeStartFrame",
    "description": "Get start frame of the AutoSize. Will throw an exception if section has no start frame, use GetAutoSizeHasStartFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeHasStartFrame",
    "description": "Checks to see if this section has an AutoSize implementation, and if so, if that implementation has a start frame.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeHasEndFrame",
    "description": "Checks to see if this section has an AutoSize implementation, and if so, if that implementation has a end frame.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeEndFrameSeconds",
    "description": "Get end time of the AutoSize seconds. Will throw an exception if section has no end frame, use GetAutoSizeHasEndFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAutoSizeEndFrame",
    "description": "Get end frame of the AutoSize. Will throw an exception if section has no end frame, use GetAutoSizeHasEndFrame to check first.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSectionExtensions",
    "name": "GetAllChannels",
    "description": "Find all channels that belong to the specified UMovieSceneSection. Some sections have many channels (such as Transforms containing 9 double channels to represent Translation/Rotation/Scale), and a section may have mixed channel types.",
    "parameters": [
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneScriptingChannel_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SortMarkedFrames",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneSequences for scripting purposes * Sort the marked frames in chronological order",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetWorkRangeStart",
    "description": "Set the sequence work range start in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetWorkRangeEnd",
    "description": "Set the sequence work range end in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetViewRangeStart",
    "description": "Set the sequence view range start in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetViewRangeEnd",
    "description": "Set the sequence view range end in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetTickResolutionDirectly",
    "description": "Sets this sequence's tick resolution directly without migrating frame times",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TickResolution",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetTickResolution",
    "description": "Sets this sequence's tick resolution and migrates frame times",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TickResolution",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetReadOnly",
    "description": "* Set read only * * @@bInReadOnly Whether the movie scene should be read only or not",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "bInReadOnly",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetPlaybackStartSeconds",
    "description": "Set playback start of this sequence in seconds",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetPlaybackStart",
    "description": "Set playback start of this sequence",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetPlaybackRangeLocked",
    "description": "* Set playback range locked * * @@bInLocked Whether the movie scene playback range should be locked",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "bInLocked",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetPlaybackEndSeconds",
    "description": "Set playback end of this sequence in seconds",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "EndTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetPlaybackEnd",
    "description": "Set playback end of this sequence",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "EndFrame",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetMarkedFramesLocked",
    "description": "* Set marked frames locked * * @@bInLocked Whether the movie scene marked frames should be locked",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "bInLocked",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetMarkedFrameInSequence",
    "description": "* Sets the frame number for the given marked frame index. Does not maintain sort. Call SortMarkedFrames * * @@InMarkIndex The given user marked frame index to edit * @@InFrameNumber The frame number to set",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InMarkIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetMarkedFrame",
    "description": "",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InMarkIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetEvaluationType",
    "description": "Set the evaluation type for this sequence",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InEvaluationType",
        "type": "EMovieSceneEvaluationType",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetDisplayRate",
    "description": "Sets this sequence's display rate",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "DisplayRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "SetClockSource",
    "description": "Set the clock source for this sequence",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InClockSource",
        "type": "EUpdateClockSource",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "ResolveBindingID",
    "description": "Make a binding for the given binding ID",
    "parameters": [
      {
        "name": "RootSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InObjectBindingID",
        "type": "FMovieSceneObjectBindingID",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "RemoveTrack",
    "description": "Removes a track",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "RemoveRootFolderFromSequence",
    "description": "Remove a root folder from the given sequence. Will throw an exception if the specified folder is not valid or not a root folder.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Folder",
        "type": "UMovieSceneFolder",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "MakeRangeSeconds",
    "description": "Make a new range for this sequence in seconds",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartTime",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencerScriptingRange"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "MakeRange",
    "description": "Make a new range for this sequence in its display rate",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "StartFrame",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencerScriptingRange"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "LocateBoundObjects",
    "description": "Locate all the objects that correspond to the specified object ID, using the specified context",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Context",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UObject_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "IsReadOnly",
    "description": "* Is read only * * @@return Whether the movie scene is read only or not",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "IsPlaybackRangeLocked",
    "description": "* Is playback ranged locked * * @@return Whether the movie scene playback range is locked",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetWorkRangeStart",
    "description": "Get the sequence work range start in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetWorkRangeEnd",
    "description": "Get the sequence work range end in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetViewRangeStart",
    "description": "Get the sequence view range start in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetViewRangeEnd",
    "description": "Get the sequence view range end in seconds",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetTracks",
    "description": "Get all tracks",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetTickResolution",
    "description": "Gets this sequence's tick resolution",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameRate"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetSpawnables",
    "description": "Get all the spawnables in this sequence. For Level Sequences, this includes bindings with binding type UMovieSceneSpawnableActorBinding.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetRootFoldersInSequence",
    "description": "Get the root folders in the provided sequence",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneFolder_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPossessables",
    "description": "Get all the possessables in this sequence. It is understood for the purpose of this function that this means the bindings are not custom.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPortableBindingID",
    "description": "Get a portable binding ID for a binding that resides in a different sequence to the one where this binding will be resolved.",
    "parameters": [
      {
        "name": "RootSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneObjectBindingID"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPlaybackStartSeconds",
    "description": "Get playback start of this sequence in seconds",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPlaybackStart",
    "description": "Get playback start of this sequence in display rate resolution",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPlaybackRange",
    "description": "Get playback range of this sequence in display rate resolution",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencerScriptingRange"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPlaybackEndSeconds",
    "description": "Get playback end of this sequence in seconds",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetPlaybackEnd",
    "description": "Get playback end of this sequence in display rate resolution",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetMovieScene",
    "description": "Get this sequence's movie scene data",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieScene"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetMarkedFramesFromSequence",
    "description": "* Get the marked frames for this sequence * * @@return Return the user marked frames",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneMarkedFrame_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetMarkedFrames",
    "description": "",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneMarkedFrame_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetEvaluationType",
    "description": "Get the evaluation type for this sequence",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EMovieSceneEvaluationType"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetDisplayRate",
    "description": "Gets this sequence's display rate",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameRate"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetClockSource",
    "description": "Get the clock source for this sequence",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "EUpdateClockSource"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetBindings",
    "description": "Get all the bindings in this sequence",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FMovieSceneBindingProxy_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "GetBindingID",
    "description": "Get the binding ID for a binding within a sequence.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBinding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneObjectBindingID"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindTracksByType",
    "description": "Find all tracks of the specified type",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindTracksByExactType",
    "description": "Find all tracks of the specified type, not allowing sub-classed types",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneTrack_"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindNextMarkedFrameInSequence",
    "description": "* Find the next/previous user marked frame from the given frame number * * @@InFrameNumber The frame number to find the next/previous user marked frame from * @@bForward Find forward from the given frame number.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "bForward",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindNextMarkedFrame",
    "description": "",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "bForward",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindMarkedFrameByLabel",
    "description": "* Find the user marked frame by label * * @@InLabel The label to the user marked frame to find",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InLabel",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindMarkedFrameByFrameNumberInSequence",
    "description": "* Find the user marked frame by frame number * * @@InFrameNumber The frame number of the user marked frame to find",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindMarkedFrameByFrameNumber",
    "description": "",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindBindingByName",
    "description": "Attempt to locate a binding in this sequence by its name",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "FindBindingById",
    "description": "Attempt to locate a binding in this sequence by its Id",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "BindingId",
        "type": "FGuid",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "DeleteMarkedFrames",
    "description": "* Delete all user marked frames",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "DeleteMarkedFrame",
    "description": "* Delete the user marked frame by index. * * @@DeleteIndex The index to the user marked frame to delete",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "DeleteIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AreMarkedFramesLocked",
    "description": "* Are marked frames locked * * @@return Whether the movie scene marked frames are locked",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddTrack",
    "description": "Add a new track of the specified type",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "TrackType",
        "type": "TSubclassOf_UMovieSceneTrack_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneTrack"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddSpawnableFromInstance",
    "description": "Add a new binding to this sequence that will spawn the specified object. For level sequences this will make a custom binding of type UMovieSceneSpawnableActorBinding.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectToSpawn",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddSpawnableFromClass",
    "description": "Add a new binding to this sequence that will spawn the specified object For level sequences this will make a custom binding of type UMovieSceneSpawnableActorBinding.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ClassToSpawn",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddRootFolderToSequence",
    "description": "Add a root folder to the given sequence",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "NewFolderName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneFolder"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddPossessable",
    "description": "Add a new binding to this sequence that will possess the specified object",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ObjectToPossess",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneBindingProxy"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddMarkedFrameToSequence",
    "description": "* Add a given user marked frame. * A unique label will be generated if the marked frame label is empty * * @@InMarkedFrame The given user marked frame to add * @@return The index to the newly added marked frame",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InMarkedFrame",
        "type": "FMovieSceneMarkedFrame",
        "optional": false,
        "out": false
      },
      {
        "name": "TimeUnit",
        "type": "EMovieSceneTimeUnit",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneSequenceExtensions",
    "name": "AddMarkedFrame",
    "description": "",
    "parameters": [
      {
        "name": "Sequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InMarkedFrame",
        "type": "FMovieSceneMarkedFrame",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "ToFixedPlayRate",
    "description": "Function library containing methods that relate to time-warp within Sequencer Retrieve this timewarp's constant play rate. Will throw an error if the timewarp is not a constant play rate.",
    "parameters": [
      {
        "name": "TimeWarp",
        "type": "FMovieSceneTimeWarpVariant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "SetFixedPlayRate",
    "description": "Assign a constant playrate to this timewarp, overwriting any existing timewarp implementation.",
    "parameters": [
      {
        "name": "TimeWarp",
        "type": "FMovieSceneTimeWarpVariant",
        "optional": false,
        "out": true
      },
      {
        "name": "FixedPlayRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "MakeTimeWarp",
    "description": "",
    "parameters": [
      {
        "name": "FixedPlayRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneTimeWarpVariant"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "Conv_TimeWarpVariantToPlayRate",
    "description": "Converts a timewarp variant struct to a constant play rate",
    "parameters": [
      {
        "name": "TimeWarp",
        "type": "FMovieSceneTimeWarpVariant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "Conv_PlayRateToTimeWarpVariant",
    "description": "Converts a constant playrate to a timewarp variant",
    "parameters": [
      {
        "name": "ConstantPlayRate",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneTimeWarpVariant"
  },
  {
    "class": "UMovieSceneTimeWarpExtensions",
    "name": "BreakTimeWarp",
    "description": "",
    "parameters": [
      {
        "name": "TimeWarp",
        "type": "FMovieSceneTimeWarpVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "FixedPlayRate",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "SetTrackRowDisplayName",
    "description": "Function library containing methods that should be hoisted onto UMovieSceneTracks for scripting Set this track row's display name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "RowIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "SetSortingOrder",
    "description": "Set the sorting order for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "SortingOrder",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "SetSectionToKey",
    "description": "Set the section to key for this track. When properties for this section are modified externally, this section will receive those modifications and act accordingly (add/update keys). This is especially useful when there are multiple overlapping sections.",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "SetDisplayName",
    "description": "Set this track's display name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "SetColorTint",
    "description": "Set the color tint for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorTint",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "RemoveSection",
    "description": "Remove the specified section",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "Section",
        "type": "UMovieSceneSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetTrackRowDisplayName",
    "description": "Get this track row's display name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      },
      {
        "name": "RowIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetSortingOrder",
    "description": "Get the sorting order for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetSectionToKey",
    "description": "Get the section to key for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneSection"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetSections",
    "description": "Access all this track's sections",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UMovieSceneSection_"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetDisplayName",
    "description": "Get this track's display name",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "GetColorTint",
    "description": "Get the color tint for this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UMovieSceneTrackExtensions",
    "name": "AddSection",
    "description": "Add a new section to this track",
    "parameters": [
      {
        "name": "Track",
        "type": "UMovieSceneTrack",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMovieSceneSection"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "SetStartSeconds",
    "description": "Function library containing methods that should be hoisted onto FSequencerScriptingRanges Set the starting time for the specified range in seconds. Interpreted as the first valid time that is inside the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      },
      {
        "name": "Start",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "SetStartFrame",
    "description": "Set the starting frame for the specified range. Interpreted as the first valid frame that is inside the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      },
      {
        "name": "Start",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "SetEndSeconds",
    "description": "Set the ending time for the specified range in seconds. Interpreted as the first time that is outside of the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      },
      {
        "name": "End",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "SetEndFrame",
    "description": "Set the ending frame for the specified range. Interpreted as the first subsequent frame that is outside of the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      },
      {
        "name": "End",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "RemoveStart",
    "description": "Remove the start from this range, making it infinite",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "RemoveEnd",
    "description": "Remove the end from this range, making it infinite",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "HasStart",
    "description": "Check whether this range has a start",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "HasEnd",
    "description": "Check whether this range has an end",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "GetStartSeconds",
    "description": "Get the starting time for the specified range in seconds, if it has one. Defined as the first valid time that is inside the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "GetStartFrame",
    "description": "Get the starting frame for the specified range, if it has one. Defined as the first valid frame that is inside the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "GetEndSeconds",
    "description": "Get the ending time for the specified range in seconds, if it has one. Defined as the first time that is outside of the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USequencerScriptingRangeExtensions",
    "name": "GetEndFrame",
    "description": "Get the ending frame for the specified range, if it has one. Defined as the first subsequent frame that is outside of the range.",
    "parameters": [
      {
        "name": "Range",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "RenderMovie",
    "description": "This is a set of helper functions to access various parts of the Sequencer API via Python. Because Sequencer itself is not suitable for exposing, most functionality gets wrapped by UObjects that have an easier API to work with. This UObject provides access to these wrapper UObjects where needed.",
    "parameters": [
      {
        "name": "InCaptureSettings",
        "type": "UMovieSceneCapture",
        "optional": false,
        "out": false
      },
      {
        "name": "OnFinishedCallback",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "LinkAnimSequence",
    "description": "* Links a LevelSequence's SkeletalMesh binding to an existing anim sequence. * * @@InSequence Sequence to link from * @@AnimSequence The AnimSequence to link to. * @@ExportOption The export options that should be used when baking the LevelSequence. * @@InBinding Binding that has a skelmesh component on it",
    "parameters": [
      {
        "name": "Sequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportOptions",
        "type": "UAnimSeqExportOption",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "IsRenderingMovie",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "IsEventEndpointValid",
    "description": "Check if an endpoint is valid and can be used to create movie scene event.",
    "parameters": [
      {
        "name": "InEndpoint",
        "type": "FSequencerQuickBindingResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ImportLevelSequenceFBX",
    "description": "* Import FBX onto Passed in Bindings * * @@InWorld World to import to * @@InSequence InSequence to import * @@InBindings InBindings to import * @@InImportFBXSettings Settings to control import. * @@InImportFileName Path to fbx file to import from * @@InPlayer Player to bind to",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBindings",
        "type": "TArray_FMovieSceneBindingProxy_",
        "optional": false,
        "out": false
      },
      {
        "name": "InImportFBXSettings",
        "type": "UMovieSceneUserImportFBXSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "InImportFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ImportFBXToControlRig",
    "description": "* Import FBX onto a control rig with the specified track name * * @@InWorld World to import to * @@InSequence InSequence to import * @@ActorWithControlRigTrack ActorWithControlRigTrack The name of the actor with the control rig track we are importing onto * @@SelectedControlRigNames  List of selected control rig names. Will use them if  ImportFBXControlRigSettings->bImportOntoSelectedControls is true * @@ImportFBXControlRigSettings Settings to control import. * @@InImportFileName Path to fbx file to create",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorWithControlRigTrack",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectedControlRigNames",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportFBXControlRigSettings",
        "type": "UMovieSceneUserImportFBXControlRigSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "ImportFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "GetObjectBindings",
    "description": "",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InObject",
        "type": "TArray_UObject_",
        "optional": false,
        "out": false
      },
      {
        "name": "InRange",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FSequencerBoundObjects_"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "GetLevelSequenceLinkFromAnimSequence",
    "description": "* Get the link to the level sequence if it exists on this anim sequence * * @@InAnimSequence AnimSequence to get links from * @@return Returns the link object if it exists, nullptr if it doesn't",
    "parameters": [
      {
        "name": "InAnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAnimSequenceLevelSequenceLink"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "GetBoundObjects",
    "description": "",
    "parameters": [
      {
        "name": "InWorld",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "InSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InBindings",
        "type": "TArray_FMovieSceneBindingProxy_",
        "optional": false,
        "out": false
      },
      {
        "name": "InRange",
        "type": "FSequencerScriptingRange",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FSequencerBoundObjects_"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "GetAnimSequenceLinkFromLevelSequence",
    "description": "* Get the links to the anim sequences if they exist on this level sequence * * @@InLevelSequence LevelSequence to get links from * @@return Returns the link object if it exists, nullptr if it doesn't",
    "parameters": [
      {
        "name": "InLevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelSequenceAnimSequenceLink"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ExportLevelSequenceFBX",
    "description": "* Export Passed in Bindings and Tracks to FBX",
    "parameters": [
      {
        "name": "InParams",
        "type": "FSequencerExportFBXParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ExportFBXFromControlRig",
    "description": "Exports an FBX from the section to key of the control rig track of the actor with the given name.",
    "parameters": [
      {
        "name": "Sequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorWithControlRigTrack",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportFBXControlRigSettings",
        "type": "UMovieSceneUserExportFBXControlRigSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ExportAnimSequence",
    "description": "* Export Passed in Binding as an Anim Seqquence. * * @@InWorld World to export * @@InSequence Sequence to export * @@AnimSequence The AnimSequence to save into. * @@ExportOption The export options for the sequence. * @@InBinding Binding to export that has a skelmesh component on it * @@InAnimSequenceFilename File to create * @@bCreateLink If true will create a link between the animation sequence and the level sequence",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "Sequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "AnimSequence",
        "type": "UAnimSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "ExportOption",
        "type": "UAnimSeqExportOption",
        "optional": false,
        "out": false
      },
      {
        "name": "Binding",
        "type": "FMovieSceneBindingProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "bCreateLink",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "CreateQuickBinding",
    "description": "Create a quick binding to an actor's member method to be used in an event sequence.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "InFunctionName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bCallInEditor",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSequencerQuickBindingResult"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "CreateEvent",
    "description": "Create an event from a previously created blueprint endpoint and a payload. The resulting event should be added only to a channel of the section that was given as a parameter.",
    "parameters": [
      {
        "name": "InSequence",
        "type": "UMovieSceneSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "InSection",
        "type": "UMovieSceneEventSectionBase",
        "optional": false,
        "out": false
      },
      {
        "name": "InEndpoint",
        "type": "FSequencerQuickBindingResult",
        "optional": false,
        "out": false
      },
      {
        "name": "InPayload",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMovieSceneEvent"
  },
  {
    "class": "USequencerToolsFunctionLibrary",
    "name": "ClearLinkedAnimSequences",
    "description": "* Clear all linked anim sequences between this level sequence and any linked anim sequences * * @@InLevelSequence LevelSequence to clean links for",
    "parameters": [
      {
        "name": "InLevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USkeletalMergingLibrary",
    "name": "MergeSkeletons",
    "description": "Component that can be used to perform Skeletal Mesh merges from Blueprints. Merges the skeletons for the provided meshes into a single skeleton.",
    "parameters": [
      {
        "name": "Params",
        "type": "FSkeletonMergeParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeleton"
  },
  {
    "class": "USkeletalMergingLibrary",
    "name": "MergeMeshes",
    "description": "Merges the given meshes into a single mesh.",
    "parameters": [
      {
        "name": "Params",
        "type": "FSkeletalMeshMergeParams",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USkeletalMesh"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "SetLodBuildSettings",
    "description": "USkeletalMeshEditorSubsystem Subsystem for exposing skeletal mesh functionality to scripts Set bVisibleInRayTracing for a section of a LOD of a Skeletal Mesh. Set RecomputeTangentsVertexMaskChannel for a section of a LOD of a Skeletal Mesh. Set bRecomputeTangent for a section of a LOD of a Skeletal Mesh. Set bCastShadow for a section of a LOD of a Skeletal Mesh. Set the LOD build options for the specified LOD index.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "BuildOptions",
        "type": "FSkeletalMeshBuildSettings",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "RenameSocket",
    "description": "Rename a socket within a skeleton",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "OldName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "ReimportAllCustomLODs",
    "description": "Re-import the specified skeletal mesh and all the custom LODs.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "RegenerateLOD",
    "description": "Regenerate LODs of the mesh Otherwise, it will use the current LOD and regenerate If false, it will regenerate for only previously auto generated ones",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "NewLODCount",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "bRegenerateEvenIfImported",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bGenerateBaseLOD",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "IsPhysicsAssetCompatible",
    "description": "Checks whether a physics asset is compatible with the given SkeletalMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysicsAsset",
        "type": "UPhysicsAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "ImportLOD",
    "description": "Import or re-import a LOD into the specified base mesh. If the LOD do not exist it will import it and add it to the base static mesh. If the LOD already exist it will re-import the specified LOD.",
    "parameters": [
      {
        "name": "BaseMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LODIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceFilename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "GetLODCount",
    "description": "Get bVisibleInRayTracing from a section of a LOD of a Skeletal Mesh Get RecomputeTangentsVertexMaskChannel from a section of a LOD of a Skeletal Mesh Get bRecomputeTangent from a section of a LOD of a Skeletal Mesh Get bCastShadow from a section of a LOD of a Skeletal Mesh Get number of mesh vertices for an LOD of a Skeletal Mesh Get number of sections for a LOD of a Skeletal Mesh Gets the material slot used for a specific LOD section. Retrieve the number of LOD contain in the specified skeletal mesh.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "GetLodBuildSettings",
    "description": "Copy the build options with the specified LOD build settings.",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "LodIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutBuildOptions",
        "type": "FSkeletalMeshBuildSettings",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "CreatePhysicsAsset",
    "description": "This function creates a PhysicsAsset for the given SkeletalMesh with the same settings as if it were created through FBX import",
    "parameters": [
      {
        "name": "SkeletalMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPhysicsAsset"
  },
  {
    "class": "USkeletalMeshEditorSubsystem",
    "name": "AssignPhysicsAsset",
    "description": "Assigns a PhysicsAsset to the given SkeletalMesh if it is compatible. Passing nullptr / None as the physics asset will always succeed and will clear the physics asset assignment for the target SkeletalMesh",
    "parameters": [
      {
        "name": "TargetMesh",
        "type": "USkeletalMesh",
        "optional": false,
        "out": false
      },
      {
        "name": "PhysicsAsset",
        "type": "UPhysicsAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "SmartObjectClaimHandle_Invalid",
    "description": "Returns the invalid smart object claim handle.",
    "parameters": [],
    "returnType": "FSmartObjectClaimHandle"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "SetValueAsSOClaimHandle",
    "description": "",
    "parameters": [
      {
        "name": "BlackboardComponent",
        "type": "UBlackboardComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "SetSmartObjectEnabled",
    "description": "Marks all smart objects for an actor as enabled or not according to 'bEnabled'. A smart object marked as Enabled is available for queries. mark the object unavailable for new queries and broadcast an event that can be handled by the interacting agent to complete earlier. If the object should not be consider usable anymore and the interactions aborted then consider using one of the Add/RemoveSmartObject functions.",
    "parameters": [
      {
        "name": "SmartObjectActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "SetMultipleSmartObjectsEnabled",
    "description": "Marks all smart objects for a list of actors as enabled or not according to 'bEnabled'. A smart object marked as Enabled is available for queries. mark the object unavailable for new queries and broadcast an event that can be handled by the interacting agent to complete earlier. If the object should not be consider usable anymore and the interactions aborted then consider using one of the Add/RemoveSmartObject functions.",
    "parameters": [
      {
        "name": "SmartObjectActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "SetBlackboardValueAsSOClaimHandle",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      },
      {
        "name": "Value",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "RemoveSmartObject",
    "description": "Removes from the simulation all smart objects for an actor. to make the object unavailable for queries consider using one of the SetSmartObjectEnabled functions so active interactions can be gracefully completed.",
    "parameters": [
      {
        "name": "SmartObjectActor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "RemoveMultipleSmartObjects",
    "description": "Removes from the simulation all smart objects for multiple actors. to make the object unavailable for queries consider using one of the SetSmartObjectEnabled functions so active interactions can be gracefully completed.",
    "parameters": [
      {
        "name": "SmartObjectActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "NotEqual_SmartObjectSlotHandleSmartObjectSlotHandle",
    "description": "Returns true if SmartObjectSlotHandle A is NOT equal to SmartObjectSlotHandle B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "NotEqual_SmartObjectHandleSmartObjectHandle",
    "description": "Returns true if SmartObjectHandle A is NOT equal to SmartObjectHandle B (A != B)",
    "parameters": [
      {
        "name": "A",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "MarkSmartObjectSlotAsOccupied",
    "description": "Marks a previously claimed smart object slot as occupied.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "DefinitionClass",
        "type": "TSubclassOf_USmartObjectBehaviorDefinition_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USmartObjectBehaviorDefinition"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "MarkSmartObjectSlotAsFree",
    "description": "Marks a claimed or occupied smart object as free.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ClaimHandle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "MarkSmartObjectSlotAsClaimed",
    "description": "Marks a smart object slot from a request result as claimed.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SlotHandle",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "UserActor",
        "type": "AActor",
        "optional": true,
        "out": false
      },
      {
        "name": "ClaimPriority",
        "type": "ESmartObjectClaimPriority",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSmartObjectClaimHandle"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "IsValidSmartObjectSlotHandle",
    "description": "Returns true if the given Smart Object Slot Handle is valid.",
    "parameters": [
      {
        "name": "Handle",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "IsValidSmartObjectHandle",
    "description": "Returns true if the given handle is valid",
    "parameters": [
      {
        "name": "Handle",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "IsValidSmartObjectClaimHandle",
    "description": "",
    "parameters": [
      {
        "name": "Handle",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "GetValueAsSOClaimHandle",
    "description": "",
    "parameters": [
      {
        "name": "BlackboardComponent",
        "type": "UBlackboardComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "KeyName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSmartObjectClaimHandle"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "GetBlackboardValueAsSOClaimHandle",
    "description": "",
    "parameters": [
      {
        "name": "NodeOwner",
        "type": "UBTNode",
        "optional": false,
        "out": false
      },
      {
        "name": "Key",
        "type": "FBlackboardKeySelector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSmartObjectClaimHandle"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "FindSmartObjectsInTargetingRequest",
    "description": "Search the results of the given targeting handle request for smart objects that match the request criteria",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Filter",
        "type": "FSmartObjectRequestFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetingHandle",
        "type": "FTargetingRequestHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResults",
        "type": "TArray_FSmartObjectRequestResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "UserActor",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "FindSmartObjectsInList",
    "description": "Search list of specific actors (often from a physics query) for slot candidates respecting request criteria and selection conditions.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Filter",
        "type": "FSmartObjectRequestFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorList",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResults",
        "type": "TArray_FSmartObjectRequestResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "UserActor",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "FindSmartObjectsInComponent",
    "description": "Search a given Smart Object Component for slot candidates respecting the request criteria and selection conditions.",
    "parameters": [
      {
        "name": "Filter",
        "type": "FSmartObjectRequestFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "SmartObjectComponent",
        "type": "USmartObjectComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResults",
        "type": "TArray_FSmartObjectRequestResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "UserActor",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "FindSmartObjectsInActor",
    "description": "Search a given Actor for slot candidates respecting the request criteria and selection conditions.",
    "parameters": [
      {
        "name": "Filter",
        "type": "FSmartObjectRequestFilter",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "OutResults",
        "type": "TArray_FSmartObjectRequestResult_",
        "optional": false,
        "out": true
      },
      {
        "name": "UserActor",
        "type": "AActor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Equal_SmartObjectSlotHandleSmartObjectSlotHandle",
    "description": "Returns true if SmartObjectSlotHandle A is equal to SmartObjectSlotHandle B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Equal_SmartObjectHandleSmartObjectHandle",
    "description": "Returns true if SmartObjectHandle A is equal to SmartObjectHandle B (A == B)",
    "parameters": [
      {
        "name": "A",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Conv_SmartObjectSlotHandleToString",
    "description": "Converts a SmartObjectSlotHandle value to a string",
    "parameters": [
      {
        "name": "Handle",
        "type": "FSmartObjectSlotHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Conv_SmartObjectRequestResultToString",
    "description": "Converts a SmartObjectRequestResult value to a string",
    "parameters": [
      {
        "name": "Result",
        "type": "FSmartObjectRequestResult",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Conv_SmartObjectHandleToString",
    "description": "Converts a SmartObjectHandle value to a string",
    "parameters": [
      {
        "name": "Handle",
        "type": "FSmartObjectHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Conv_SmartObjectDefinitionToString",
    "description": "Converts a SmartObjectDefinition value to a string",
    "parameters": [
      {
        "name": "Definition",
        "type": "USmartObjectDefinition",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "Conv_SmartObjectClaimHandleToString",
    "description": "Converts a SmartObjectClaimHandle value to a string",
    "parameters": [
      {
        "name": "Result",
        "type": "FSmartObjectClaimHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "AddSmartObject",
    "description": "Adds to the simulation all smart objects for an actor.",
    "parameters": [
      {
        "name": "SmartObjectActor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "AddOrRemoveSmartObject",
    "description": "Adds to the simulation all smart objects for an actor or removes them according to 'bAdd'. to make the object unavailable for queries consider using one of the SetSmartObjectEnabled functions so active interactions can be gracefully completed.",
    "parameters": [
      {
        "name": "SmartObject",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "bEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "AddOrRemoveMultipleSmartObjects",
    "description": "Adds to the simulation all smart objects for multiple actors or removes them according to 'bAdd'. to make the object unavailable for queries consider using one of the SetSmartObjectEnabled functions so active interactions can be gracefully completed.",
    "parameters": [
      {
        "name": "SmartObjectActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bAdd",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USmartObjectBlueprintFunctionLibrary",
    "name": "AddMultipleSmartObjects",
    "description": "Adds to the simulation all smart objects for multiple actors.",
    "parameters": [
      {
        "name": "SmartObjectActors",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetQFromBandwidth",
    "description": "Sound Utilities Blueprint Function Library A library of Sound related functions for use in Blueprints Helper function to get Q from bandwidth",
    "parameters": [
      {
        "name": "InBandwidth",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetPitchScaleFromMIDIPitch",
    "description": "Calculates Pitch Scalar based on starting frequency and desired MIDI Pitch output for its pitch to match the target MIDI note",
    "parameters": [
      {
        "name": "BaseMidiNote",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetMidiNote",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetMIDIPitchFromFrequency",
    "description": "Calculates MIDI Pitch values based on frequency input",
    "parameters": [
      {
        "name": "Frequency",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetLogFrequencyClamped",
    "description": "Returns the log frequency of the input value. Maps linear domain and range values to log output (good for linear slider controlling frequency)",
    "parameters": [
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomain",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "InRange",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetLinearFrequencyClamped",
    "description": "Returns the linear frequency of the input value. Maps log domain and range values to linear output (good for linear slider representation/visualization of log frequency). Reverse of GetLogFrequencyClamped.",
    "parameters": [
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomain",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "InRange",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetGainFromMidiVelocity",
    "description": "Given a velocity value [0,127], return the linear gain",
    "parameters": [
      {
        "name": "InVelocity",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetFrequencyMultiplierFromSemitones",
    "description": "Returns the frequency multiplier to scale a base frequency given the input semitones",
    "parameters": [
      {
        "name": "InPitchSemitones",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetFrequencyFromMIDIPitch",
    "description": "Calculates Frequency values based on MIDI Pitch input",
    "parameters": [
      {
        "name": "MidiNote",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetBeatTempo",
    "description": "Calculates a beat time in seconds from the given BPM, beat multiplier and divisions of a whole note.",
    "parameters": [
      {
        "name": "BeatsPerMinute",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "BeatMultiplier",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "DivisionsOfWholeNote",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "GetBandwidthFromQ",
    "description": "Helper function to get bandwidth from Q",
    "parameters": [
      {
        "name": "InQ",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "ConvertLinearToDecibels",
    "description": "Converts linear scale volume to decibels",
    "parameters": [
      {
        "name": "InLinear",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InFloor",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USoundUtilitiesBPFunctionLibrary",
    "name": "ConvertDecibelsToLinear",
    "description": "Converts decibel to linear scale",
    "parameters": [
      {
        "name": "InDecibels",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USourceControlHelpers",
    "name": "SyncFiles",
    "description": "Editor source control common functionality. - fully qualified path - relative path - long package name - asset path - export text path (often stored on clipboard) For example: - D:\\Epic\\Dev-Ent\\Projects\\Python3rdBP\\Content\\Mannequin\\Animations\\ThirdPersonIdle.uasset - Content\\Mannequin\\Animations\\ThirdPersonIdle.uasset - /Game/Mannequin/Animations/ThirdPersonIdle - /Game/Mannequin/Animations/ThirdPersonIdle.ThirdPersonIdle - AnimSequence'/Game/Mannequin/Animations/ThirdPersonIdle.ThirdPersonIdle' Use currently set source control provider to sync files or directories to the head revision.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "SyncFile",
    "description": "Use currently set source control provider to sync a file or directory to the head revision.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "RevertUnchangedFiles",
    "description": "Use currently set source control provider to revert files provided no changes have been made.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "RevertUnchangedFile",
    "description": "Use currently set source control provider to revert a file provided no changes have been made.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "RevertFiles",
    "description": "Use currently set source control provider to revert files regardless whether any changes will be lost or not.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "RevertFile",
    "description": "Use currently set source control provider to revert a file regardless whether any changes will be lost or not.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "RevertAndReloadPackages",
    "description": "Reverts the provided files then reloads packages.",
    "parameters": [
      {
        "name": "InPackagesToRevert",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bRevertAll",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bReloadWorld",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "QueryFileState",
    "description": "Delegate to broadcast FileState upon AsyncQueryFileState completion Use currently set source control provider to query a file's source control state. it could not have its values set.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSourceControlState"
  },
  {
    "class": "USourceControlHelpers",
    "name": "MarkFilesForDelete",
    "description": "Use currently set source control provider to remove files from source control and delete the files.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "MarkFilesForAdd",
    "description": "Use currently set source control provider to mark files for add. Does nothing (and returns true) for any file that is already under SC",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "MarkFileForDelete",
    "description": "Use currently set source control provider to remove file from source control and delete the file.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "MarkFileForAdd",
    "description": "Use currently set source control provider to mark a file for add. Does nothing (and returns true) if the file is already under SC",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "LastErrorMsg",
    "description": "Get status text set by SourceControl system if an error occurs regardless whether bSilent is set or not. Only set if there was an error.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "USourceControlHelpers",
    "name": "IsEnabled",
    "description": "Determine if there is a source control system enabled",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "IsAvailable",
    "description": "Quick check if currently set source control provider is enabled and available for use (server-based providers can use this to return whether the server is available or not)",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CurrentProvider",
    "description": "Determine the name of the current source control provider.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CopyFile",
    "description": "Use currently set source control provider to copy a file.",
    "parameters": [
      {
        "name": "InSourceFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDestFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckOutOrAddFiles",
    "description": "Use currently set source control provider to check out files or mark them for add.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckOutOrAddFile",
    "description": "Use currently set source control provider to check out file or mark it for add.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckOutFiles",
    "description": "Use currently set source control provider to check out specified files.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckOutFile",
    "description": "Use currently set source control provider to check out a file.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckInFiles",
    "description": "Use currently set source control provider to check in specified files.",
    "parameters": [
      {
        "name": "InFiles",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      },
      {
        "name": "InDescription",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bKeepCheckedOut",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "CheckInFile",
    "description": "Use currently set source control provider to check in a file.",
    "parameters": [
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDescription",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bKeepCheckedOut",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USourceControlHelpers",
    "name": "AsyncQueryFileState",
    "description": "Query the source control state of the specified file, asynchronously.",
    "parameters": [
      {
        "name": "FileStateCallback",
        "type": "Delegate",
        "optional": false,
        "out": false
      },
      {
        "name": "InFile",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSilent",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UStreetMapImportingSettings",
    "name": "Get",
    "description": "These settings are loaded directly from the Plugin's INI file.",
    "parameters": [],
    "returnType": "UStreetMapImportingSettings"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsValid",
    "description": "A function library with wrappers around the getter/setter functions for FSubobjectData that will make it easier to use within blueprint contexts.",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsSceneComponent",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsRootComponent",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsRootActor",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsNativeComponent",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsInstancedComponent",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsInstancedActor",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsInheritedComponent",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsHandleValid",
    "description": "",
    "parameters": [
      {
        "name": "DataHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsDefaultSceneRoot",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsComponent",
    "description": "Returns true if this subobject is a component.",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsChildActor",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsAttachedTo",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      },
      {
        "name": "InHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "IsActor",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetVariableName",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetParentHandle",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetObjectForBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      },
      {
        "name": "Blueprint",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetObject",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      },
      {
        "name": "bEvenIfPendingKill",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetHandle",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      },
      {
        "name": "OutHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetDisplayName",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetData",
    "description": "",
    "parameters": [
      {
        "name": "DataHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "OutData",
        "type": "FSubobjectData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "GetBlueprint",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBlueprint"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanReparent",
    "description": "be reparented to other subobjects based on its context.",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanRename",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanEdit",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanDuplicate",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanDelete",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataBlueprintFunctionLibrary",
    "name": "CanCopy",
    "description": "",
    "parameters": [
      {
        "name": "Data",
        "type": "FSubobjectData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataSubsystem",
    "name": "RenameSubobjectMemberVariable",
    "description": "The Subobject Data Subsystem will produce the reflected subobject data based on a given root object. A root object can be anything, an actor instance clicked on via the level editor, a UBlueprint* by opening an asset, or something piped in from python or other scripting languages. Attempts to reparent all subobjects in the HandlesToMove array to the new parent handle. Attempts to reparent the given subobject to the new parent",
    "parameters": [
      {
        "name": "BPContext",
        "type": "UBlueprint",
        "optional": false,
        "out": false
      },
      {
        "name": "InHandle",
        "type": "FSubobjectDataHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "NewName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataSubsystem",
    "name": "CreateNewCPPComponent",
    "description": "Attempts to rename the given subobject to the new name. Pastes the given subobjects to the PasteToContext. Gather all subobjects that the given actor instance has. Populates an array of handles that will have the given context and all it's subobjects. Gather all subobjects that the given Blueprint context has. Populates an array of handles that will have the given context and all it's subobjects. Attempt to find the subobject data for a given handle. OutData will only be valid if the function returns true. Attempts to delete the given array of subobjects from their context Attempts to delete the given subobject from its context Returns true if the given new text is a valid option to rename the subobject with the given handle. Populates the OutErrorMessage if it is not valid. Attempt to find an existing handle for the given object. Duplicate the given array of subobjects on the context. Remove the child subobject from the owner Attempts to delete the given array of subobjects from their context Attempts to delete the given subobject from its blueprint context Creates a new C++ component from the specified class type The user will be prompted to pick a new subclass name and code will be recompiled",
    "parameters": [
      {
        "name": "ComponentClass",
        "type": "TSubclassOf_UActorComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewClassPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewClassName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USubobjectDataSubsystem",
    "name": "CreateNewBPComponent",
    "description": "Creates a new Blueprint component from the specified class type The user will be prompted to pick a new subclass name and a blueprint asset will be created",
    "parameters": [
      {
        "name": "ComponentClass",
        "type": "TSubclassOf_UActorComponent_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewClassPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "NewClassName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSubclassOf_UObject_"
  },
  {
    "class": "UModularSynthLibrary",
    "name": "AddModularSynthPresetToBankAsset",
    "description": "Adds the modular synth preset to the bank asset in the content browser. Only call during editor.",
    "parameters": [
      {
        "name": "InBank",
        "type": "UModularSynthPresetBank",
        "optional": false,
        "out": false
      },
      {
        "name": "Preset",
        "type": "FModularSynthPreset",
        "optional": false,
        "out": false
      },
      {
        "name": "PresetName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USubmixEffectDelayStatics",
    "name": "SetMaximumDelayLength",
    "description": "",
    "parameters": [
      {
        "name": "DelaySettings",
        "type": "FSubmixEffectDelaySettings",
        "optional": false,
        "out": true
      },
      {
        "name": "MaximumDelayLength",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSubmixEffectDelaySettings"
  },
  {
    "class": "USubmixEffectDelayStatics",
    "name": "SetInterpolationTime",
    "description": "",
    "parameters": [
      {
        "name": "DelaySettings",
        "type": "FSubmixEffectDelaySettings",
        "optional": false,
        "out": true
      },
      {
        "name": "InterpolationTime",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSubmixEffectDelaySettings"
  },
  {
    "class": "USubmixEffectDelayStatics",
    "name": "SetDelayLength",
    "description": "",
    "parameters": [
      {
        "name": "DelaySettings",
        "type": "FSubmixEffectDelaySettings",
        "optional": false,
        "out": true
      },
      {
        "name": "DelayLength",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSubmixEffectDelaySettings"
  },
  {
    "class": "USynthesisUtilitiesBlueprintFunctionLibrary",
    "name": "GetLogFrequency",
    "description": "Synthesis Utilities Blueprint Function Library A library of synthesis related functions for use in Blueprints Returns the log frequency of the input value. Maps linear domain and range values to log output (good for linear slider controlling frequency)",
    "parameters": [
      {
        "name": "InLinearValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomainMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomainMax",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USynthesisUtilitiesBlueprintFunctionLibrary",
    "name": "GetLinearFrequency",
    "description": "Returns the log frequency of the input value. Maps linear domain and range values to log output (good for linear slider controlling frequency)",
    "parameters": [
      {
        "name": "InLogFrequencyValue",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomainMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InDomainMax",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMin",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "InRangeMax",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "StopRecording",
    "description": "Stop recording if there is a recorder currently active",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "StartRecording",
    "description": "Start a new recording using the specified parameters. Will fail if a recording is currently in progress",
    "parameters": [
      {
        "name": "LevelSequence",
        "type": "ULevelSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Sources",
        "type": "UTakeRecorderSources",
        "optional": false,
        "out": false
      },
      {
        "name": "MetaData",
        "type": "UTakeMetaData",
        "optional": false,
        "out": false
      },
      {
        "name": "Parameters",
        "type": "FTakeRecorderParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTakeRecorder"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderStopped",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderStopped",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderStarted",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderStarted",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderPreInitialize",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderPreInitialize",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderPanelChanged",
    "description": "Called when a Take Panel is constructed or destroyed.",
    "parameters": [
      {
        "name": "OnTakeRecorderPanelChanged",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderMarkedFrameAdded",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderMarkedFrameAdded",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderFinished",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderFinished",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetOnTakeRecorderCancelled",
    "description": "",
    "parameters": [
      {
        "name": "OnTakeRecorderCancelled",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "SetDefaultParameters",
    "description": "Set the default recorder parameters",
    "parameters": [
      {
        "name": "DefaultParameters",
        "type": "FTakeRecorderParameters",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "OpenTakeRecorderPanel",
    "description": "Get the currently open take recorder panel, if one is open, opening a new one if not",
    "parameters": [],
    "returnType": "UTakeRecorderPanel"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "IsTakeRecorderEnabled",
    "description": "Is the Take Recorder enabled in the build",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "IsRecording",
    "description": "Check whether a recording is currently active",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "GetTakeRecorderPanel",
    "description": "Get the currently open take recorder panel, if one is open",
    "parameters": [],
    "returnType": "UTakeRecorderPanel"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "GetDefaultParameters",
    "description": "Get the default recorder parameters according to the project and user settings",
    "parameters": [],
    "returnType": "FTakeRecorderParameters"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "GetActiveRecorder",
    "description": "Retrieve the currently active recorder, or None if there none are active",
    "parameters": [],
    "returnType": "UTakeRecorder"
  },
  {
    "class": "UTakeRecorderBlueprintLibrary",
    "name": "CancelRecording",
    "description": "Cancel recording if there is a recorder currently active",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderActorSource",
    "name": "RemoveActorFromSources",
    "description": "This Take Recorder Source can record an actor from the World's properties. Records the properties of the actor and the components on the actor and safely handles new components being spawned at runtime and the actor being destroyed. Set the Target actor that we are going to record. Will reset the Recorded Property Map to defaults. * Remove the given actor from TakeRecorderSources. * * @@param InActor The actor to remove from the sources * @@param InSources The sources from where to remove the actor",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InSources",
        "type": "UTakeRecorderSources",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakeRecorderActorSource",
    "name": "AddSourceForActor",
    "description": "* Add a take recorder source for the given actor. * * @@param InActor The actor to add a source for * @@param InSources The sources to add the actor to * @@return The added source or the source already present with the same actor",
    "parameters": [
      {
        "name": "InActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "InSources",
        "type": "UTakeRecorderSources",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TSoftObjectPtr_AActor_"
  },
  {
    "class": "UTakesCoreBlueprintLibrary",
    "name": "SetOnTakeRecorderTakeNumberChanged",
    "description": "Called when the take number is changed.",
    "parameters": [
      {
        "name": "OnTakeRecorderTakeNumberChanged",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakesCoreBlueprintLibrary",
    "name": "SetOnTakeRecorderSlateChanged",
    "description": "Called when the slate is changed.",
    "parameters": [
      {
        "name": "OnTakeRecorderSlateChanged",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTakesCoreBlueprintLibrary",
    "name": "FindTakes",
    "description": "Find all the existing takes that were recorded with the specified slate",
    "parameters": [
      {
        "name": "Slate",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "TakeNumber",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FAssetData_"
  },
  {
    "class": "UTakesCoreBlueprintLibrary",
    "name": "ComputeNextTakeNumber",
    "description": "Compute the next unused sequential take number for the specified slate",
    "parameters": [
      {
        "name": "Slate",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UAbilityTask_PerformTargeting",
    "name": "PerformTargetingRequest",
    "description": "Performs a targeting request based on a Targeting Preset from a GameplayAbility",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "InTargetingPreset",
        "type": "UTargetingPreset",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowAsync",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_PerformTargeting"
  },
  {
    "class": "UAbilityTask_PerformTargeting",
    "name": "PerformFilteringRequest",
    "description": "Performs a target filtering request based on a Targeting Preset from a GameplayAbility",
    "parameters": [
      {
        "name": "OwningAbility",
        "type": "UGameplayAbility",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetingPreset",
        "type": "UTargetingPreset",
        "optional": false,
        "out": false
      },
      {
        "name": "InTargets",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "bAllowAsync",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAbilityTask_PerformTargeting"
  },
  {
    "class": "UAsyncAction_PerformTargeting",
    "name": "PerformTargetingRequest",
    "description": "",
    "parameters": [
      {
        "name": "SourceActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetingPreset",
        "type": "UTargetingPreset",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseAsyncTargeting",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_PerformTargeting"
  },
  {
    "class": "UAsyncAction_PerformTargeting",
    "name": "PerformFilteringRequest",
    "description": "",
    "parameters": [
      {
        "name": "SourceActor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "TargetingPreset",
        "type": "UTargetingPreset",
        "optional": false,
        "out": false
      },
      {
        "name": "bUseAsyncTargeting",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "InTargets",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncAction_PerformTargeting"
  },
  {
    "class": "UTargetingSubsystem",
    "name": "OverrideCollisionQueryTaskData",
    "description": "The Targeting Subsystem is the entry point for users to initiate targeting requests. The entry point to the system is the target request handle. The handle is used to interface with the targeting data stores. Data stores are templated classes around generic data structs that the system and tasks use to accomplish a targeting request. The targeting system has 3 mandatory data stores and 1 required for async targeting request. These data stores are required to be set up before the system can properly run a targeting request. The mandatory 3 data stores are FTargetingRequestData, FTargetingTaskSet, and FTargetingSourceContext. FTargetingAsyncTaskData is implicitly setup when an async targeting request is initiated. Users can do all the pieces manually in C++ by setting up the required data stores themselves, or, to have it a bit more automated, the user can use the APIs that utilize UTargetingPreset data asset. For immediate targeting requests users will call the Execute methods. These functions perform all the tasks till completion. The system will not go latent. For async targeting requests users will call the Start Async methods. The system will queue up a targeting request and as each task is processed the system can run through all the tasks to completion or stop processing until the next frame while it waits for a task to complete. Note about Targeting Handles, when a targeting handle is created it will not implicitly release the handle. It is up to the creator to either grab a Async Task Data or Immediate Task Data and set a flag indicating the system should do it for them after the callback fires, or it is up to the user to release the handle when they are done with it. Method to queue an async targeting request based on a gameplay targeting preset. Method to remove an async targeting request with a given targeting handle Function that lets you set a data store from a certain Targeting Handle to add some Collision Query Param Overrides",
    "parameters": [
      {
        "name": "TargetingHandle",
        "type": "FTargetingRequestHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "CollisionQueryDataOverride",
        "type": "FCollisionQueryTaskData",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTargetingRequestHandle"
  },
  {
    "class": "USequenceCameraShakeTestUtil",
    "name": "GetPostProcessBlendCache",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "PPIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutPPSettings",
        "type": "FPostProcessSettings",
        "optional": false,
        "out": true
      },
      {
        "name": "OutPPBlendWeight",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USequenceCameraShakeTestUtil",
    "name": "GetLastFrameCameraCachePOV",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMinimalViewInfo"
  },
  {
    "class": "USequenceCameraShakeTestUtil",
    "name": "GetCameraCachePOV",
    "description": "",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FMinimalViewInfo"
  },
  {
    "class": "UTemplateSequencePlayer",
    "name": "CreateTemplateSequencePlayer",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "TemplateSequence",
        "type": "UTemplateSequence",
        "optional": false,
        "out": false
      },
      {
        "name": "Settings",
        "type": "FMovieSceneSequencePlaybackSettings",
        "optional": false,
        "out": false
      },
      {
        "name": "OutActor",
        "type": "ATemplateSequenceActor",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UTemplateSequencePlayer"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "TransformTime",
    "description": "Converts the specified time from one framerate to another framerate. This is useful for converting between tick resolution and display rate.",
    "parameters": [
      {
        "name": "SourceTime",
        "type": "FFrameTime",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      },
      {
        "name": "DestinationRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameTime"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Subtract_FrameNumberInteger",
    "description": "Subtraction (FrameNumber A - int B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Subtract_FrameNumberFrameNumber",
    "description": "Subtraction (FrameNumber A - FrameNumber B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "SnapFrameTimeToRate",
    "description": "Snaps the given SourceTime to the nearest frame in the specified Destination Framerate. Useful for determining the nearest frame for another resolution. Returns the frame time in the destination frame rate.",
    "parameters": [
      {
        "name": "SourceTime",
        "type": "FFrameTime",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      },
      {
        "name": "SnapToRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameTime"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Multiply_SecondsFrameRate",
    "description": "Multiplies a value in seconds against a FrameRate to get a new FrameTime.",
    "parameters": [
      {
        "name": "TimeInSeconds",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "FrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameTime"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Multiply_FrameNumberInteger",
    "description": "Multiply (FrameNumber A * B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "IsValid_MultipleOf",
    "description": "Checks if this framerate is an even multiple of another framerate, ie: 60 is a multiple of 30, but 59.94 is not.",
    "parameters": [
      {
        "name": "InFrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherFramerate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "IsValid_Framerate",
    "description": "Verifies that this is a valid framerate with a non-zero denominator.",
    "parameters": [
      {
        "name": "InFrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "GetTimecodeFrameRate",
    "description": "Gets the current timecode frame rate.",
    "parameters": [],
    "returnType": "FFrameRate"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "GetTimecode",
    "description": "Get the current timecode of the engine.",
    "parameters": [],
    "returnType": "FTimecode"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Divide_FrameNumberInteger",
    "description": "Divide (FrameNumber A / B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Conv_TimecodeToString",
    "description": "Converts an Timecode to a string (hh:mm:ss:ff). If bForceSignDisplay then the number sign will always be prepended instead of just when expressing a negative time.",
    "parameters": [
      {
        "name": "InTimecode",
        "type": "FTimecode",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceSignDisplay",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Conv_QualifiedFrameTimeToSeconds",
    "description": "Converts an QualifiedFrameTime to seconds.",
    "parameters": [
      {
        "name": "InFrameTime",
        "type": "FQualifiedFrameTime",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Conv_FrameRateToSeconds",
    "description": "",
    "parameters": [
      {
        "name": "InFrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Conv_FrameRateToInterval",
    "description": "Converts a FrameRate to an interval float representing the frame time in seconds ie: 1/30 returns 0.0333333",
    "parameters": [
      {
        "name": "InFrameRate",
        "type": "FFrameRate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Conv_FrameNumberToInteger",
    "description": "Converts a FrameNumber to an int32 for use in functions that take int32 frame counts for convenience.",
    "parameters": [
      {
        "name": "InFrameNumber",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Add_FrameNumberInteger",
    "description": "Addition (FrameNumber A + int B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UTimeManagementBlueprintLibrary",
    "name": "Add_FrameNumberFrameNumber",
    "description": "Addition (FrameNumber A + FrameNumber B)",
    "parameters": [
      {
        "name": "A",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FFrameNumber",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FFrameNumber"
  },
  {
    "class": "UToolMenuContextExtensions",
    "name": "FindByClass",
    "description": "",
    "parameters": [
      {
        "name": "Context",
        "type": "FToolMenuContext",
        "optional": false,
        "out": false
      },
      {
        "name": "InClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "SetToolTip",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": true
      },
      {
        "name": "ToolTip",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "SetStringCommand",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": true
      },
      {
        "name": "Type",
        "type": "EToolMenuStringCommandType",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomType",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "String",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "SetLabel",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": true
      },
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "SetIcon",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": true
      },
      {
        "name": "StyleSetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StyleName",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "SmallStyleName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "MakeToolMenuOwner",
    "description": "",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FToolMenuOwner"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "MakeStringCommand",
    "description": "",
    "parameters": [
      {
        "name": "Type",
        "type": "EToolMenuStringCommandType",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomType",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "String",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FToolMenuStringCommand"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "MakeScriptSlateIcon",
    "description": "",
    "parameters": [
      {
        "name": "StyleSetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "StyleName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SmallStyleName",
        "type": "string",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FScriptSlateIcon"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "InitMenuEntry",
    "description": "",
    "parameters": [
      {
        "name": "InOwner",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InLabel",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InToolTip",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CommandType",
        "type": "EToolMenuStringCommandType",
        "optional": false,
        "out": false
      },
      {
        "name": "CustomCommandType",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "CommandString",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FToolMenuEntry"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "GetToolTip",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "GetLabel",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "BreakToolMenuOwner",
    "description": "",
    "parameters": [
      {
        "name": "InValue",
        "type": "FToolMenuOwner",
        "optional": false,
        "out": false
      },
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "BreakStringCommand",
    "description": "",
    "parameters": [
      {
        "name": "InValue",
        "type": "FToolMenuStringCommand",
        "optional": false,
        "out": false
      },
      {
        "name": "Type",
        "type": "EToolMenuStringCommandType",
        "optional": false,
        "out": true
      },
      {
        "name": "CustomType",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "String",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuEntryExtensions",
    "name": "BreakScriptSlateIcon",
    "description": "",
    "parameters": [
      {
        "name": "InValue",
        "type": "FScriptSlateIcon",
        "optional": false,
        "out": false
      },
      {
        "name": "StyleSetName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "StyleName",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "SmallStyleName",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenus",
    "name": "Get",
    "description": "Removes all entries that were registered under a specific owner name Sets where to insert a section into a menu when generating relative to other section names. Sets a section's displayed label text. Removes a section from a given menu Unregisters a menu by name Removes a menu entry from a given menu and section Registers a menu by name Rebuilds all widgets generated from a specific menu. Rebuilds all currently generated widgets next tick. Determines if a menu has already been registered.",
    "parameters": [],
    "returnType": "UToolMenu"
  },
  {
    "class": "UToolMenus",
    "name": "FindContext",
    "description": "Finds an existing menu that has been registered or extended. Finds a context object of a given class if it exists",
    "parameters": [
      {
        "name": "InContext",
        "type": "FToolMenuContext",
        "optional": false,
        "out": false
      },
      {
        "name": "InClass",
        "type": "TSubclassOf_UObject_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UToolMenu"
  },
  {
    "class": "UToolMenus",
    "name": "AddMenuEntryObject",
    "description": "Extends a menu without registering the menu or claiming ownership of it. Ok to call even if menu does not exist yet. Registers menu entry object from blueprint/script",
    "parameters": [
      {
        "name": "MenuEntryObject",
        "type": "UToolMenuEntryScript",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UToolMenu"
  },
  {
    "class": "UToolMenuSectionExtensions",
    "name": "SetLabel",
    "description": "",
    "parameters": [
      {
        "name": "Section",
        "type": "FToolMenuSection",
        "optional": false,
        "out": true
      },
      {
        "name": "Label",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuSectionExtensions",
    "name": "GetLabel",
    "description": "",
    "parameters": [
      {
        "name": "Section",
        "type": "FToolMenuSection",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UToolMenuSectionExtensions",
    "name": "AddEntryObject",
    "description": "",
    "parameters": [
      {
        "name": "Section",
        "type": "FToolMenuSection",
        "optional": false,
        "out": true
      },
      {
        "name": "InObject",
        "type": "UToolMenuEntryScript",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolMenuSectionExtensions",
    "name": "AddEntry",
    "description": "",
    "parameters": [
      {
        "name": "Section",
        "type": "FToolMenuSection",
        "optional": false,
        "out": true
      },
      {
        "name": "Args",
        "type": "FToolMenuEntry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UToolSlateWidgetTypesFunctionLibrary",
    "name": "GetActionButtonTypeNames",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "TraceScreenshot",
    "description": "Triggers an Unreal Insights screenshot",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bShowUI",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "TraceMarkRegionStart",
    "description": "Traces a begin event for a region with specified name.",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "TraceMarkRegionEnd",
    "description": "Traces an end event for a region with specified name.",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "TraceBookmark",
    "description": "Traces a bookmark with specified name.",
    "parameters": [
      {
        "name": "Name",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "ToggleChannel",
    "description": "",
    "parameters": [
      {
        "name": "ChannelName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "enabled",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "StopTracing",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "StartTraceToFile",
    "description": "",
    "parameters": [
      {
        "name": "FileName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Channels",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "StartTraceSendTo",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Channels",
        "type": "TArray_string_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "ResumeTracing",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "PauseTracing",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "IsTracing",
    "description": "",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "IsChannelEnabled",
    "description": "",
    "parameters": [
      {
        "name": "ChannelName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "GetEnabledChannels",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UTraceUtilLibrary",
    "name": "GetAllChannels",
    "description": "",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UTypedElementHandleLibrary",
    "name": "Release",
    "description": "Script exposure for FScriptTypedElementHandle. Release this handle and set it back to an empty state.",
    "parameters": [
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementHandleLibrary",
    "name": "NotEqual",
    "description": "Are these two handles not equal?",
    "parameters": [
      {
        "name": "LHS",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "RHS",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementHandleLibrary",
    "name": "IsSet",
    "description": "Has this handle been initialized to a valid element?",
    "parameters": [
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementHandleLibrary",
    "name": "Equal",
    "description": "Are these two handles equal?",
    "parameters": [
      {
        "name": "LHS",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "RHS",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Shrink",
    "description": "Shrink this element list storage to avoid slack.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Reset",
    "description": "Remove all entries from this element list, preserving existing allocations.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Reserve",
    "description": "Pre-allocate enough memory in this element list to store the given number of entries.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Remove",
    "description": "Remove the given element handle from this element list, if it is in the list.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Num",
    "description": "Get the number of entries within this element list.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "IsValidIndex",
    "description": "Is the given index a valid entry within this element list?",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "HasElementsOfType",
    "description": "Test whether there are elements in this list of the given type.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementTypeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "HasElements",
    "description": "Test whether there are elements in this list, optionally filtering to elements that implement the given interface.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseInterfaceType",
        "type": "TSubclassOf_UInterface_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "GetElementInterface",
    "description": "Get the element interface from the given handle.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseInterfaceType",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "GetElementHandles",
    "description": "Get the handle of every element in this list, optionally filtering to elements that implement the given interface.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseInterfaceType",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_FScriptTypedElementHandle_"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "GetElementHandleAt",
    "description": "Get the element handle at the given index.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementHandle"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Empty",
    "description": "Remove all entries from this element list, potentially leaving space allocated for the given number of entries.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "Slack",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "CreateScriptElementList",
    "description": "Create an empty list of elements associated with the given registry.",
    "parameters": [
      {
        "name": "Registry",
        "type": "UTypedElementRegistry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementListProxy"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "CountElementsOfType",
    "description": "Count the number of elements in this list of the given type.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementTypeName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "CountElements",
    "description": "Count the number of elements in this list, optionally filtering to elements that implement the given interface.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "BaseInterfaceType",
        "type": "TSubclassOf_UInterface_",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Contains",
    "description": "Does this element list contain an entry for the given element handle?",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Clone",
    "description": "Clone this list instance.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementListProxy"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "AppendList",
    "description": "Append the another element list to this element list.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "OtherElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Append",
    "description": "Append the given element handles to this element list.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementHandles",
        "type": "TArray_FScriptTypedElementHandle_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UTypedElementListLibrary",
    "name": "Add",
    "description": "Add the given element handle to this element list, if it isn't already in the list.",
    "parameters": [
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementHandle",
        "type": "FScriptTypedElementHandle",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementRegistry",
    "name": "GetInstance",
    "description": "Registry of element types and their associated interfaces, along with the elements that represent their instances. Get the singleton instance of the registry used in most cases.",
    "parameters": [],
    "returnType": "UTypedElementRegistry"
  },
  {
    "class": "UTypedElementSelectionSetLibrary",
    "name": "SetSelectionFromList",
    "description": "Library of functions for the scripting of Typed Elements that use both a selection set and a element list Note: These functions should only be used for scripting purposes only as they come at higher performance cost then their non script implementation Attempt to make the selection the given elements.",
    "parameters": [
      {
        "name": "SelectionSet",
        "type": "UTypedElementSelectionSet",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionOptions",
        "type": "FTypedElementSelectionOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementSelectionSetLibrary",
    "name": "SelectElementsFromList",
    "description": "Attempt to select the given elements.",
    "parameters": [
      {
        "name": "SelectionSet",
        "type": "UTypedElementSelectionSet",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionOptions",
        "type": "FTypedElementSelectionOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UTypedElementSelectionSetLibrary",
    "name": "GetNormalizedSelection",
    "description": "Get a normalized version of this selection set that can be used to perform operations like gizmo manipulation, deletion, copying, etc. This will do things like expand out groups, and resolve any parent<->child elements so that duplication operations aren't performed on both the parent and the child.",
    "parameters": [
      {
        "name": "SelectionSet",
        "type": "UTypedElementSelectionSet",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalizationOptions",
        "type": "FTypedElementSelectionNormalizationOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementListProxy"
  },
  {
    "class": "UTypedElementSelectionSetLibrary",
    "name": "GetNormalizedElementList",
    "description": "Get a normalized version of the given element list that can be used to perform operations like gizmo manipulation, deletion, copying, etc. This will do things like expand out groups, and resolve any parent<->child elements so that duplication operations aren't performed on both the parent and the child.",
    "parameters": [
      {
        "name": "SelectionSet",
        "type": "UTypedElementSelectionSet",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "NormalizationOptions",
        "type": "FTypedElementSelectionNormalizationOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FScriptTypedElementListProxy"
  },
  {
    "class": "UTypedElementSelectionSetLibrary",
    "name": "DeselectElementsFromList",
    "description": "Attempt to deselect the given elements.",
    "parameters": [
      {
        "name": "SelectionSet",
        "type": "UTypedElementSelectionSet",
        "optional": false,
        "out": false
      },
      {
        "name": "ElementList",
        "type": "FScriptTypedElementListProxy",
        "optional": false,
        "out": false
      },
      {
        "name": "SelectionOptions",
        "type": "FTypedElementSelectionOptions",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UUIExtensionHandleFunctions",
    "name": "Unregister",
    "description": "",
    "parameters": [
      {
        "name": "Handle",
        "type": "FUIExtensionHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UUIExtensionHandleFunctions",
    "name": "IsValid",
    "description": "",
    "parameters": [
      {
        "name": "Handle",
        "type": "FUIExtensionHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UUIExtensionPointHandleFunctions",
    "name": "Unregister",
    "description": "",
    "parameters": [
      {
        "name": "Handle",
        "type": "FUIExtensionPointHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UUIExtensionPointHandleFunctions",
    "name": "IsValid",
    "description": "",
    "parameters": [
      {
        "name": "Handle",
        "type": "FUIExtensionPointHandle",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UAsyncTaskDownloadImage",
    "name": "DownloadImage",
    "description": "",
    "parameters": [
      {
        "name": "URL",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UAsyncTaskDownloadImage"
  },
  {
    "class": "UGameViewportSubsystem",
    "name": "SetWidgetSlotPosition",
    "description": "Helper function to set the position in the viewport for the Slot. Otherwise inverse DPI is applied to the position so that when the location is scaled by DPI, it ends up in the expected position.",
    "parameters": [
      {
        "name": "Slot",
        "type": "FGameViewportWidgetSlot",
        "optional": false,
        "out": false
      },
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bRemoveDPIScale",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameViewportWidgetSlot"
  },
  {
    "class": "UGameViewportSubsystem",
    "name": "SetWidgetSlotDesiredSize",
    "description": "Helper function to set the desired size in the viewport for the Slot.",
    "parameters": [
      {
        "name": "Slot",
        "type": "FGameViewportWidgetSlot",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGameViewportWidgetSlot"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "TransformVectorLocalToAbsolute",
    "description": "",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalVector",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "TransformVectorAbsoluteToLocal",
    "description": "",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteVector",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "TransformScalarLocalToAbsolute",
    "description": "",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalScalar",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "TransformScalarAbsoluteToLocal",
    "description": "",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteScalar",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "ScreenToWidgetLocal",
    "description": "Translates a screen position in pixels into the local space of a widget with the given geometry. If bIncludeWindowPosition is true, then this method will also remove the game window's position (useful when in windowed mode).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bIncludeWindowPosition",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "ScreenToWidgetAbsolute",
    "description": "Translates a screen position in pixels into absolute application coordinates. If bIncludeWindowPosition is true, then this method will also remove the game window's position (useful when in windowed mode).",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bIncludeWindowPosition",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "ScreenToViewport",
    "description": "Translates a screen position in pixels into the local space of the viewport widget.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "ViewportPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "LocalToViewport",
    "description": "Translates local coordinate of the geometry provided into local viewport coordinates. other uses where you need a coordinate in the space of viewport resolution units. to add another widget to the viewport at the same position in viewport space as this location, this is what you would use.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "PixelPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "ViewportPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "LocalToAbsolute",
    "description": "Translates local coordinates into absolute coordinates Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "LocalCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "IsUnderLocation",
    "description": "Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "GetLocalTopLeft",
    "description": "Returns the local top/left of the geometry in local space.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "GetLocalSize",
    "description": "Returns the size of the geometry in local space.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "GetAbsoluteSize",
    "description": "Returns the size of the geometry in absolute space.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "EqualEqual_SlateBrush",
    "description": "Returns whether brushes A and B are identical.",
    "parameters": [
      {
        "name": "A",
        "type": "FSlateBrush",
        "optional": false,
        "out": false
      },
      {
        "name": "B",
        "type": "FSlateBrush",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "AbsoluteToViewport",
    "description": "Translates absolute coordinate in desktop space of the geometry provided into local viewport coordinates. other uses where you need a coordinate in the space of viewport resolution units. to add another widget to the viewport at the same position in viewport space as this location, this is what you would use.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteDesktopCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "PixelPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "ViewportPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "USlateBlueprintLibrary",
    "name": "AbsoluteToLocal",
    "description": "Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.",
    "parameters": [
      {
        "name": "Geometry",
        "type": "FGeometry",
        "optional": false,
        "out": false
      },
      {
        "name": "AbsoluteCoordinate",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UUserListEntryLibrary",
    "name": "IsListItemSelected",
    "description": "Static library to supply \"for free\" functionality to widgets that implement IUserListEntry Returns true if the item represented by this entry is currently selected in the owning list view.",
    "parameters": [
      {
        "name": "UserListEntry",
        "type": "TScriptInterface_UUserListEntry_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UUserListEntryLibrary",
    "name": "IsListItemExpanded",
    "description": "Returns true if the item represented by this entry is currently expanded and showing its children. Tree view entries only.",
    "parameters": [
      {
        "name": "UserListEntry",
        "type": "TScriptInterface_UUserListEntry_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UUserListEntryLibrary",
    "name": "GetOwningListView",
    "description": "Returns the list view that contains this entry.",
    "parameters": [
      {
        "name": "UserListEntry",
        "type": "TScriptInterface_UUserListEntry_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UListViewBase"
  },
  {
    "class": "UUserObjectListEntryLibrary",
    "name": "GetListItemObject",
    "description": "Static library to supply \"for free\" functionality to widgets that implement IUserListEntry Returns the item in the owning list view that this entry is currently assigned to represent.",
    "parameters": [
      {
        "name": "UserObjectListEntry",
        "type": "TScriptInterface_UUserObjectListEntry_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UWidgetAnimationPlayCallbackProxy",
    "name": "CreatePlayAnimationTimeRangeProxyObject",
    "description": "Play Animation Time Range on widget and trigger Finish event when the animation is done.",
    "parameters": [
      {
        "name": "Result",
        "type": "UUMGSequencePlayer",
        "optional": false,
        "out": true
      },
      {
        "name": "Widget",
        "type": "UUserWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "InAnimation",
        "type": "UWidgetAnimation",
        "optional": false,
        "out": false
      },
      {
        "name": "StartAtTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "EndAtTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumLoopsToPlay",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PlayMode",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PlaybackSpeed",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UWidgetAnimationPlayCallbackProxy"
  },
  {
    "class": "UWidgetAnimationPlayCallbackProxy",
    "name": "CreatePlayAnimationProxyObject",
    "description": "Play Animation on widget and trigger Finish event when the animation is done.",
    "parameters": [
      {
        "name": "Result",
        "type": "UUMGSequencePlayer",
        "optional": false,
        "out": true
      },
      {
        "name": "Widget",
        "type": "UUserWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "InAnimation",
        "type": "UWidgetAnimation",
        "optional": false,
        "out": false
      },
      {
        "name": "StartAtTime",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "NumLoopsToPlay",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PlayMode",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "PlaybackSpeed",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UWidgetAnimationPlayCallbackProxy"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "UnlockMouse",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "Unhandled",
    "description": "The event reply to use when you choose not to handle an event.",
    "parameters": [],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetWindowTitleBarState",
    "description": "",
    "parameters": [
      {
        "name": "TitleBarContent",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "Mode",
        "type": "EWindowTitleBarMode",
        "optional": false,
        "out": false
      },
      {
        "name": "bTitleBarDragEnabled",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bWindowButtonsVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bTitleBarVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetWindowTitleBarOnCloseClickedDelegate",
    "description": "",
    "parameters": [
      {
        "name": "Delegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetWindowTitleBarCloseButtonActive",
    "description": "",
    "parameters": [
      {
        "name": "bActive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetUserFocus",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "FocusWidget",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "bInAllUsers",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetMousePosition",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "NewMousePosition",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetInputMode_UIOnlyEx",
    "description": "Setup an input mode that allows only the UI to respond to user input. Note: This means that any bound Input Events in the widget will not be called!",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "InWidgetToFocus",
        "type": "UWidget",
        "optional": true,
        "out": false
      },
      {
        "name": "InMouseLockMode",
        "type": "EMouseLockMode",
        "optional": true,
        "out": false
      },
      {
        "name": "bFlushInput",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetInputMode_GameOnly",
    "description": "Setup an input mode that allows only player input / player controller to respond to user input. Note: Any bound Input Events in this widget will be called.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "bFlushInput",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetInputMode_GameAndUIEx",
    "description": "Setup an input mode that allows only the UI to respond to user input, and if the UI doesn't handle it player input / player controller gets a chance. Note: This means that any bound Input events in the widget will be called.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "InWidgetToFocus",
        "type": "UWidget",
        "optional": true,
        "out": false
      },
      {
        "name": "InMouseLockMode",
        "type": "EMouseLockMode",
        "optional": true,
        "out": false
      },
      {
        "name": "bHideCursorDuringCapture",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bFlushInput",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetHardwareCursor",
    "description": "Loads or sets a hardware cursor from the content directory in the game.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "CursorShape",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "CursorName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "HotSpot",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetColorVisionDeficiencyType",
    "description": "Apply color deficiency correction settings to the game window",
    "parameters": [
      {
        "name": "Type",
        "type": "EColorVisionDeficiency",
        "optional": false,
        "out": false
      },
      {
        "name": "Severity",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "CorrectDeficiency",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ShowCorrectionWithDeficiency",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetBrushResourceToTexture",
    "description": "Sets the resource on a brush to be a UTexture2D.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": true
      },
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "SetBrushResourceToMaterial",
    "description": "Sets the resource on a brush to be a Material.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": true
      },
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "ReleaseMouseCapture",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "ReleaseJoystickCapture",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "bInAllJoysticks",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "NoResourceBrush",
    "description": "Creates a Slate Brush that wont draw anything, the \"Null Brush\".",
    "parameters": [],
    "returnType": "FSlateBrush"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "MakeBrushFromTexture",
    "description": "Creates a Slate Brush from a Texture2D",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSlateBrush"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "MakeBrushFromMaterial",
    "description": "Creates a Slate Brush from a Material.  Materials don't have an implicit size, so providing a widget and height is required to hint slate with how large the image wants to be by default.",
    "parameters": [
      {
        "name": "Material",
        "type": "UMaterialInterface",
        "optional": false,
        "out": false
      },
      {
        "name": "Width",
        "type": "integer",
        "optional": true,
        "out": false
      },
      {
        "name": "Height",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FSlateBrush"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "MakeBrushFromAsset",
    "description": "Creates a Slate Brush from a Slate Brush Asset",
    "parameters": [
      {
        "name": "BrushAsset",
        "type": "USlateBrushAsset",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FSlateBrush"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "LockMouse",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "CapturingWidget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "IsDragDropping",
    "description": "Returns true if a drag/drop event is occurring that a widget can handle.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "Handled",
    "description": "The event reply to use when you choose to handle an event.  This will prevent the event from continuing to bubble up / down the widget hierarchy.",
    "parameters": [],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetSafeZonePadding",
    "description": "Gets the amount of padding that needs to be added when accounting for the safe zone on TVs.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "SafePadding",
        "type": "FVector4",
        "optional": false,
        "out": true
      },
      {
        "name": "SafePaddingScale",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "SpillOverPadding",
        "type": "FVector4",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetKeyEventFromAnalogInputEvent",
    "description": "",
    "parameters": [
      {
        "name": "Event",
        "type": "FAnalogInputEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FKeyEvent"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetInputEventFromPointerEvent",
    "description": "",
    "parameters": [
      {
        "name": "Event",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputEvent"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetInputEventFromNavigationEvent",
    "description": "",
    "parameters": [
      {
        "name": "Event",
        "type": "FNavigationEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputEvent"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetInputEventFromKeyEvent",
    "description": "",
    "parameters": [
      {
        "name": "Event",
        "type": "FKeyEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputEvent"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetInputEventFromCharacterEvent",
    "description": "",
    "parameters": [
      {
        "name": "Event",
        "type": "FCharacterEvent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FInputEvent"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetDynamicMaterial",
    "description": "Gets the material that allows changes to parameters at runtime.  The brush must already have a material assigned to it, if it does it will automatically be converted to a MID.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UMaterialInstanceDynamic"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetDragDroppingContent",
    "description": "Returns the drag and drop operation that is currently occurring if any, otherwise nothing.",
    "parameters": [],
    "returnType": "UDragDropOperation"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetBrushResourceAsTexture2D",
    "description": "Gets the brush resource as a texture 2D.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetBrushResourceAsMaterial",
    "description": "Gets the brush resource as a material.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UMaterialInterface"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetBrushResource",
    "description": "Gets the resource object on a brush.  This could be a UTexture2D or a UMaterialInterface.",
    "parameters": [
      {
        "name": "Brush",
        "type": "FSlateBrush",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetAllWidgetsWithInterface",
    "description": "Find all widgets in the world with the specified interface. This is a slow operation, use with caution e.g. do not use every frame.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FoundWidgets",
        "type": "TArray_UUserWidget_",
        "optional": false,
        "out": true
      },
      {
        "name": "Interface",
        "type": "TSubclassOf_UInterface_",
        "optional": false,
        "out": false
      },
      {
        "name": "TopLevelOnly",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "GetAllWidgetsOfClass",
    "description": "Find all widgets of a certain class.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "FoundWidgets",
        "type": "TArray_UUserWidget_",
        "optional": false,
        "out": true
      },
      {
        "name": "WidgetClass",
        "type": "TSubclassOf_UUserWidget_",
        "optional": false,
        "out": false
      },
      {
        "name": "TopLevelOnly",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "EndDragDrop",
    "description": "An event should return FReply::Handled().EndDragDrop() to request that the current drag/drop operation be terminated.",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawTextFormatted",
    "description": "Draws text.",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Text",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Font",
        "type": "UFont",
        "optional": false,
        "out": false
      },
      {
        "name": "FontSize",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "FontTypeFace",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawText",
    "description": "Draws text.",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "InString",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawSpline",
    "description": "Draws a hermite spline.",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Start",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "StartDir",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "End",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "EndDir",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawLines",
    "description": "Draws several line segments.",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Points",
        "type": "TArray_FVector2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "bAntiAlias",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawLine",
    "description": "Draws a line.",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "PositionA",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "PositionB",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      },
      {
        "name": "bAntiAlias",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "Thickness",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DrawBox",
    "description": "Draws a box",
    "parameters": [
      {
        "name": "Context",
        "type": "FPaintContext",
        "optional": false,
        "out": true
      },
      {
        "name": "Position",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "Brush",
        "type": "USlateBrushAsset",
        "optional": false,
        "out": false
      },
      {
        "name": "Tint",
        "type": "FLinearColor",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DismissAllMenus",
    "description": "Closes any popup menu",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DetectDragIfPressed",
    "description": "Given the pointer event, emit the DetectDrag reply if the provided key was pressed. If the DragKey is a touch key, that will also automatically work.",
    "parameters": [
      {
        "name": "PointerEvent",
        "type": "FPointerEvent",
        "optional": false,
        "out": false
      },
      {
        "name": "WidgetDetectingDrag",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "DragKey",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "DetectDrag",
    "description": "Ask Slate to detect if a user starts dragging in this widget later.  Slate internally tracks the movement and if it surpasses the drag threshold, Slate will send an OnDragDetected event to the widget.",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "WidgetDetectingDrag",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "DragKey",
        "type": "FKey",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "CreateDragDropOperation",
    "description": "Creates a new drag and drop operation that can be returned from a drag begin to inform the UI what i being dragged and dropped and what it looks like.",
    "parameters": [
      {
        "name": "OperationClass",
        "type": "TSubclassOf_UDragDropOperation_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UDragDropOperation"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "Create",
    "description": "Creates a widget",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "WidgetType",
        "type": "TSubclassOf_UUserWidget_",
        "optional": false,
        "out": false
      },
      {
        "name": "OwningPlayer",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UUserWidget"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "ClearUserFocus",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "bInAllUsers",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "CaptureMouse",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "CapturingWidget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "CaptureJoystick",
    "description": "",
    "parameters": [
      {
        "name": "Reply",
        "type": "FEventReply",
        "optional": false,
        "out": true
      },
      {
        "name": "CapturingWidget",
        "type": "UWidget",
        "optional": false,
        "out": false
      },
      {
        "name": "bInAllJoysticks",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FEventReply"
  },
  {
    "class": "UWidgetBlueprintLibrary",
    "name": "CancelDragDrop",
    "description": "Cancels any current drag drop operation.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsWrapBoxSlot",
    "description": "Gets the slot object on the child widget as a Wrap Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWrapBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsWidgetSwitcherSlot",
    "description": "Gets the slot object on the child widget as a Widget Switcher Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWidgetSwitcherSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsVerticalBoxSlot",
    "description": "Gets the slot object on the child widget as a Vertical Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UVerticalBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsUniformGridSlot",
    "description": "Gets the slot object on the child widget as a Uniform Grid Slot, allowing you to manipulate layout information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UUniformGridSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsSizeBoxSlot",
    "description": "Gets the slot object on the child widget as a Size Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USizeBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsScrollBoxSlot",
    "description": "Gets the slot object on the child widget as a Scroll Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UScrollBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsScaleBoxSlot",
    "description": "Gets the slot object on the child widget as a Scale Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UScaleBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsSafeBoxSlot",
    "description": "Gets the slot object on the child widget as a Safe Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "USafeZoneSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsOverlaySlot",
    "description": "Gets the slot object on the child widget as a Overlay Slot, allowing you to manipulate layout information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UOverlaySlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsHorizontalBoxSlot",
    "description": "Gets the slot object on the child widget as a Horizontal Box Slot, allowing you to manipulate its information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UHorizontalBoxSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsGridSlot",
    "description": "Gets the slot object on the child widget as a Grid Slot, allowing you to manipulate layout information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UGridSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsCanvasSlot",
    "description": "Gets the slot object on the child widget as a Canvas Slot, allowing you to manipulate layout information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UCanvasPanelSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "SlotAsBorderSlot",
    "description": "Gets the slot object on the child widget as a Border Slot, allowing you to manipulate layout information.",
    "parameters": [
      {
        "name": "Widget",
        "type": "UWidget",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UBorderSlot"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "RemoveAllWidgets",
    "description": "Removes all widgets from the viewport.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "ProjectWorldLocationToWidgetPosition",
    "description": "Gets the projected world to screen position for a player, then converts it into a widget position, which takes into account any quality scaling.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "WorldLocation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "ScreenPosition",
        "type": "FVector2D",
        "optional": false,
        "out": true
      },
      {
        "name": "bPlayerViewportRelative",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetViewportWidgetGeometry",
    "description": "Gets the geometry of the widget holding all widgets added to the \"Viewport\".  You can use this geometry to convert between absolute and local space of widgets held on this widget.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometry"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetViewportSize",
    "description": "Gets the size of the game viewport.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetViewportScale",
    "description": "Gets the current DPI Scale being applied to the viewport and all the Widgets.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetPlayerScreenWidgetGeometry",
    "description": "Gets the geometry of the widget holding all widgets added to the \"Player Screen\". You can use this geometry to convert between absolute and local space of widgets held on this widget.",
    "parameters": [
      {
        "name": "PlayerController",
        "type": "APlayerController",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FGeometry"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetMousePositionScaledByDPI",
    "description": "Gets the mouse position of the player controller, scaled by the DPI.  If you're trying to go from raw mouse screenspace coordinates to fullscreen widget space, you'll need to transform the mouse into DPI Scaled space.  This function performs that scaling. MousePositionScaledByDPI = MousePosition * (1 / ViewportScale). //UE_DEPRECATED(4.17, \"Use GetMousePositionOnViewport() instead.  Optionally and for more options, you can use GetViewportWidgetGeometry and GetPlayerScreenWidgetGeometry are newly introduced to give you the geometry of the viewport and the player screen for widgets to help convert between spaces.\")",
    "parameters": [
      {
        "name": "Player",
        "type": "APlayerController",
        "optional": false,
        "out": false
      },
      {
        "name": "LocationX",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "LocationY",
        "type": "number",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetMousePositionOnViewport",
    "description": "Gets the platform's mouse cursor position in the local space of the viewport widget.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UWidgetLayoutLibrary",
    "name": "GetMousePositionOnPlatform",
    "description": "Gets the platform's mouse cursor position.  This is the 'absolute' desktop location of the mouse.",
    "parameters": [],
    "returnType": "FVector2D"
  },
  {
    "class": "UUnLuaFunctionLibrary",
    "name": "GetScriptRootPath",
    "description": "",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UUnLuaFunctionLibrary",
    "name": "GetFileLastModifiedTimestamp",
    "description": "",
    "parameters": [
      {
        "name": "Path",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UActorGroupingUtils",
    "name": "SetGroupingActive",
    "description": "Helper class for grouping actors in the level editor Unlocks any groups in the current selection Disbands any groups in the current selection, does not attempt to maintain any hierarchy Disbands any groups that the provided actors belong to, does not attempt to maintain any hierarchy",
    "parameters": [
      {
        "name": "bInGroupingActive",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UActorGroupingUtils",
    "name": "IsGroupingActive",
    "description": "Removes any groups or actors in the current selection from their immediate parent. If all actors/subgroups are removed, the parent group will be destroyed. Locks any groups in the current selection",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UActorGroupingUtils",
    "name": "Get",
    "description": "Creates a new group from the current selection removing the actors from any existing groups they are already in Creates a new group from the provided list of actors removing the actors from any existing groups they are already in Convenience method for accessing grouping utils in a blueprint or script",
    "parameters": [],
    "returnType": "AGroupActor"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "SetLevelVisibility",
    "description": "Sets a level's visibility in the editor. Less efficient than SetLevelsVisibility when changing the visibility of multiple levels simultaneously.",
    "parameters": [
      {
        "name": "Level",
        "type": "ULevel",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBeVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceLayersVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ModifyMode",
        "type": "ELevelVisibilityDirtyMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "SetLevelsVisibility",
    "description": "Sets a level's visibility in the editor. More efficient than SetLevelsVisibility when changing the visibility of multiple levels simultaneously.",
    "parameters": [
      {
        "name": "Levels",
        "type": "TArray_ULevel_",
        "optional": false,
        "out": false
      },
      {
        "name": "bShouldBeVisible",
        "type": "TArray_boolean_",
        "optional": false,
        "out": false
      },
      {
        "name": "bForceLayersVisible",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "ModifyMode",
        "type": "ELevelVisibilityDirtyMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "MoveSelectedActorsToLevel",
    "description": "Moves the currently selected actors to the specified streaming level. The new actors will be selected",
    "parameters": [
      {
        "name": "DestLevel",
        "type": "ULevelStreaming",
        "optional": false,
        "out": false
      },
      {
        "name": "bWarnAboutReferences",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "MoveActorsToLevel",
    "description": "Moves the specified list of actors to the specified streaming level. The new actors will be selected",
    "parameters": [
      {
        "name": "ActorsToMove",
        "type": "TArray_AActor_",
        "optional": false,
        "out": false
      },
      {
        "name": "DestStreamingLevel",
        "type": "ULevelStreaming",
        "optional": false,
        "out": false
      },
      {
        "name": "bWarnAboutReferences",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bWarnAboutRenaming",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "MakeLevelCurrent",
    "description": "Makes the specified streaming level the current level for editing. The current level is where actors are spawned to when calling SpawnActor",
    "parameters": [
      {
        "name": "InStreamingLevel",
        "type": "ULevelStreaming",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "K2_RemoveLevelFromWorld",
    "description": "Removes given level from the world. Note, this will only work for sub-levels in the main level. Levels are not saved when added to the world. They can be saved with the \"Save Map\" function",
    "parameters": [
      {
        "name": "InLevel",
        "type": "ULevel",
        "optional": false,
        "out": false
      },
      {
        "name": "bClearSelection",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bResetTransactionBuffer",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "K2_AddLevelToWorldWithTransform",
    "description": "Adds the named level package to the world at the given position.  Does nothing if the level already exists in the world.",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelPackageName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelStreamingClass",
        "type": "TSubclassOf_ULevelStreaming_",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelStreaming"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "K2_AddLevelToWorld",
    "description": "Adds the named level package to the world.  Does nothing if the level already exists in the world. Levels are not saved when added to the world. They can be saved with the \"Save Map\" function",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelPackageName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "LevelStreamingClass",
        "type": "TSubclassOf_ULevelStreaming_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelStreaming"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "GetLevels",
    "description": "Returns all levels for a world.",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_ULevel_"
  },
  {
    "class": "UEditorLevelUtils",
    "name": "CreateNewStreamingLevel",
    "description": "Creates a new streaming level in the current world",
    "parameters": [
      {
        "name": "LevelStreamingClass",
        "type": "TSubclassOf_ULevelStreaming_",
        "optional": false,
        "out": false
      },
      {
        "name": "NewLevelPath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bMoveSelectedActorsIntoNewLevel",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "ULevelStreaming"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "UnloadPackages",
    "description": "This class is a wrapper for editor loading and saving functionality It is meant to contain only functions that can be executed in script (but are also allowed in C++). It is separated from FEditorFileUtils to ensure new easier to use methods can be created without breaking FEditorFileUtils backwards compatibility However this should be used in place of FEditorFileUtils wherever possible as the goal is to deprecate FEditorFileUtils eventually Unloads a list of packages",
    "parameters": [
      {
        "name": "PackagesToUnload",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutAnyPackagesUnloaded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutErrorMessage",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SavePackagesWithDialog",
    "description": "Save all packages. Optionally prompting the user to select which packages to save. Prompt the user to select which dirty packages to save and check them out from source control (if enabled).",
    "parameters": [
      {
        "name": "PackagesToSave",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyDirty",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SavePackages",
    "description": "Save all packages. Assume all dirty packages should be saved and check out from source control (if enabled).",
    "parameters": [
      {
        "name": "PackagesToSave",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOnlyDirty",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SaveMap",
    "description": "Saves the specified map, returning true on success.",
    "parameters": [
      {
        "name": "World",
        "type": "UWorld",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SaveDirtyPackagesWithDialog",
    "description": "Looks at all currently loaded packages and saves them if their \"bDirty\" flag is set. Prompt the user to select which dirty packages to save and check them out from source control (if enabled).",
    "parameters": [
      {
        "name": "bSaveMapPackages",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bSaveContentPackages",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SaveDirtyPackages",
    "description": "Looks at all currently loaded packages and saves them if their \"bDirty\" flag is set. Assume all dirty packages should be saved and check out from source control (if enabled).",
    "parameters": [
      {
        "name": "bSaveMapPackages",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "bSaveContentPackages",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "SaveCurrentLevel",
    "description": "Saves the active level, prompting the use for checkout if necessary.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "ReloadPackages",
    "description": "Helper function that attempts to reload the specified top-level packages.",
    "parameters": [
      {
        "name": "PackagesToReload",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": false
      },
      {
        "name": "bOutAnyPackagesReloaded",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "OutErrorMessage",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "InteractionMode",
        "type": "EReloadPackagesInteractionMode",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "NewMapFromTemplate",
    "description": "",
    "parameters": [
      {
        "name": "PathToTemplateLevel",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bSaveExistingMap",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "NewBlankMap",
    "description": "",
    "parameters": [
      {
        "name": "bSaveExistingMap",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "LoadMapWithDialog",
    "description": "Prompts the user to save the current map if necessary, the presents a load dialog and loads a new map if selected by the user.",
    "parameters": [],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "LoadMap",
    "description": "Loads the specified map.  Does not prompt the user to save the current map.",
    "parameters": [
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UWorld"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "ImportScene",
    "description": "Imports a file such as (FBX or obj) and spawns actors f into the current level",
    "parameters": [
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "GetDirtyMapPackages",
    "description": "Appends array with all currently dirty map packages.",
    "parameters": [
      {
        "name": "OutDirtyPackages",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "GetDirtyContentPackages",
    "description": "Appends array with all currently dirty content packages.",
    "parameters": [
      {
        "name": "OutDirtyPackages",
        "type": "TArray_UPackage_",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorLoadingAndSavingUtils",
    "name": "ExportScene",
    "description": "Exports the current scene",
    "parameters": [
      {
        "name": "bExportSelectedActorsOnly",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UEditorSubsystemBlueprintLibrary",
    "name": "GetEditorSubsystem",
    "description": "Get a Local Player Subsystem from the Local Player associated with the provided context",
    "parameters": [
      {
        "name": "Class",
        "type": "TSubclassOf_UEditorSubsystem_",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UEditorSubsystem"
  },
  {
    "class": "UMaterialImportHelpers",
    "name": "FindExistingMaterialFromSearchLocation",
    "description": "",
    "parameters": [
      {
        "name": "MaterialFullName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BasePackagePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SearchLocation",
        "type": "EMaterialSearchLocation",
        "optional": false,
        "out": false
      },
      {
        "name": "OutError",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UMaterialInterface"
  },
  {
    "class": "UMaterialImportHelpers",
    "name": "FindExistingMaterial",
    "description": "",
    "parameters": [
      {
        "name": "BasePath",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "MaterialFullName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bRecursivePaths",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "OutError",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UMaterialInterface"
  },
  {
    "class": "UPackageTools",
    "name": "SanitizePackageName",
    "description": "Replaces all invalid package name characters with _",
    "parameters": [
      {
        "name": "InPackageName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPackageTools",
    "name": "PackageNameToFilename",
    "description": "Converts a long package name to a file name. This can be called on package paths as well, provide no extension in that case. Will return an empty string if it fails.",
    "parameters": [
      {
        "name": "PackageName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Extension",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UPackageTools",
    "name": "FilenameToPackageName",
    "description": "Tries to convert a given relative or absolute filename to a long package name or path starting with a root like /Game This works on both package names and directories, and it does not validate that it actually exists on disk.",
    "parameters": [
      {
        "name": "Filename",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UUDIMTextureFunctionLibrary",
    "name": "MakeUDIMVirtualTextureFromTexture2Ds",
    "description": "Make a UDIM virtual texture from a list of regular 2D textures",
    "parameters": [
      {
        "name": "OutputPathName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceTextures",
        "type": "TArray_UTexture2D_",
        "optional": false,
        "out": false
      },
      {
        "name": "BlockCoords",
        "type": "TArray_FIntPoint_",
        "optional": false,
        "out": false
      },
      {
        "name": "bKeepExistingSettings",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bCheckOutAndSave",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "UTexture2D"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueVector4",
    "description": "Library of functions that can be used by the Python API to trigger VariantManager operations",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FVector4",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueVector2D",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FVector2D",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueVector",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FVector",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueString",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueRotator",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FRotator",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueQuat",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FQuat",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueObject",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueLinearColor",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueIntPoint",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FIntPoint",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueInt",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueFloat",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueColor",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "FColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetValueBool",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      },
      {
        "name": "InValue",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "SetDependency",
    "description": "",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Dependency",
        "type": "FVariantDependency",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveVariantSetByName",
    "description": "Looks for a variant set with VariantSetName within LevelVariantSets and removes it, if it exists",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantSetName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveVariantSet",
    "description": "Removes VariantSet from LevelVariantSets, if that is its parent",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantSet",
        "type": "UVariantSet",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveVariantByName",
    "description": "Looks for a variant with VariantName within VariantSet and removes it, if it exists",
    "parameters": [
      {
        "name": "VariantSet",
        "type": "UVariantSet",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveVariant",
    "description": "Removes Variant from VariantSet, if that is its parent",
    "parameters": [
      {
        "name": "VariantSet",
        "type": "UVariantSet",
        "optional": false,
        "out": false
      },
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveCapturedPropertyByName",
    "description": "Removes property capture with PropertyPath from Actor's binding within Variant, if it exists",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveCapturedProperty",
    "description": "Removes a property capture from an actor binding within Variant, if it exists",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveActorBindingByName",
    "description": "Looks for an actor binding to an actor with ActorLabel within Variant and removes it, if it exists",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "ActorName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "RemoveActorBinding",
    "description": "Removes an actor binding to Actor from Variant, if it exists",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "Record",
    "description": "Records new data for PropVal from the actor from which it was captured",
    "parameters": [
      {
        "name": "PropVal",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueVector4",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector4"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueVector2D",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueVector",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FVector"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueString",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueRotator",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FRotator"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueQuat",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FQuat"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueObject",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UObject"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueLinearColor",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FLinearColor"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueIntPoint",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FIntPoint"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueInt",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueFloat",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueColor",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FColor"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetValueBool",
    "description": "",
    "parameters": [
      {
        "name": "Property",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetPropertyTypeString",
    "description": "This allows the scripting language to get the type of the C++ property its dealing with",
    "parameters": [
      {
        "name": "PropVal",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "string"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetCapturedProperties",
    "description": "Returns which properties have been captured for this actor in Variant",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_UPropertyValue_"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "GetCapturableProperties",
    "description": "Returns a property path for all the properties we can capture for an actor. Will also handle receiving the actor's class instead.",
    "parameters": [
      {
        "name": "ActorOrClass",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "TArray_string_"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "DeleteDependency",
    "description": "",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "CreateLevelVariantSetsAsset",
    "description": "Creates a new LevelVariantSetsAsset named AssetName (e.g. 'MyLevelVariantSets') in the content path AssetPath (e.g. '/Game')",
    "parameters": [
      {
        "name": "AssetName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "AssetPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ULevelVariantSets"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "CreateLevelVariantSetsActor",
    "description": "Creates a new ALevelVariantSetsActor in the current scene and assigns LevelVariantSetsAsset to it",
    "parameters": [
      {
        "name": "LevelVariantSetsAsset",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "ALevelVariantSetsActor"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "CaptureProperty",
    "description": "Finds the actor binding to Actor within Variant and tries capturing a property with PropertyPath Returns the captured UPropertyValue if succeeded or nullptr if it failed.",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "PropertyPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPropertyValue"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "Apply",
    "description": "Applies the recorded data from PropVal to the actor from which it was captured",
    "parameters": [
      {
        "name": "PropVal",
        "type": "UPropertyValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "AddVariantSet",
    "description": "Adds VariantSet to the LevelVariantSets' list of VariantSets",
    "parameters": [
      {
        "name": "LevelVariantSets",
        "type": "ULevelVariantSets",
        "optional": false,
        "out": false
      },
      {
        "name": "VariantSet",
        "type": "UVariantSet",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "AddVariant",
    "description": "Adds Variant to the VariantSet's list of Variants",
    "parameters": [
      {
        "name": "VariantSet",
        "type": "UVariantSet",
        "optional": false,
        "out": false
      },
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "AddDependency",
    "description": "",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Dependency",
        "type": "FVariantDependency",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UVariantManagerBlueprintLibrary",
    "name": "AddActorBinding",
    "description": "Binds the Actor to the Variant, internally creating a VariantObjectBinding",
    "parameters": [
      {
        "name": "Variant",
        "type": "UVariant",
        "optional": false,
        "out": false
      },
      {
        "name": "Actor",
        "type": "AActor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UVRScoutingInteractor",
    "name": "GetSelectedActors",
    "description": "Represents the interactor in the world Sets the gizmo mode for selected object Gets all actors that are selected in the world editor",
    "parameters": [],
    "returnType": "TArray_AActor_"
  },
  {
    "class": "ABuoyancyManager",
    "name": "GetBuoyancyComponentManager",
    "description": "",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Manager",
        "type": "ABuoyancyManager",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UNiagaraWaterFunctionLibrary",
    "name": "SetWaterBodyComponent",
    "description": "Sets the water body component on the Niagra water data interface on a Niagara particle system",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "WaterBodyComponent",
        "type": "UWaterBodyComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UNiagaraWaterFunctionLibrary",
    "name": "SetWaterBody",
    "description": "",
    "parameters": [
      {
        "name": "NiagaraSystem",
        "type": "UNiagaraComponent",
        "optional": false,
        "out": false
      },
      {
        "name": "OverrideName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "WaterBody",
        "type": "AWaterBody",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UWaterSubsystem",
    "name": "GetShallowWaterSimulationRenderTargetSize",
    "description": "This is the API used to get information about water at runtime",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UWaterSubsystem",
    "name": "GetShallowWaterMaxImpulseForces",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UWaterSubsystem",
    "name": "GetShallowWaterMaxDynamicForces",
    "description": "",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UWebInterface",
    "name": "OverrideAcceleratedPaint",
    "description": "Set focus to the game. Unbind an object from ue.name in the browser context. Reset cursor to center of the viewport. Check if accelerated paint was required. Read an area of pixels from the browser texture. Read a pixel from the browser texture.",
    "parameters": [
      {
        "name": "bForceDisable",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWebInterfaceHelpers",
    "name": "WebInterfaceCallback_IsValid",
    "description": "Check if this callback is valid.",
    "parameters": [
      {
        "name": "Target",
        "type": "FWebInterfaceCallback",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UWebInterfaceHelpers",
    "name": "WebInterfaceCallback_Call",
    "description": "Call ue.interface.callback(data) in the browser context.",
    "parameters": [
      {
        "name": "Target",
        "type": "FWebInterfaceCallback",
        "optional": false,
        "out": true
      },
      {
        "name": "Data",
        "type": "FJsonLibraryValue",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UAsyncTask_LoadXRDeviceVisComponent",
    "name": "AddNamedDeviceVisualizationComponentAsync",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SystemName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DeviceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bManualAttachment",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": true
      },
      {
        "name": "NewComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UAsyncTask_LoadXRDeviceVisComponent"
  },
  {
    "class": "UAsyncTask_LoadXRDeviceVisComponent",
    "name": "AddDeviceVisualizationComponentAsync",
    "description": "",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "bManualAttachment",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "NewComponent",
        "type": "UPrimitiveComponent",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UAsyncTask_LoadXRDeviceVisComponent"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "UpdateExternalTrackingHMDPosition",
    "description": "Called after calibration to attempt to pull the internal tracker (e.g. HMD tracking) in line with the external tracker (e.g. mocap tracker).  This will set the internal tracker's base offset and rotation to match and realign the two systems. This can be called every tick, or whenever realignment is desired.  Note that this may cause choppy movement if the two systems diverge relative to each other, or a big jump if called infrequently when there has been significant drift",
    "parameters": [
      {
        "name": "ExternalTrackingTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetXRTimedInputActionDelegate",
    "description": "Hook up a delegate to get an OpenXR action event with action time. For a boolean input the the 'value' parameter of the delegate will be 1.0 for a press and 0.0 for a release.  For an analog input the value's range is action and platform specific. Use in combination with GetControllerTransformForTime2 for potentially improved temporal transform precision and velocity data. \"Left Grip\" is an example of a valid ActionName. Note: this is likely to be replaced by native support for event times in the core input system at some time in the future.",
    "parameters": [
      {
        "name": "ActionName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "InDelegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetXRDisconnectDelegate",
    "description": "",
    "parameters": [
      {
        "name": "InDisconnectedDelegate",
        "type": "Delegate",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetWorldToMetersScale",
    "description": "Sets the World to Meters scale, which changes the scale of the world as perceived by the player",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "NewScale",
        "type": "number",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetTrackingOrigin",
    "description": "Sets current tracking origin type (eye level or floor level).",
    "parameters": [
      {
        "name": "Origin",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetSpectatorScreenTexture",
    "description": "Change the texture displayed on the social screen",
    "parameters": [
      {
        "name": "InTexture",
        "type": "UTexture",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetSpectatorScreenModeTexturePlusEyeLayout",
    "description": "Setup the layout for ESpectatorScreenMode::TexturePlusEye.",
    "parameters": [
      {
        "name": "EyeRectMin",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "EyeRectMax",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRectMin",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "TextureRectMax",
        "type": "FVector2D",
        "optional": false,
        "out": false
      },
      {
        "name": "bDrawEyeFirst",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bClearBlack",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bUseAlpha",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetSpectatorScreenMode",
    "description": "Sets the social screen mode.",
    "parameters": [
      {
        "name": "Mode",
        "type": "ESpectatorScreenMode",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetHMDColorScaleAndBias",
    "description": "Multiply the post-compositor frame by a color and add a bias. LayerColor = LayerColor * ColorScale + ColorBias",
    "parameters": [
      {
        "name": "ColorScale",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      },
      {
        "name": "ColorBias",
        "type": "FLinearColor",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "SetClippingPlanes",
    "description": "Sets near and far clipping planes (NCP and FCP) for stereo rendering. Similar to 'stereo ncp= fcp' console command, but NCP and FCP set by this call won't be saved in .ini file.",
    "parameters": [
      {
        "name": "Near",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Far",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "ResetOrientationAndPosition",
    "description": "Resets orientation by setting roll and pitch to 0, assuming that current yaw is forward direction and assuming current position as a 'zero-point' (for positional tracking).",
    "parameters": [
      {
        "name": "Yaw",
        "type": "number",
        "optional": true,
        "out": false
      },
      {
        "name": "Options",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "IsSpectatorScreenModeControllable",
    "description": "Return true if spectator screen mode control is available.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "IsHeadMountedDisplayEnabled",
    "description": "Returns whether or not we are currently using the head mounted display.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "IsHeadMountedDisplayConnected",
    "description": "Returns whether or not the HMD hardware is connected and ready to use.  It may or may not actually be in use.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "IsDeviceTracking",
    "description": "Cross XR-System query that returns whether the specified device is tracked or not.",
    "parameters": [
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "HasValidTrackingPosition",
    "description": "If the HMD supports positional tracking, whether or not we are currently being tracked",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetXRSystemFlags",
    "description": "Returns the flags for the device, so scripts can modify their behaviour appropriately",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetWorldToMetersScale",
    "description": "Returns the World to Meters scale, which corresponds to the scale of the world as perceived by the player",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "number"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetVRFocusState",
    "description": "Returns current state of VR focus.",
    "parameters": [
      {
        "name": "bUseFocus",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasFocus",
        "type": "boolean",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetVersionString",
    "description": "Returns name of tracking system specific version string.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetTrackingToWorldTransform",
    "description": "Returns a transform that can be used to convert points from tracking space to world space. Does NOT include the set WorldToMeters scale, as that is added in by the backing XR system to their tracking space poses.",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "FTransform"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetTrackingSensorParameters",
    "description": "If the HMD has a positional sensor, this will return the game-world location of it, as well as the parameters for the bounding region of tracking. This allows an in-game representation of the legal positional tracking range.  All values will be zeroed if the sensor is not available or the HMD does not support it.",
    "parameters": [
      {
        "name": "Origin",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "LeftFOV",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "RightFOV",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "TopFOV",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "BottomFOV",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "Distance",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "NearPlane",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "FarPlane",
        "type": "number",
        "optional": false,
        "out": true
      },
      {
        "name": "IsActive",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Index",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetTrackingOriginTransform",
    "description": "Get the transform of the specified tracking origin, if available.",
    "parameters": [
      {
        "name": "Origin",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "OutTransform",
        "type": "FTransform",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetTrackingOrigin",
    "description": "Returns current tracking origin type (eye level or floor level).",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetPlayAreaRect",
    "description": "Get the transform and dimensions of the playable area rectangle.  Returns false if none currently specified/available.",
    "parameters": [
      {
        "name": "OutTransform",
        "type": "FTransform",
        "optional": false,
        "out": true
      },
      {
        "name": "OutRect",
        "type": "FVector2D",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetPlayAreaBounds",
    "description": "Get the bounds of the area where the user can freely move while remaining tracked centered around the specified origin",
    "parameters": [
      {
        "name": "Origin",
        "type": "integer",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "FVector2D"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetPixelDensity",
    "description": "Returns the current VR pixel density. Pixel density sets the VR render target texture size as a factor of recommended texture size. The recommended texture size is the size that will result in no under sampling in most distorted area of the view when computing the final image to be displayed on the device by the runtime compositor.",
    "parameters": [],
    "returnType": "number"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetOrientationAndPosition",
    "description": "Grabs the current orientation and position for the HMD.  If positional tracking is not available, DevicePosition will be a zero vector",
    "parameters": [
      {
        "name": "DeviceRotation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "DevicePosition",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetNumOfTrackingSensors",
    "description": "If the HMD has multiple positional tracking sensors, return a total number of them currently connected.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetMotionControllerState",
    "description": "Cross XR-System query that returns critical information about the motion controller (position, orientation)",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "XRSpaceType",
        "type": "EXRSpaceType",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerPoseType",
        "type": "EXRControllerPoseType",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionControllerState",
        "type": "FXRMotionControllerState",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetMotionControllerData",
    "description": "Cross XR-System query that returns critical information about the motion controller (position, orientation, hand/finger position)",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionControllerData",
        "type": "FXRMotionControllerData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetHMDWornState",
    "description": "Returns the worn state of the device.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetHMDDeviceName",
    "description": "Returns the name of the device, so scripts can modify their behaviour appropriately",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetHMDData",
    "description": "Cross XR-System query that returns critical information about the HMD display (position, orientation, device name)",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "HMDData",
        "type": "FXRHMDData",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetHandTrackingState",
    "description": "Cross XR-System query that returns critical information about the motion controller (position, orientation, hand/finger position)",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "XRSpaceType",
        "type": "EXRSpaceType",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      },
      {
        "name": "HandTrackingState",
        "type": "FXRHandTrackingState",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetDeviceWorldPose",
    "description": "Cross XR-System query that returns a specific device's position and orientation in world space.",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsTracked",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasPositionalTracking",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetDevicePose",
    "description": "Cross XR-System query that returns a specific device's tracked position and orientation (in tracking space).",
    "parameters": [
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "bIsTracked",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "bHasPositionalTracking",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetCurrentInteractionProfile",
    "description": "Get the openXR interaction profile name for the given controller. Returns true if the openxr call is successfully made.  The string may be empty if there is no interaction profile associated with the controller.",
    "parameters": [
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionProfile",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "GetControllerTransformForTime2",
    "description": "Get the transform and potentially velocity data at a specified time near the current frame in unreal world space. This is intended for use with sub-frame input action timing data from SetXRTimedInputActionDelegate, or future support for timestamps in the core input system. The valid time window is platform dependent, but the intention per OpenXR is to fetch transforms for times from, at most, the previous few frames in the past or future. The OpenXR spec suggests that 50ms in the past should return an accurate result.  There is no guarantee for the future, but the underlying system is likely to have been designed to predict out to about 50ms as well. On some platforms this  will always just return a cached position and rotation, ignoring time.  bTimeWasUsed will be false in that case. AngularVelocity is a Rotator in degrees/second. Be aware that this Rotator may have windings (rotations greater than 360 degrees) and some mathmatical operations (such as conversion to quaternion) will remove the windings. In some cases that is OK becuase the resulting final rotation is the same, but in some cases it would generate incorrect results.",
    "parameters": [
      {
        "name": "WorldContext",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "ControllerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "MotionSource",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "Time",
        "type": "FTimespan",
        "optional": false,
        "out": false
      },
      {
        "name": "bTimeWasUsed",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "Orientation",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bProvidedLinearVelocity",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearVelocity",
        "type": "FVector",
        "optional": false,
        "out": true
      },
      {
        "name": "bProvidedAngularVelocity",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "AngularVelocity",
        "type": "FRotator",
        "optional": false,
        "out": true
      },
      {
        "name": "bProvidedLinearAcceleration",
        "type": "boolean",
        "optional": false,
        "out": true
      },
      {
        "name": "LinearAcceleration",
        "type": "FVector",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "EnumerateTrackedDevices",
    "description": "Cross XR-System query that will list all XR devices currently being tracked.",
    "parameters": [
      {
        "name": "SystemId",
        "type": "string",
        "optional": true,
        "out": false
      },
      {
        "name": "DeviceType",
        "type": "EXRTrackedDeviceType",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "TArray_FXRDeviceId_"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "EnableHMD",
    "description": "Switches to/from using HMD and stereo rendering.",
    "parameters": [
      {
        "name": "bEnable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "DisconnectRemoteXRDevice",
    "description": "Disconnect remote AR Device",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "ConnectRemoteXRDevice",
    "description": "Connect to a remote device",
    "parameters": [
      {
        "name": "IpAddress",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "BitRate",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "integer"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "ClearXRTimedInputActionDelegate",
    "description": "/ Clear a delegate to get an OpenXR action event with action time.",
    "parameters": [
      {
        "name": "ActionPath",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "CalibrateExternalTrackingToHMD",
    "description": "Called to calibrate the offset transform between an external tracking source and the internal tracking source (e.g. mocap tracker to and HMD tracker).  This should be called once per session, or when the physical relationship between the external tracker and internal tracker changes (e.g. it was bumped or reattached).  After calibration, calling UpdateExternalTrackingPosition will try to correct the internal tracker to the calibrated offset to prevent drift between the two systems",
    "parameters": [
      {
        "name": "ExternalTrackingTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UHeadMountedDisplayFunctionLibrary",
    "name": "BreakKey",
    "description": "Breaks an XR key apart into the interaction profile, handedness, motion source, indentifier and component.",
    "parameters": [
      {
        "name": "InKey",
        "type": "FKey",
        "optional": false,
        "out": false
      },
      {
        "name": "InteractionProfile",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": true
      },
      {
        "name": "MotionSource",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Indentifier",
        "type": "string",
        "optional": false,
        "out": true
      },
      {
        "name": "Component",
        "type": "string",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "SetIsControllerMotionTrackingEnabledByDefault",
    "description": "Set whether motion tracked controllers activate on creation by default, or do not and must be explicitly activated.",
    "parameters": [
      {
        "name": "Enable",
        "type": "boolean",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "IsMotionTrackingEnabledForSource",
    "description": "Returns true if tracking is enabled for the specified device.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "IsMotionTrackingEnabledForDevice",
    "description": "Returns true if tracking is enabled for the specified device.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "IsMotionTrackingEnabledForComponent",
    "description": "Returns true if tracking is enabled for the specified device.",
    "parameters": [
      {
        "name": "MotionControllerComponent",
        "type": "UMotionControllerComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "IsMotionTrackedDeviceCountManagementNecessary",
    "description": "Returns true if it is necessary for the game to manage how many motion tracked devices it is asking to be tracked simultaneously. On some platforms this is unnecessary because all supported devices can be tracked simultaneously.",
    "parameters": [],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "IsMotionSourceTracking",
    "description": "Queries the specified source's tracking status and returns true if it has tracking.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "GetMotionTrackingEnabledControllerCount",
    "description": "Get the number of controllers for which tracking is enabled.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "GetMaximumMotionTrackedControllerCount",
    "description": "Get the maximum number of controllers that can be tracked.",
    "parameters": [],
    "returnType": "integer"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "GetActiveTrackingSystemName",
    "description": "Returns the system name used to distinguish the current tracking system. If no XR tracking system is active, then the name 'None' is returned.",
    "parameters": [],
    "returnType": "string"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "EnumerateMotionSources",
    "description": "Returns a list of all available motion sources (FNames associated with discrete tracking data that can be used to drive MotionControllerComponents).",
    "parameters": [],
    "returnType": "TArray_string_"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "EnableMotionTrackingOfSource",
    "description": "Enable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "EnableMotionTrackingOfDevice",
    "description": "Enable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "EnableMotionTrackingForComponent",
    "description": "Enable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "MotionControllerComponent",
        "type": "UMotionControllerComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "boolean"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "DisableMotionTrackingOfSource",
    "description": "Disable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "SourceName",
        "type": "string",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "DisableMotionTrackingOfDevice",
    "description": "Disable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      },
      {
        "name": "Hand",
        "type": "EControllerHand",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "DisableMotionTrackingOfControllersForPlayer",
    "description": "Disable tracking for all controllers associated with the specified player.",
    "parameters": [
      {
        "name": "PlayerIndex",
        "type": "integer",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "DisableMotionTrackingOfAllControllers",
    "description": "Disable tracking for all controllers.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UMotionTrackedDeviceFunctionLibrary",
    "name": "DisableMotionTrackingForComponent",
    "description": "Disable tracking of the specified controller, by player index and tracked device type.",
    "parameters": [
      {
        "name": "MotionControllerComponent",
        "type": "UMotionControllerComponent",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UXRAssetFunctionLibrary",
    "name": "AddNamedDeviceVisualizationComponentBlocking",
    "description": "UXRAssetFunctionLibrary Spawns a render component for the specified XR device. NOTE: The associated XR system backend has to provide a model for this to work - if one is not available for the specific device, then this will fail and return an invalid (null) object.",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "SystemName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "DeviceName",
        "type": "string",
        "optional": false,
        "out": false
      },
      {
        "name": "bManualAttachment",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      },
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": true
      }
    ],
    "returnType": "UPrimitiveComponent"
  },
  {
    "class": "UXRAssetFunctionLibrary",
    "name": "AddDeviceVisualizationComponentBlocking",
    "description": "Spawns a render component for the specified XR device. NOTE: The associated XR system backend has to provide a model for this to work - if one is not available for the specific device, then this will fail and return an invalid (null) object.",
    "parameters": [
      {
        "name": "Target",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "XRDeviceId",
        "type": "FXRDeviceId",
        "optional": false,
        "out": false
      },
      {
        "name": "bManualAttachment",
        "type": "boolean",
        "optional": false,
        "out": false
      },
      {
        "name": "RelativeTransform",
        "type": "FTransform",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "UPrimitiveComponent"
  },
  {
    "class": "UXRLoadingScreenFunctionLibrary",
    "name": "ShowLoadingScreen",
    "description": "XR Loading Screen Function Library Show the loading screen and override the VR display",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UXRLoadingScreenFunctionLibrary",
    "name": "SetLoadingScreen",
    "description": "Sets the loading screen texture for VR displays.",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Scale",
        "type": "FVector2D",
        "optional": true,
        "out": false
      },
      {
        "name": "Offset",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "bShowLoadingMovie",
        "type": "boolean",
        "optional": true,
        "out": false
      },
      {
        "name": "bShowOnSet",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UXRLoadingScreenFunctionLibrary",
    "name": "HideLoadingScreen",
    "description": "Hide the splash screen and return to normal display.",
    "parameters": [],
    "returnType": "void"
  },
  {
    "class": "UXRLoadingScreenFunctionLibrary",
    "name": "AddLoadingScreenSplash",
    "description": "Adds a splash element to the loading screen.",
    "parameters": [
      {
        "name": "Texture",
        "type": "UTexture",
        "optional": false,
        "out": false
      },
      {
        "name": "Translation",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Rotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "Size",
        "type": "FVector2D",
        "optional": true,
        "out": false
      },
      {
        "name": "DeltaRotation",
        "type": "FRotator",
        "optional": false,
        "out": false
      },
      {
        "name": "bClearBeforeAdd",
        "type": "boolean",
        "optional": true,
        "out": false
      }
    ],
    "returnType": "void"
  },
  {
    "class": "UZoneGraphDisturbanceAnnotationBPLibrary",
    "name": "TriggerDanger",
    "description": "Set of utilities for dealing with Disturbance Annotation. * Triggers Danger event at specific location. * @@param Instigator (optional) identifies this event coming from specific Instigator, only one danger will persist per instigator. * @@param Position Position of the danger. * @@param Radius Radius of the danger. * @@param Duration Duration of the danger.",
    "parameters": [
      {
        "name": "WorldContextObject",
        "type": "UObject",
        "optional": false,
        "out": false
      },
      {
        "name": "Instigator",
        "type": "AActor",
        "optional": false,
        "out": false
      },
      {
        "name": "Position",
        "type": "FVector",
        "optional": false,
        "out": false
      },
      {
        "name": "Radius",
        "type": "number",
        "optional": false,
        "out": false
      },
      {
        "name": "Duration",
        "type": "number",
        "optional": false,
        "out": false
      }
    ],
    "returnType": "void"
  }
]